/*
 * generated by Xtext
 */
package org.xtext.hipie.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class HIPIEGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProgramAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cComposition_headerParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cBase_propParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cContract_instanceParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cInput_sectionParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cOutput_sectionParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cVisual_sectionParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final RuleCall cGenerate_sectionParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final RuleCall cCustom_sectionParserRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final RuleCall cResource_sectionParserRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		
		//program:
		//	{program} composition_header? base_prop+ contract_instance* input_section? output_section? visual_section*
		//	generate_section? custom_section? resource_section?;
		@Override public ParserRule getRule() { return rule; }

		//{program} composition_header? base_prop+ contract_instance* input_section? output_section? visual_section*
		//generate_section? custom_section? resource_section?
		public Group getGroup() { return cGroup; }

		//{program}
		public Action getProgramAction_0() { return cProgramAction_0; }

		//composition_header?
		public RuleCall getComposition_headerParserRuleCall_1() { return cComposition_headerParserRuleCall_1; }

		//base_prop+
		public RuleCall getBase_propParserRuleCall_2() { return cBase_propParserRuleCall_2; }

		//contract_instance*
		public RuleCall getContract_instanceParserRuleCall_3() { return cContract_instanceParserRuleCall_3; }

		//input_section?
		public RuleCall getInput_sectionParserRuleCall_4() { return cInput_sectionParserRuleCall_4; }

		//output_section?
		public RuleCall getOutput_sectionParserRuleCall_5() { return cOutput_sectionParserRuleCall_5; }

		//visual_section*
		public RuleCall getVisual_sectionParserRuleCall_6() { return cVisual_sectionParserRuleCall_6; }

		//generate_section?
		public RuleCall getGenerate_sectionParserRuleCall_7() { return cGenerate_sectionParserRuleCall_7; }

		//custom_section?
		public RuleCall getCustom_sectionParserRuleCall_8() { return cCustom_sectionParserRuleCall_8; }

		//resource_section?
		public RuleCall getResource_sectionParserRuleCall_9() { return cResource_sectionParserRuleCall_9; }
	}

	public class Base_propElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "base_prop");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Keyword cNAMEKeyword_0_0_0 = (Keyword)cAlternatives_0_0.eContents().get(0);
		private final Keyword cDESCRIPTIONKeyword_0_0_1 = (Keyword)cAlternatives_0_0.eContents().get(1);
		private final Keyword cAUTHORKeyword_0_0_2 = (Keyword)cAlternatives_0_0.eContents().get(2);
		private final Keyword cLICENSEKeyword_0_0_3 = (Keyword)cAlternatives_0_0.eContents().get(3);
		private final Keyword cCOPYRIGHTKeyword_0_0_4 = (Keyword)cAlternatives_0_0.eContents().get(4);
		private final Keyword cVERSIONKeyword_0_0_5 = (Keyword)cAlternatives_0_0.eContents().get(5);
		private final Keyword cLABELKeyword_0_0_6 = (Keyword)cAlternatives_0_0.eContents().get(6);
		private final Keyword cIDKeyword_0_0_7 = (Keyword)cAlternatives_0_0.eContents().get(7);
		private final RuleCall cValue_listParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cCATEGORYKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cCategory_type_listParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//base_prop:
		//	("NAME" | "DESCRIPTION" | "AUTHOR" | "LICENSE" | "COPYRIGHT" | "VERSION" | "LABEL" | "ID") value_list ";" | "CATEGORY"
		//	category_type_list ";";
		@Override public ParserRule getRule() { return rule; }

		//("NAME" | "DESCRIPTION" | "AUTHOR" | "LICENSE" | "COPYRIGHT" | "VERSION" | "LABEL" | "ID") value_list ";" | "CATEGORY"
		//category_type_list ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//("NAME" | "DESCRIPTION" | "AUTHOR" | "LICENSE" | "COPYRIGHT" | "VERSION" | "LABEL" | "ID") value_list ";"
		public Group getGroup_0() { return cGroup_0; }

		//"NAME" | "DESCRIPTION" | "AUTHOR" | "LICENSE" | "COPYRIGHT" | "VERSION" | "LABEL" | "ID"
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }

		//"NAME"
		public Keyword getNAMEKeyword_0_0_0() { return cNAMEKeyword_0_0_0; }

		//"DESCRIPTION"
		public Keyword getDESCRIPTIONKeyword_0_0_1() { return cDESCRIPTIONKeyword_0_0_1; }

		//"AUTHOR"
		public Keyword getAUTHORKeyword_0_0_2() { return cAUTHORKeyword_0_0_2; }

		//"LICENSE"
		public Keyword getLICENSEKeyword_0_0_3() { return cLICENSEKeyword_0_0_3; }

		//"COPYRIGHT"
		public Keyword getCOPYRIGHTKeyword_0_0_4() { return cCOPYRIGHTKeyword_0_0_4; }

		//"VERSION"
		public Keyword getVERSIONKeyword_0_0_5() { return cVERSIONKeyword_0_0_5; }

		//"LABEL"
		public Keyword getLABELKeyword_0_0_6() { return cLABELKeyword_0_0_6; }

		//"ID"
		public Keyword getIDKeyword_0_0_7() { return cIDKeyword_0_0_7; }

		//value_list
		public RuleCall getValue_listParserRuleCall_0_1() { return cValue_listParserRuleCall_0_1; }

		//";"
		public Keyword getSemicolonKeyword_0_2() { return cSemicolonKeyword_0_2; }

		//"CATEGORY" category_type_list ";"
		public Group getGroup_1() { return cGroup_1; }

		//"CATEGORY"
		public Keyword getCATEGORYKeyword_1_0() { return cCATEGORYKeyword_1_0; }

		//category_type_list
		public RuleCall getCategory_type_listParserRuleCall_1_1() { return cCategory_type_listParserRuleCall_1_1; }

		//";"
		public Keyword getSemicolonKeyword_1_2() { return cSemicolonKeyword_1_2; }
	}

	public class Category_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "category_type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCLEANKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cINPUTKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAPPENDKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLINKKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cANALYSISKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cCUSTOMKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cVISUALIZEKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cOUTPUTKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//category_type:
		//	"CLEAN" | "INPUT" | "APPEND" | "LINK" | "ANALYSIS" | "CUSTOM" | "VISUALIZE" | "OUTPUT";
		@Override public ParserRule getRule() { return rule; }

		//"CLEAN" | "INPUT" | "APPEND" | "LINK" | "ANALYSIS" | "CUSTOM" | "VISUALIZE" | "OUTPUT"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"CLEAN"
		public Keyword getCLEANKeyword_0() { return cCLEANKeyword_0; }

		//"INPUT"
		public Keyword getINPUTKeyword_1() { return cINPUTKeyword_1; }

		//"APPEND"
		public Keyword getAPPENDKeyword_2() { return cAPPENDKeyword_2; }

		//"LINK"
		public Keyword getLINKKeyword_3() { return cLINKKeyword_3; }

		//"ANALYSIS"
		public Keyword getANALYSISKeyword_4() { return cANALYSISKeyword_4; }

		//"CUSTOM"
		public Keyword getCUSTOMKeyword_5() { return cCUSTOMKeyword_5; }

		//"VISUALIZE"
		public Keyword getVISUALIZEKeyword_6() { return cVISUALIZEKeyword_6; }

		//"OUTPUT"
		public Keyword getOUTPUTKeyword_7() { return cOUTPUTKeyword_7; }
	}

	public class Category_type_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "category_type_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCategory_typeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cCategory_typeParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//category_type_list:
		//	category_type ("," category_type)*;
		@Override public ParserRule getRule() { return rule; }

		//category_type ("," category_type)*
		public Group getGroup() { return cGroup; }

		//category_type
		public RuleCall getCategory_typeParserRuleCall_0() { return cCategory_typeParserRuleCall_0; }

		//("," category_type)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//category_type
		public RuleCall getCategory_typeParserRuleCall_1_1() { return cCategory_typeParserRuleCall_1_1; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTOKENTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//value:
		//	TOKEN | INT | STRING;
		@Override public ParserRule getRule() { return rule; }

		//TOKEN | INT | STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//TOKEN
		public RuleCall getTOKENTerminalRuleCall_0() { return cTOKENTerminalRuleCall_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }
	}

	public class Value_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "value_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cValueParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cValueParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//value_list:
		//	value ("," value)*;
		@Override public ParserRule getRule() { return rule; }

		//value ("," value)*
		public Group getGroup() { return cGroup; }

		//value
		public RuleCall getValueParserRuleCall_0() { return cValueParserRuleCall_0; }

		//("," value)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//value
		public RuleCall getValueParserRuleCall_1_1() { return cValueParserRuleCall_1_1; }
	}

	public class Token_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "token_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTOKENTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cTOKENTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//token_list:
		//	TOKEN ("," TOKEN)*;
		@Override public ParserRule getRule() { return rule; }

		//TOKEN ("," TOKEN)*
		public Group getGroup() { return cGroup; }

		//TOKEN
		public RuleCall getTOKENTerminalRuleCall_0() { return cTOKENTerminalRuleCall_0; }

		//("," TOKEN)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//TOKEN
		public RuleCall getTOKENTerminalRuleCall_1_1() { return cTOKENTerminalRuleCall_1_1; }
	}

	public class AssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "assign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cValueParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cValue_listParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//assign:
		//	value "=" value_list;
		@Override public ParserRule getRule() { return rule; }

		//value "=" value_list
		public Group getGroup() { return cGroup; }

		//value
		public RuleCall getValueParserRuleCall_0() { return cValueParserRuleCall_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value_list
		public RuleCall getValue_listParserRuleCall_2() { return cValue_listParserRuleCall_2; }
	}

	public class Assign_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "assign_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAssignParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cAssignParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//assign_list:
		//	assign ("," assign)*;
		@Override public ParserRule getRule() { return rule; }

		//assign ("," assign)*
		public Group getGroup() { return cGroup; }

		//assign
		public RuleCall getAssignParserRuleCall_0() { return cAssignParserRuleCall_0; }

		//("," assign)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//assign
		public RuleCall getAssignParserRuleCall_1_1() { return cAssignParserRuleCall_1_1; }
	}

	public class Composition_headerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "composition_header");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHEADERKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cAssignParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cENDKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//composition_header:
		//	"HEADER" assign* "END";
		@Override public ParserRule getRule() { return rule; }

		//"HEADER" assign* "END"
		public Group getGroup() { return cGroup; }

		//"HEADER"
		public Keyword getHEADERKeyword_0() { return cHEADERKeyword_0; }

		//assign*
		public RuleCall getAssignParserRuleCall_1() { return cAssignParserRuleCall_1; }

		//"END"
		public Keyword getENDKeyword_2() { return cENDKeyword_2; }
	}

	public class Contract_instanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "contract_instance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cINSTANCEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cTOKENTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cValueParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cValueParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cAssignParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Keyword cENDKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//contract_instance:
		//	"INSTANCE" (TOKEN ":")? value "(" value ")" assign* "END";
		@Override public ParserRule getRule() { return rule; }

		//"INSTANCE" (TOKEN ":")? value "(" value ")" assign* "END"
		public Group getGroup() { return cGroup; }

		//"INSTANCE"
		public Keyword getINSTANCEKeyword_0() { return cINSTANCEKeyword_0; }

		//(TOKEN ":")?
		public Group getGroup_1() { return cGroup_1; }

		//TOKEN
		public RuleCall getTOKENTerminalRuleCall_1_0() { return cTOKENTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }

		//value
		public RuleCall getValueParserRuleCall_2() { return cValueParserRuleCall_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//value
		public RuleCall getValueParserRuleCall_4() { return cValueParserRuleCall_4; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//assign*
		public RuleCall getAssignParserRuleCall_6() { return cAssignParserRuleCall_6; }

		//"END"
		public Keyword getENDKeyword_7() { return cENDKeyword_7; }
	}

	public class Field_declElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "field_decl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFIELDKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cTOKENTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cInput_optionsParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//field_decl:
		//	"FIELD" TOKEN input_options? ";";
		@Override public ParserRule getRule() { return rule; }

		//"FIELD" TOKEN input_options? ";"
		public Group getGroup() { return cGroup; }

		//"FIELD"
		public Keyword getFIELDKeyword_0() { return cFIELDKeyword_0; }

		//TOKEN
		public RuleCall getTOKENTerminalRuleCall_1() { return cTOKENTerminalRuleCall_1; }

		//input_options?
		public RuleCall getInput_optionsParserRuleCall_2() { return cInput_optionsParserRuleCall_2; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class Enum_declElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "enum_decl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cENUMKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cValue_listParserRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cAssign_listParserRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//enum_decl:
		//	"ENUM" "(" (value_list | assign_list) ")";
		@Override public ParserRule getRule() { return rule; }

		//"ENUM" "(" (value_list | assign_list) ")"
		public Group getGroup() { return cGroup; }

		//"ENUM"
		public Keyword getENUMKeyword_0() { return cENUMKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//value_list | assign_list
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//value_list
		public RuleCall getValue_listParserRuleCall_2_0() { return cValue_listParserRuleCall_2_0; }

		//assign_list
		public RuleCall getAssign_listParserRuleCall_2_1() { return cAssign_listParserRuleCall_2_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class Input_sectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "input_section");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cINPUTSKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cInput_valueParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cENDKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//input_section:
		//	"INPUTS" input_value+ "END";
		@Override public ParserRule getRule() { return rule; }

		//"INPUTS" input_value+ "END"
		public Group getGroup() { return cGroup; }

		//"INPUTS"
		public Keyword getINPUTSKeyword_0() { return cINPUTSKeyword_0; }

		//input_value+
		public RuleCall getInput_valueParserRuleCall_1() { return cInput_valueParserRuleCall_1; }

		//"END"
		public Keyword getENDKeyword_2() { return cENDKeyword_2; }
	}

	public class Input_valueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "input_value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Keyword cBOOLKeyword_0_0_0 = (Keyword)cAlternatives_0_0.eContents().get(0);
		private final Keyword cINTKeyword_0_0_1 = (Keyword)cAlternatives_0_0.eContents().get(1);
		private final RuleCall cEnum_declParserRuleCall_0_0_2 = (RuleCall)cAlternatives_0_0.eContents().get(2);
		private final Keyword cSTRINGKeyword_0_0_3 = (Keyword)cAlternatives_0_0.eContents().get(3);
		private final Keyword cRECORDKeyword_0_0_4 = (Keyword)cAlternatives_0_0.eContents().get(4);
		private final Keyword cDATASETKeyword_0_0_5 = (Keyword)cAlternatives_0_0.eContents().get(5);
		private final RuleCall cTOKENTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cInput_optionsParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cDATASETKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cTOKENTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cInput_optionsParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final RuleCall cField_declParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Keyword cENDKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cGROUPKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cTOKENTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cInput_optionsParserRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final RuleCall cInput_valueParserRuleCall_2_3 = (RuleCall)cGroup_2.eContents().get(3);
		private final Keyword cENDKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		
		//input_value:
		//	("BOOL" | "INT" | enum_decl | "STRING" | "RECORD" | "DATASET") TOKEN input_options? ";" | "DATASET" TOKEN
		//	input_options? field_decl* "END" | "GROUP" TOKEN input_options? input_value* "END";
		@Override public ParserRule getRule() { return rule; }

		//("BOOL" | "INT" | enum_decl | "STRING" | "RECORD" | "DATASET") TOKEN input_options? ";" | "DATASET" TOKEN input_options?
		//field_decl* "END" | "GROUP" TOKEN input_options? input_value* "END"
		public Alternatives getAlternatives() { return cAlternatives; }

		//("BOOL" | "INT" | enum_decl | "STRING" | "RECORD" | "DATASET") TOKEN input_options? ";"
		public Group getGroup_0() { return cGroup_0; }

		//"BOOL" | "INT" | enum_decl | "STRING" | "RECORD" | "DATASET"
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }

		//"BOOL"
		public Keyword getBOOLKeyword_0_0_0() { return cBOOLKeyword_0_0_0; }

		//"INT"
		public Keyword getINTKeyword_0_0_1() { return cINTKeyword_0_0_1; }

		//enum_decl
		public RuleCall getEnum_declParserRuleCall_0_0_2() { return cEnum_declParserRuleCall_0_0_2; }

		//"STRING"
		public Keyword getSTRINGKeyword_0_0_3() { return cSTRINGKeyword_0_0_3; }

		//"RECORD"
		public Keyword getRECORDKeyword_0_0_4() { return cRECORDKeyword_0_0_4; }

		//"DATASET"
		public Keyword getDATASETKeyword_0_0_5() { return cDATASETKeyword_0_0_5; }

		//TOKEN
		public RuleCall getTOKENTerminalRuleCall_0_1() { return cTOKENTerminalRuleCall_0_1; }

		//input_options?
		public RuleCall getInput_optionsParserRuleCall_0_2() { return cInput_optionsParserRuleCall_0_2; }

		//";"
		public Keyword getSemicolonKeyword_0_3() { return cSemicolonKeyword_0_3; }

		//"DATASET" TOKEN input_options? field_decl* "END"
		public Group getGroup_1() { return cGroup_1; }

		//"DATASET"
		public Keyword getDATASETKeyword_1_0() { return cDATASETKeyword_1_0; }

		//TOKEN
		public RuleCall getTOKENTerminalRuleCall_1_1() { return cTOKENTerminalRuleCall_1_1; }

		//input_options?
		public RuleCall getInput_optionsParserRuleCall_1_2() { return cInput_optionsParserRuleCall_1_2; }

		//field_decl*
		public RuleCall getField_declParserRuleCall_1_3() { return cField_declParserRuleCall_1_3; }

		//"END"
		public Keyword getENDKeyword_1_4() { return cENDKeyword_1_4; }

		//"GROUP" TOKEN input_options? input_value* "END"
		public Group getGroup_2() { return cGroup_2; }

		//"GROUP"
		public Keyword getGROUPKeyword_2_0() { return cGROUPKeyword_2_0; }

		//TOKEN
		public RuleCall getTOKENTerminalRuleCall_2_1() { return cTOKENTerminalRuleCall_2_1; }

		//input_options?
		public RuleCall getInput_optionsParserRuleCall_2_2() { return cInput_optionsParserRuleCall_2_2; }

		//input_value*
		public RuleCall getInput_valueParserRuleCall_2_3() { return cInput_valueParserRuleCall_2_3; }

		//"END"
		public Keyword getENDKeyword_2_4() { return cENDKeyword_2_4; }
	}

	public class Input_optionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "input_options");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cInput_optionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cInput_optionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//input_options:
		//	":" input_option ("," input_option)*;
		@Override public ParserRule getRule() { return rule; }

		//":" input_option ("," input_option)*
		public Group getGroup() { return cGroup; }

		//":"
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }

		//input_option
		public RuleCall getInput_optionParserRuleCall_1() { return cInput_optionParserRuleCall_1; }

		//("," input_option)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//input_option
		public RuleCall getInput_optionParserRuleCall_2_1() { return cInput_optionParserRuleCall_2_1; }
	}

	public class Input_optionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "input_option");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cAlternatives.eContents().get(0);
		private final Keyword cOPTIONALKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cDEFINEDKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cDISABLEDKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Keyword cMAPBYTYPEKeyword_0_3 = (Keyword)cAlternatives_0.eContents().get(3);
		private final Keyword cMAPBYNAMEKeyword_0_4 = (Keyword)cAlternatives_0.eContents().get(4);
		private final Keyword cMANYKeyword_0_5 = (Keyword)cAlternatives_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFORMFIELDKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cFormfield_optionParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cENABLEKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final RuleCall cAssign_listParserRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cTYPEKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final RuleCall cInputtype_optionsParserRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Keyword cRANGEKeyword_4_0_0 = (Keyword)cAlternatives_4_0.eContents().get(0);
		private final Keyword cDEFAULTKeyword_4_0_1 = (Keyword)cAlternatives_4_0.eContents().get(1);
		private final Keyword cMAXLENGTHKeyword_4_0_2 = (Keyword)cAlternatives_4_0.eContents().get(2);
		private final Keyword cDISABLEDKeyword_4_0_3 = (Keyword)cAlternatives_4_0.eContents().get(3);
		private final Keyword cDESCRIPTIONKeyword_4_0_4 = (Keyword)cAlternatives_4_0.eContents().get(4);
		private final Keyword cNULLKeyword_4_0_5 = (Keyword)cAlternatives_4_0.eContents().get(5);
		private final Keyword cFIELDLENGTHKeyword_4_0_6 = (Keyword)cAlternatives_4_0.eContents().get(6);
		private final Keyword cROWSKeyword_4_0_7 = (Keyword)cAlternatives_4_0.eContents().get(7);
		private final Keyword cCOLSKeyword_4_0_8 = (Keyword)cAlternatives_4_0.eContents().get(8);
		private final Keyword c_HTML_STYLECLASSKeyword_4_0_9 = (Keyword)cAlternatives_4_0.eContents().get(9);
		private final Keyword cLABELKeyword_4_0_10 = (Keyword)cAlternatives_4_0.eContents().get(10);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cValue_listParserRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		
		//input_option:
		//	("OPTIONAL" | "DEFINED" | "DISABLED" | "MAPBYTYPE" | "MAPBYNAME" | "MANY") | "FORMFIELD" "(" formfield_option ")" |
		//	"ENABLE" "(" assign_list ")" | "TYPE" "(" inputtype_options ")" | ("RANGE" | "DEFAULT" | "MAXLENGTH" | "DISABLED" |
		//	"DESCRIPTION" | "NULL" | "FIELDLENGTH" | "ROWS" | "COLS" | "_HTML_STYLECLASS" | "LABEL") "(" value_list ")";
		@Override public ParserRule getRule() { return rule; }

		//("OPTIONAL" | "DEFINED" | "DISABLED" | "MAPBYTYPE" | "MAPBYNAME" | "MANY") | "FORMFIELD" "(" formfield_option ")" |
		//"ENABLE" "(" assign_list ")" | "TYPE" "(" inputtype_options ")" | ("RANGE" | "DEFAULT" | "MAXLENGTH" | "DISABLED" |
		//"DESCRIPTION" | "NULL" | "FIELDLENGTH" | "ROWS" | "COLS" | "_HTML_STYLECLASS" | "LABEL") "(" value_list ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"OPTIONAL" | "DEFINED" | "DISABLED" | "MAPBYTYPE" | "MAPBYNAME" | "MANY"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"OPTIONAL"
		public Keyword getOPTIONALKeyword_0_0() { return cOPTIONALKeyword_0_0; }

		//"DEFINED"
		public Keyword getDEFINEDKeyword_0_1() { return cDEFINEDKeyword_0_1; }

		//"DISABLED"
		public Keyword getDISABLEDKeyword_0_2() { return cDISABLEDKeyword_0_2; }

		//"MAPBYTYPE"
		public Keyword getMAPBYTYPEKeyword_0_3() { return cMAPBYTYPEKeyword_0_3; }

		//"MAPBYNAME"
		public Keyword getMAPBYNAMEKeyword_0_4() { return cMAPBYNAMEKeyword_0_4; }

		//"MANY"
		public Keyword getMANYKeyword_0_5() { return cMANYKeyword_0_5; }

		//"FORMFIELD" "(" formfield_option ")"
		public Group getGroup_1() { return cGroup_1; }

		//"FORMFIELD"
		public Keyword getFORMFIELDKeyword_1_0() { return cFORMFIELDKeyword_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//formfield_option
		public RuleCall getFormfield_optionParserRuleCall_1_2() { return cFormfield_optionParserRuleCall_1_2; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }

		//"ENABLE" "(" assign_list ")"
		public Group getGroup_2() { return cGroup_2; }

		//"ENABLE"
		public Keyword getENABLEKeyword_2_0() { return cENABLEKeyword_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }

		//assign_list
		public RuleCall getAssign_listParserRuleCall_2_2() { return cAssign_listParserRuleCall_2_2; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }

		//"TYPE" "(" inputtype_options ")"
		public Group getGroup_3() { return cGroup_3; }

		//"TYPE"
		public Keyword getTYPEKeyword_3_0() { return cTYPEKeyword_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }

		//inputtype_options
		public RuleCall getInputtype_optionsParserRuleCall_3_2() { return cInputtype_optionsParserRuleCall_3_2; }

		//")"
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }

		//("RANGE" | "DEFAULT" | "MAXLENGTH" | "DISABLED" | "DESCRIPTION" | "NULL" | "FIELDLENGTH" | "ROWS" | "COLS" |
		//"_HTML_STYLECLASS" | "LABEL") "(" value_list ")"
		public Group getGroup_4() { return cGroup_4; }

		//"RANGE" | "DEFAULT" | "MAXLENGTH" | "DISABLED" | "DESCRIPTION" | "NULL" | "FIELDLENGTH" | "ROWS" | "COLS" |
		//"_HTML_STYLECLASS" | "LABEL"
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }

		//"RANGE"
		public Keyword getRANGEKeyword_4_0_0() { return cRANGEKeyword_4_0_0; }

		//"DEFAULT"
		public Keyword getDEFAULTKeyword_4_0_1() { return cDEFAULTKeyword_4_0_1; }

		//"MAXLENGTH"
		public Keyword getMAXLENGTHKeyword_4_0_2() { return cMAXLENGTHKeyword_4_0_2; }

		//"DISABLED"
		public Keyword getDISABLEDKeyword_4_0_3() { return cDISABLEDKeyword_4_0_3; }

		//"DESCRIPTION"
		public Keyword getDESCRIPTIONKeyword_4_0_4() { return cDESCRIPTIONKeyword_4_0_4; }

		//"NULL"
		public Keyword getNULLKeyword_4_0_5() { return cNULLKeyword_4_0_5; }

		//"FIELDLENGTH"
		public Keyword getFIELDLENGTHKeyword_4_0_6() { return cFIELDLENGTHKeyword_4_0_6; }

		//"ROWS"
		public Keyword getROWSKeyword_4_0_7() { return cROWSKeyword_4_0_7; }

		//"COLS"
		public Keyword getCOLSKeyword_4_0_8() { return cCOLSKeyword_4_0_8; }

		//"_HTML_STYLECLASS"
		public Keyword get_HTML_STYLECLASSKeyword_4_0_9() { return c_HTML_STYLECLASSKeyword_4_0_9; }

		//"LABEL"
		public Keyword getLABELKeyword_4_0_10() { return cLABELKeyword_4_0_10; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }

		//value_list
		public RuleCall getValue_listParserRuleCall_4_2() { return cValue_listParserRuleCall_4_2; }

		//")"
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }
	}

	public class Formfield_optionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "formfield_option");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCHECKBOXKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cRADIOKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSELECTKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cMULTIPLESELECTKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cTEXTAREAKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cHIDDENKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cTEXTKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//formfield_option:
		//	"CHECKBOX" | "RADIO" | "SELECT" | "MULTIPLESELECT" | "TEXTAREA" | "HIDDEN" | "TEXT";
		@Override public ParserRule getRule() { return rule; }

		//"CHECKBOX" | "RADIO" | "SELECT" | "MULTIPLESELECT" | "TEXTAREA" | "HIDDEN" | "TEXT"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"CHECKBOX"
		public Keyword getCHECKBOXKeyword_0() { return cCHECKBOXKeyword_0; }

		//"RADIO"
		public Keyword getRADIOKeyword_1() { return cRADIOKeyword_1; }

		//"SELECT"
		public Keyword getSELECTKeyword_2() { return cSELECTKeyword_2; }

		//"MULTIPLESELECT"
		public Keyword getMULTIPLESELECTKeyword_3() { return cMULTIPLESELECTKeyword_3; }

		//"TEXTAREA"
		public Keyword getTEXTAREAKeyword_4() { return cTEXTAREAKeyword_4; }

		//"HIDDEN"
		public Keyword getHIDDENKeyword_5() { return cHIDDENKeyword_5; }

		//"TEXT"
		public Keyword getTEXTKeyword_6() { return cTEXTKeyword_6; }
	}

	public class Inputtype_optionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "inputtype_option");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSTRINGKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cUNICODEKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cUNISTRKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cINTEGERKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cDECIMALKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cNUMERICKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cREALKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//inputtype_option:
		//	"STRING" | "UNICODE" | "UNISTR" | "INTEGER" | "DECIMAL" | "NUMERIC" | "REAL";
		@Override public ParserRule getRule() { return rule; }

		//"STRING" | "UNICODE" | "UNISTR" | "INTEGER" | "DECIMAL" | "NUMERIC" | "REAL"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"STRING"
		public Keyword getSTRINGKeyword_0() { return cSTRINGKeyword_0; }

		//"UNICODE"
		public Keyword getUNICODEKeyword_1() { return cUNICODEKeyword_1; }

		//"UNISTR"
		public Keyword getUNISTRKeyword_2() { return cUNISTRKeyword_2; }

		//"INTEGER"
		public Keyword getINTEGERKeyword_3() { return cINTEGERKeyword_3; }

		//"DECIMAL"
		public Keyword getDECIMALKeyword_4() { return cDECIMALKeyword_4; }

		//"NUMERIC"
		public Keyword getNUMERICKeyword_5() { return cNUMERICKeyword_5; }

		//"REAL"
		public Keyword getREALKeyword_6() { return cREALKeyword_6; }
	}

	public class Inputtype_optionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "inputtype_options");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cInputtype_optionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cInputtype_optionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//inputtype_options:
		//	inputtype_option ("," inputtype_option)*;
		@Override public ParserRule getRule() { return rule; }

		//inputtype_option ("," inputtype_option)*
		public Group getGroup() { return cGroup; }

		//inputtype_option
		public RuleCall getInputtype_optionParserRuleCall_0() { return cInputtype_optionParserRuleCall_0; }

		//("," inputtype_option)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//inputtype_option
		public RuleCall getInputtype_optionParserRuleCall_1_1() { return cInputtype_optionParserRuleCall_1_1; }
	}

	public class Output_sectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "output_section");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOUTPUTSKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cOutput_valueParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cENDKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//output_section:
		//	"OUTPUTS" output_value+ "END";
		@Override public ParserRule getRule() { return rule; }

		//"OUTPUTS" output_value+ "END"
		public Group getGroup() { return cGroup; }

		//"OUTPUTS"
		public Keyword getOUTPUTSKeyword_0() { return cOUTPUTSKeyword_0; }

		//output_value+
		public RuleCall getOutput_valueParserRuleCall_1() { return cOutput_valueParserRuleCall_1; }

		//"END"
		public Keyword getENDKeyword_2() { return cENDKeyword_2; }
	}

	public class Outfield_declElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "outfield_decl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cINTKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cBOOLKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cSTRINGKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Keyword cFIELDKeyword_0_3 = (Keyword)cAlternatives_0.eContents().get(3);
		private final RuleCall cTOKENTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//outfield_decl:
		//	("INT" | "BOOL" | "STRING" | "FIELD") TOKEN;
		@Override public ParserRule getRule() { return rule; }

		//("INT" | "BOOL" | "STRING" | "FIELD") TOKEN
		public Group getGroup() { return cGroup; }

		//"INT" | "BOOL" | "STRING" | "FIELD"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"INT"
		public Keyword getINTKeyword_0_0() { return cINTKeyword_0_0; }

		//"BOOL"
		public Keyword getBOOLKeyword_0_1() { return cBOOLKeyword_0_1; }

		//"STRING"
		public Keyword getSTRINGKeyword_0_2() { return cSTRINGKeyword_0_2; }

		//"FIELD"
		public Keyword getFIELDKeyword_0_3() { return cFIELDKeyword_0_3; }

		//TOKEN
		public RuleCall getTOKENTerminalRuleCall_1() { return cTOKENTerminalRuleCall_1; }
	}

	public class Eclfield_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eclfield_type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Keyword cINTEGERKeyword_0_0_0 = (Keyword)cAlternatives_0_0.eContents().get(0);
		private final Keyword cUNSIGNEDKeyword_0_0_1 = (Keyword)cAlternatives_0_0.eContents().get(1);
		private final Keyword cSTRINGKeyword_0_0_2 = (Keyword)cAlternatives_0_0.eContents().get(2);
		private final Keyword cQSTRINGKeyword_0_0_3 = (Keyword)cAlternatives_0_0.eContents().get(3);
		private final Keyword cVARSTRINGKeyword_0_0_4 = (Keyword)cAlternatives_0_0.eContents().get(4);
		private final Keyword cUNICODEKeyword_0_0_5 = (Keyword)cAlternatives_0_0.eContents().get(5);
		private final Keyword cVARUNICODEKeyword_0_0_6 = (Keyword)cAlternatives_0_0.eContents().get(6);
		private final RuleCall cINTTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cAlternatives.eContents().get(1);
		private final Keyword cDATAKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cREALKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//eclfield_type:
		//	("INTEGER" | "UNSIGNED" | "STRING" | "QSTRING" | "VARSTRING" | "UNICODE" | "VARUNICODE") INT? | ("DATA" | "REAL");
		@Override public ParserRule getRule() { return rule; }

		//("INTEGER" | "UNSIGNED" | "STRING" | "QSTRING" | "VARSTRING" | "UNICODE" | "VARUNICODE") INT? | ("DATA" | "REAL")
		public Alternatives getAlternatives() { return cAlternatives; }

		//("INTEGER" | "UNSIGNED" | "STRING" | "QSTRING" | "VARSTRING" | "UNICODE" | "VARUNICODE") INT?
		public Group getGroup_0() { return cGroup_0; }

		//"INTEGER" | "UNSIGNED" | "STRING" | "QSTRING" | "VARSTRING" | "UNICODE" | "VARUNICODE"
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }

		//"INTEGER"
		public Keyword getINTEGERKeyword_0_0_0() { return cINTEGERKeyword_0_0_0; }

		//"UNSIGNED"
		public Keyword getUNSIGNEDKeyword_0_0_1() { return cUNSIGNEDKeyword_0_0_1; }

		//"STRING"
		public Keyword getSTRINGKeyword_0_0_2() { return cSTRINGKeyword_0_0_2; }

		//"QSTRING"
		public Keyword getQSTRINGKeyword_0_0_3() { return cQSTRINGKeyword_0_0_3; }

		//"VARSTRING"
		public Keyword getVARSTRINGKeyword_0_0_4() { return cVARSTRINGKeyword_0_0_4; }

		//"UNICODE"
		public Keyword getUNICODEKeyword_0_0_5() { return cUNICODEKeyword_0_0_5; }

		//"VARUNICODE"
		public Keyword getVARUNICODEKeyword_0_0_6() { return cVARUNICODEKeyword_0_0_6; }

		//INT?
		public RuleCall getINTTerminalRuleCall_0_1() { return cINTTerminalRuleCall_0_1; }

		//"DATA" | "REAL"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"DATA"
		public Keyword getDATAKeyword_1_0() { return cDATAKeyword_1_0; }

		//"REAL"
		public Keyword getREALKeyword_1_1() { return cREALKeyword_1_1; }
	}

	public class Ecloutput_declElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ecloutput_decl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEclfield_typeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cTOKENTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cOutput_optionsParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ecloutput_decl:
		//	eclfield_type TOKEN output_options? ";";
		@Override public ParserRule getRule() { return rule; }

		//eclfield_type TOKEN output_options? ";"
		public Group getGroup() { return cGroup; }

		//eclfield_type
		public RuleCall getEclfield_typeParserRuleCall_0() { return cEclfield_typeParserRuleCall_0; }

		//TOKEN
		public RuleCall getTOKENTerminalRuleCall_1() { return cTOKENTerminalRuleCall_1; }

		//output_options?
		public RuleCall getOutput_optionsParserRuleCall_2() { return cOutput_optionsParserRuleCall_2; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class Output_optionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "output_option");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cAlternatives.eContents().get(0);
		private final Keyword cSIDEKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cLARGEKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cSMALLKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Keyword cFEWKeyword_0_3 = (Keyword)cAlternatives_0.eContents().get(3);
		private final Keyword cWUIDKeyword_0_4 = (Keyword)cAlternatives_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFROMKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cTOKENTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cDESCRIPTIONKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final RuleCall cValueParserRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//output_option:
		//	("SIDE" | "LARGE" | "SMALL" | "FEW" | "WUID") | "FROM" "(" TOKEN ")" | "DESCRIPTION" "(" value ")";
		@Override public ParserRule getRule() { return rule; }

		//("SIDE" | "LARGE" | "SMALL" | "FEW" | "WUID") | "FROM" "(" TOKEN ")" | "DESCRIPTION" "(" value ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"SIDE" | "LARGE" | "SMALL" | "FEW" | "WUID"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"SIDE"
		public Keyword getSIDEKeyword_0_0() { return cSIDEKeyword_0_0; }

		//"LARGE"
		public Keyword getLARGEKeyword_0_1() { return cLARGEKeyword_0_1; }

		//"SMALL"
		public Keyword getSMALLKeyword_0_2() { return cSMALLKeyword_0_2; }

		//"FEW"
		public Keyword getFEWKeyword_0_3() { return cFEWKeyword_0_3; }

		//"WUID"
		public Keyword getWUIDKeyword_0_4() { return cWUIDKeyword_0_4; }

		//"FROM" "(" TOKEN ")"
		public Group getGroup_1() { return cGroup_1; }

		//"FROM"
		public Keyword getFROMKeyword_1_0() { return cFROMKeyword_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//TOKEN
		public RuleCall getTOKENTerminalRuleCall_1_2() { return cTOKENTerminalRuleCall_1_2; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }

		//"DESCRIPTION" "(" value ")"
		public Group getGroup_2() { return cGroup_2; }

		//"DESCRIPTION"
		public Keyword getDESCRIPTIONKeyword_2_0() { return cDESCRIPTIONKeyword_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }

		//value
		public RuleCall getValueParserRuleCall_2_2() { return cValueParserRuleCall_2_2; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}

	public class Output_optionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "output_options");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cOutput_optionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cOutput_optionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//output_options:
		//	":" output_option ("," output_option)*;
		@Override public ParserRule getRule() { return rule; }

		//":" output_option ("," output_option)*
		public Group getGroup() { return cGroup; }

		//":"
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }

		//output_option
		public RuleCall getOutput_optionParserRuleCall_1() { return cOutput_optionParserRuleCall_1; }

		//("," output_option)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//output_option
		public RuleCall getOutput_optionParserRuleCall_2_1() { return cOutput_optionParserRuleCall_2_1; }
	}

	public class Output_valueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "output_value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Keyword cBOOLKeyword_0_0_0 = (Keyword)cAlternatives_0_0.eContents().get(0);
		private final Keyword cINTKeyword_0_0_1 = (Keyword)cAlternatives_0_0.eContents().get(1);
		private final Keyword cSTRINGKeyword_0_0_2 = (Keyword)cAlternatives_0_0.eContents().get(2);
		private final Keyword cACTIONKeyword_0_0_3 = (Keyword)cAlternatives_0_0.eContents().get(3);
		private final RuleCall cValueParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cOutput_optionsParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cDATASETKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cTOKENTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cOutput_baseParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final RuleCall cOutput_optionsParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final RuleCall cEcloutput_declParserRuleCall_1_4 = (RuleCall)cGroup_1.eContents().get(4);
		private final Keyword cENDKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cDATASETKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cTOKENTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cOutput_baseParserRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final RuleCall cOutput_optionsParserRuleCall_2_3 = (RuleCall)cGroup_2.eContents().get(3);
		private final Keyword cSemicolonKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		
		//output_value:
		//	("BOOL" | "INT" | "STRING" | "ACTION")? value output_options? ";" | "DATASET" TOKEN output_base? output_options?
		//	ecloutput_decl* "END" | "DATASET" TOKEN output_base? output_options? ";";
		@Override public ParserRule getRule() { return rule; }

		//("BOOL" | "INT" | "STRING" | "ACTION")? value output_options? ";" | "DATASET" TOKEN output_base? output_options?
		//ecloutput_decl* "END" | "DATASET" TOKEN output_base? output_options? ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//("BOOL" | "INT" | "STRING" | "ACTION")? value output_options? ";"
		public Group getGroup_0() { return cGroup_0; }

		//("BOOL" | "INT" | "STRING" | "ACTION")?
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }

		//"BOOL"
		public Keyword getBOOLKeyword_0_0_0() { return cBOOLKeyword_0_0_0; }

		//"INT"
		public Keyword getINTKeyword_0_0_1() { return cINTKeyword_0_0_1; }

		//"STRING"
		public Keyword getSTRINGKeyword_0_0_2() { return cSTRINGKeyword_0_0_2; }

		//"ACTION"
		public Keyword getACTIONKeyword_0_0_3() { return cACTIONKeyword_0_0_3; }

		//value
		public RuleCall getValueParserRuleCall_0_1() { return cValueParserRuleCall_0_1; }

		//output_options?
		public RuleCall getOutput_optionsParserRuleCall_0_2() { return cOutput_optionsParserRuleCall_0_2; }

		//";"
		public Keyword getSemicolonKeyword_0_3() { return cSemicolonKeyword_0_3; }

		//"DATASET" TOKEN output_base? output_options? ecloutput_decl* "END"
		public Group getGroup_1() { return cGroup_1; }

		//"DATASET"
		public Keyword getDATASETKeyword_1_0() { return cDATASETKeyword_1_0; }

		//TOKEN
		public RuleCall getTOKENTerminalRuleCall_1_1() { return cTOKENTerminalRuleCall_1_1; }

		//output_base?
		public RuleCall getOutput_baseParserRuleCall_1_2() { return cOutput_baseParserRuleCall_1_2; }

		//output_options?
		public RuleCall getOutput_optionsParserRuleCall_1_3() { return cOutput_optionsParserRuleCall_1_3; }

		//ecloutput_decl*
		public RuleCall getEcloutput_declParserRuleCall_1_4() { return cEcloutput_declParserRuleCall_1_4; }

		//"END"
		public Keyword getENDKeyword_1_5() { return cENDKeyword_1_5; }

		//"DATASET" TOKEN output_base? output_options? ";"
		public Group getGroup_2() { return cGroup_2; }

		//"DATASET"
		public Keyword getDATASETKeyword_2_0() { return cDATASETKeyword_2_0; }

		//TOKEN
		public RuleCall getTOKENTerminalRuleCall_2_1() { return cTOKENTerminalRuleCall_2_1; }

		//output_base?
		public RuleCall getOutput_baseParserRuleCall_2_2() { return cOutput_baseParserRuleCall_2_2; }

		//output_options?
		public RuleCall getOutput_optionsParserRuleCall_2_3() { return cOutput_optionsParserRuleCall_2_3; }

		//";"
		public Keyword getSemicolonKeyword_2_4() { return cSemicolonKeyword_2_4; }
	}

	public class Output_baseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "output_base");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cTOKENTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//output_base:
		//	"(" TOKEN ")";
		@Override public ParserRule getRule() { return rule; }

		//"(" TOKEN ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//TOKEN
		public RuleCall getTOKENTerminalRuleCall_1() { return cTOKENTerminalRuleCall_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class Generate_sectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "generate_section");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGENERATESKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cGenerate_bodyParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cENDGENERATESKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//generate_section:
		//	"GENERATES" generate_body "ENDGENERATES";
		@Override public ParserRule getRule() { return rule; }

		//"GENERATES" generate_body "ENDGENERATES"
		public Group getGroup() { return cGroup; }

		//"GENERATES"
		public Keyword getGENERATESKeyword_0() { return cGENERATESKeyword_0; }

		//generate_body
		public RuleCall getGenerate_bodyParserRuleCall_1() { return cGenerate_bodyParserRuleCall_1; }

		//"ENDGENERATES"
		public Keyword getENDGENERATESKeyword_2() { return cENDGENERATESKeyword_2; }
	}

	public class Generate_bodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "generate_body");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cINLINEKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Keyword cFullStopKeyword_0_1_0 = (Keyword)cAlternatives_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1_1 = (Keyword)cAlternatives_0_1.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cSALTKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cTOKENTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cColonKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Alternatives cAlternatives_1_5 = (Alternatives)cGroup_1.eContents().get(5);
		private final Keyword cSCOREDSEARCHKeyword_1_5_0 = (Keyword)cAlternatives_1_5.eContents().get(0);
		private final Keyword cPROFILEKeyword_1_5_1 = (Keyword)cAlternatives_1_5.eContents().get(1);
		
		//generate_body:
		//	"INLINE" ("." | "-")+ / * ? here * / | "SALT" "(" TOKEN ")" ":" ("SCOREDSEARCH" | "PROFILE");
		@Override public ParserRule getRule() { return rule; }

		//"INLINE" ("." | "-")+ / * ? here * / | "SALT" "(" TOKEN ")" ":" ("SCOREDSEARCH" | "PROFILE")
		public Alternatives getAlternatives() { return cAlternatives; }

		//"INLINE" ("." | "-")+
		public Group getGroup_0() { return cGroup_0; }

		//"INLINE"
		public Keyword getINLINEKeyword_0_0() { return cINLINEKeyword_0_0; }

		//("." | "-")+
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }

		//"."
		public Keyword getFullStopKeyword_0_1_0() { return cFullStopKeyword_0_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_0_1_1() { return cHyphenMinusKeyword_0_1_1; }

		//"SALT" "(" TOKEN ")" ":" ("SCOREDSEARCH" | "PROFILE")
		public Group getGroup_1() { return cGroup_1; }

		//"SALT"
		public Keyword getSALTKeyword_1_0() { return cSALTKeyword_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//TOKEN
		public RuleCall getTOKENTerminalRuleCall_1_2() { return cTOKENTerminalRuleCall_1_2; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }

		//":"
		public Keyword getColonKeyword_1_4() { return cColonKeyword_1_4; }

		//"SCOREDSEARCH" | "PROFILE"
		public Alternatives getAlternatives_1_5() { return cAlternatives_1_5; }

		//"SCOREDSEARCH"
		public Keyword getSCOREDSEARCHKeyword_1_5_0() { return cSCOREDSEARCHKeyword_1_5_0; }

		//"PROFILE"
		public Keyword getPROFILEKeyword_1_5_1() { return cPROFILEKeyword_1_5_1; }
	}

	public class Visual_sectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "visual_section");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVISUALIZEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cTOKENTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cVisual_section_optionsParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cVisualizationParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cENDKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//visual_section:
		//	"VISUALIZE" TOKEN visual_section_options? visualization+ "END";
		@Override public ParserRule getRule() { return rule; }

		//"VISUALIZE" TOKEN visual_section_options? visualization+ "END"
		public Group getGroup() { return cGroup; }

		//"VISUALIZE"
		public Keyword getVISUALIZEKeyword_0() { return cVISUALIZEKeyword_0; }

		//TOKEN
		public RuleCall getTOKENTerminalRuleCall_1() { return cTOKENTerminalRuleCall_1; }

		//visual_section_options?
		public RuleCall getVisual_section_optionsParserRuleCall_2() { return cVisual_section_optionsParserRuleCall_2; }

		//visualization+
		public RuleCall getVisualizationParserRuleCall_3() { return cVisualizationParserRuleCall_3; }

		//"END"
		public Keyword getENDKeyword_4() { return cENDKeyword_4; }
	}

	public class VisualizationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "visualization");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Keyword cCHOROKeyword_0_0_0 = (Keyword)cAlternatives_0_0.eContents().get(0);
		private final Keyword cLINEKeyword_0_0_1 = (Keyword)cAlternatives_0_0.eContents().get(1);
		private final Keyword cTIMELINEKeyword_0_0_2 = (Keyword)cAlternatives_0_0.eContents().get(2);
		private final Keyword cPIEKeyword_0_0_3 = (Keyword)cAlternatives_0_0.eContents().get(3);
		private final Keyword cBARKeyword_0_0_4 = (Keyword)cAlternatives_0_0.eContents().get(4);
		private final Keyword cTABLEKeyword_0_0_5 = (Keyword)cAlternatives_0_0.eContents().get(5);
		private final RuleCall cTOKENTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cVis_basisParserRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final RuleCall cVisual_optionsParserRuleCall_0_5 = (RuleCall)cGroup_0.eContents().get(5);
		private final Keyword cSemicolonKeyword_0_6 = (Keyword)cGroup_0.eContents().get(6);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cSLIDERKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cTOKENTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cVisual_optionsParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Keyword cSemicolonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//visualization:
		//	("CHORO" | "LINE" | "TIMELINE" | "PIE" | "BAR" | "TABLE") TOKEN "(" vis_basis ")" visual_options? ";" | "SLIDER" TOKEN
		//	visual_options? ";";
		@Override public ParserRule getRule() { return rule; }

		//("CHORO" | "LINE" | "TIMELINE" | "PIE" | "BAR" | "TABLE") TOKEN "(" vis_basis ")" visual_options? ";" | "SLIDER" TOKEN
		//visual_options? ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//("CHORO" | "LINE" | "TIMELINE" | "PIE" | "BAR" | "TABLE") TOKEN "(" vis_basis ")" visual_options? ";"
		public Group getGroup_0() { return cGroup_0; }

		//"CHORO" | "LINE" | "TIMELINE" | "PIE" | "BAR" | "TABLE"
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }

		//"CHORO"
		public Keyword getCHOROKeyword_0_0_0() { return cCHOROKeyword_0_0_0; }

		//"LINE"
		public Keyword getLINEKeyword_0_0_1() { return cLINEKeyword_0_0_1; }

		//"TIMELINE"
		public Keyword getTIMELINEKeyword_0_0_2() { return cTIMELINEKeyword_0_0_2; }

		//"PIE"
		public Keyword getPIEKeyword_0_0_3() { return cPIEKeyword_0_0_3; }

		//"BAR"
		public Keyword getBARKeyword_0_0_4() { return cBARKeyword_0_0_4; }

		//"TABLE"
		public Keyword getTABLEKeyword_0_0_5() { return cTABLEKeyword_0_0_5; }

		//TOKEN
		public RuleCall getTOKENTerminalRuleCall_0_1() { return cTOKENTerminalRuleCall_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_2() { return cLeftParenthesisKeyword_0_2; }

		//vis_basis
		public RuleCall getVis_basisParserRuleCall_0_3() { return cVis_basisParserRuleCall_0_3; }

		//")"
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }

		//visual_options?
		public RuleCall getVisual_optionsParserRuleCall_0_5() { return cVisual_optionsParserRuleCall_0_5; }

		//";"
		public Keyword getSemicolonKeyword_0_6() { return cSemicolonKeyword_0_6; }

		//"SLIDER" TOKEN visual_options? ";"
		public Group getGroup_1() { return cGroup_1; }

		//"SLIDER"
		public Keyword getSLIDERKeyword_1_0() { return cSLIDERKeyword_1_0; }

		//TOKEN
		public RuleCall getTOKENTerminalRuleCall_1_1() { return cTOKENTerminalRuleCall_1_1; }

		//visual_options?
		public RuleCall getVisual_optionsParserRuleCall_1_2() { return cVisual_optionsParserRuleCall_1_2; }

		//";"
		public Keyword getSemicolonKeyword_1_3() { return cSemicolonKeyword_1_3; }
	}

	public class Vis_basisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vis_basis");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTOKENTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cVis_basis_qualifiersParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//vis_basis:
		//	TOKEN vis_basis_qualifiers?;
		@Override public ParserRule getRule() { return rule; }

		//TOKEN vis_basis_qualifiers?
		public Group getGroup() { return cGroup; }

		//TOKEN
		public RuleCall getTOKENTerminalRuleCall_0() { return cTOKENTerminalRuleCall_0; }

		//vis_basis_qualifiers?
		public RuleCall getVis_basis_qualifiersParserRuleCall_1() { return cVis_basis_qualifiersParserRuleCall_1; }
	}

	public class Vis_basis_qualifiersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vis_basis_qualifiers");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cFunctionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cFunctionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//vis_basis_qualifiers:
		//	"{" function ("," function)* "}";
		@Override public ParserRule getRule() { return rule; }

		//"{" function ("," function)* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//function
		public RuleCall getFunctionParserRuleCall_1() { return cFunctionParserRuleCall_1; }

		//("," function)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//function
		public RuleCall getFunctionParserRuleCall_2_1() { return cFunctionParserRuleCall_2_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "function");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cSUMKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cTOKENTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cSCALEKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final RuleCall cTOKENTerminalRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final RuleCall cINTTerminalRuleCall_2_4 = (RuleCall)cGroup_2.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		
		//function:
		//	value | "SUM" "(" TOKEN ")" | "SCALE" "(" TOKEN "," INT ")";
		@Override public ParserRule getRule() { return rule; }

		//value | "SUM" "(" TOKEN ")" | "SCALE" "(" TOKEN "," INT ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//value
		public RuleCall getValueParserRuleCall_0() { return cValueParserRuleCall_0; }

		//"SUM" "(" TOKEN ")"
		public Group getGroup_1() { return cGroup_1; }

		//"SUM"
		public Keyword getSUMKeyword_1_0() { return cSUMKeyword_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//TOKEN
		public RuleCall getTOKENTerminalRuleCall_1_2() { return cTOKENTerminalRuleCall_1_2; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }

		//"SCALE" "(" TOKEN "," INT ")"
		public Group getGroup_2() { return cGroup_2; }

		//"SCALE"
		public Keyword getSCALEKeyword_2_0() { return cSCALEKeyword_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }

		//TOKEN
		public RuleCall getTOKENTerminalRuleCall_2_2() { return cTOKENTerminalRuleCall_2_2; }

		//","
		public Keyword getCommaKeyword_2_3() { return cCommaKeyword_2_3; }

		//INT
		public RuleCall getINTTerminalRuleCall_2_4() { return cINTTerminalRuleCall_2_4; }

		//")"
		public Keyword getRightParenthesisKeyword_2_5() { return cRightParenthesisKeyword_2_5; }
	}

	public class Visual_section_optionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "visual_section_options");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cVisual_section_optionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cVisual_section_optionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//visual_section_options:
		//	":" visual_section_option ("," visual_section_option)*;
		@Override public ParserRule getRule() { return rule; }

		//":" visual_section_option ("," visual_section_option)*
		public Group getGroup() { return cGroup; }

		//":"
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }

		//visual_section_option
		public RuleCall getVisual_section_optionParserRuleCall_1() { return cVisual_section_optionParserRuleCall_1; }

		//("," visual_section_option)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//visual_section_option
		public RuleCall getVisual_section_optionParserRuleCall_2_1() { return cVisual_section_optionParserRuleCall_2_1; }
	}

	public class Visual_section_optionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "visual_section_option");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLABELKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cValueParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//visual_section_option:
		//	"LABEL" "(" value ")";
		@Override public ParserRule getRule() { return rule; }

		//"LABEL" "(" value ")"
		public Group getGroup() { return cGroup; }

		//"LABEL"
		public Keyword getLABELKeyword_0() { return cLABELKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//value
		public RuleCall getValueParserRuleCall_2() { return cValueParserRuleCall_2; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class Visual_optionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "visual_options");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cVisual_optionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cVisual_optionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//visual_options:
		//	":" visual_option ("," visual_option)*;
		@Override public ParserRule getRule() { return rule; }

		//":" visual_option ("," visual_option)*
		public Group getGroup() { return cGroup; }

		//":"
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }

		//visual_option
		public RuleCall getVisual_optionParserRuleCall_1() { return cVisual_optionParserRuleCall_1; }

		//("," visual_option)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//visual_option
		public RuleCall getVisual_optionParserRuleCall_2_1() { return cVisual_optionParserRuleCall_2_1; }
	}

	public class Visual_optionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "visual_option");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Keyword cTITLEKeyword_0_0_0 = (Keyword)cAlternatives_0_0.eContents().get(0);
		private final Keyword cDATEKeyword_0_0_1 = (Keyword)cAlternatives_0_0.eContents().get(1);
		private final Keyword cDESCRIPTIONKeyword_0_0_2 = (Keyword)cAlternatives_0_0.eContents().get(2);
		private final Keyword cPICTUREKeyword_0_0_3 = (Keyword)cAlternatives_0_0.eContents().get(3);
		private final Keyword cSTATEKeyword_0_0_4 = (Keyword)cAlternatives_0_0.eContents().get(4);
		private final Keyword cCOUNTYKeyword_0_0_5 = (Keyword)cAlternatives_0_0.eContents().get(5);
		private final Keyword cWEIGHTKeyword_0_0_6 = (Keyword)cAlternatives_0_0.eContents().get(6);
		private final Keyword cSIZEKeyword_0_0_7 = (Keyword)cAlternatives_0_0.eContents().get(7);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cFunctionParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cVisual_multivalParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cFunctionParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cCommaKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final RuleCall cFunctionParserRuleCall_1_3_1 = (RuleCall)cGroup_1_3.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cSELECTSKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final RuleCall cTOKENTerminalRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final RuleCall cTOKENTerminalRuleCall_2_4 = (RuleCall)cGroup_2.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		
		//visual_option:
		//	("TITLE" | "DATE" | "DESCRIPTION" | "PICTURE" | "STATE" | "COUNTY" | "WEIGHT" | "SIZE") "(" function ")" |
		//	visual_multival "(" function ("," function)* ")" | "SELECTS" "(" TOKEN "->" TOKEN ")";
		@Override public ParserRule getRule() { return rule; }

		//("TITLE" | "DATE" | "DESCRIPTION" | "PICTURE" | "STATE" | "COUNTY" | "WEIGHT" | "SIZE") "(" function ")" |
		//visual_multival "(" function ("," function)* ")" | "SELECTS" "(" TOKEN "->" TOKEN ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//("TITLE" | "DATE" | "DESCRIPTION" | "PICTURE" | "STATE" | "COUNTY" | "WEIGHT" | "SIZE") "(" function ")"
		public Group getGroup_0() { return cGroup_0; }

		//"TITLE" | "DATE" | "DESCRIPTION" | "PICTURE" | "STATE" | "COUNTY" | "WEIGHT" | "SIZE"
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }

		//"TITLE"
		public Keyword getTITLEKeyword_0_0_0() { return cTITLEKeyword_0_0_0; }

		//"DATE"
		public Keyword getDATEKeyword_0_0_1() { return cDATEKeyword_0_0_1; }

		//"DESCRIPTION"
		public Keyword getDESCRIPTIONKeyword_0_0_2() { return cDESCRIPTIONKeyword_0_0_2; }

		//"PICTURE"
		public Keyword getPICTUREKeyword_0_0_3() { return cPICTUREKeyword_0_0_3; }

		//"STATE"
		public Keyword getSTATEKeyword_0_0_4() { return cSTATEKeyword_0_0_4; }

		//"COUNTY"
		public Keyword getCOUNTYKeyword_0_0_5() { return cCOUNTYKeyword_0_0_5; }

		//"WEIGHT"
		public Keyword getWEIGHTKeyword_0_0_6() { return cWEIGHTKeyword_0_0_6; }

		//"SIZE"
		public Keyword getSIZEKeyword_0_0_7() { return cSIZEKeyword_0_0_7; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }

		//function
		public RuleCall getFunctionParserRuleCall_0_2() { return cFunctionParserRuleCall_0_2; }

		//")"
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }

		//visual_multival "(" function ("," function)* ")"
		public Group getGroup_1() { return cGroup_1; }

		//visual_multival
		public RuleCall getVisual_multivalParserRuleCall_1_0() { return cVisual_multivalParserRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//function
		public RuleCall getFunctionParserRuleCall_1_2() { return cFunctionParserRuleCall_1_2; }

		//("," function)*
		public Group getGroup_1_3() { return cGroup_1_3; }

		//","
		public Keyword getCommaKeyword_1_3_0() { return cCommaKeyword_1_3_0; }

		//function
		public RuleCall getFunctionParserRuleCall_1_3_1() { return cFunctionParserRuleCall_1_3_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }

		//"SELECTS" "(" TOKEN "->" TOKEN ")"
		public Group getGroup_2() { return cGroup_2; }

		//"SELECTS"
		public Keyword getSELECTSKeyword_2_0() { return cSELECTSKeyword_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }

		//TOKEN
		public RuleCall getTOKENTerminalRuleCall_2_2() { return cTOKENTerminalRuleCall_2_2; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_2_3() { return cHyphenMinusGreaterThanSignKeyword_2_3; }

		//TOKEN
		public RuleCall getTOKENTerminalRuleCall_2_4() { return cTOKENTerminalRuleCall_2_4; }

		//")"
		public Keyword getRightParenthesisKeyword_2_5() { return cRightParenthesisKeyword_2_5; }
	}

	public class Visual_multivalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "visual_multival");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cXKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cYKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cCOLORKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cRANGEKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cFILTERKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cLABELKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cVALUEKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//visual_multival:
		//	"X" | "Y" | "COLOR" | "RANGE" | "FILTER" | "LABEL" | "VALUE";
		@Override public ParserRule getRule() { return rule; }

		//"X" | "Y" | "COLOR" | "RANGE" | "FILTER" | "LABEL" | "VALUE"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"X"
		public Keyword getXKeyword_0() { return cXKeyword_0; }

		//"Y"
		public Keyword getYKeyword_1() { return cYKeyword_1; }

		//"COLOR"
		public Keyword getCOLORKeyword_2() { return cCOLORKeyword_2; }

		//"RANGE"
		public Keyword getRANGEKeyword_3() { return cRANGEKeyword_3; }

		//"FILTER"
		public Keyword getFILTERKeyword_4() { return cFILTERKeyword_4; }

		//"LABEL"
		public Keyword getLABELKeyword_5() { return cLABELKeyword_5; }

		//"VALUE"
		public Keyword getVALUEKeyword_6() { return cVALUEKeyword_6; }
	}

	public class Custom_sectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "custom_section");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCUSTOMKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cCustom_valueParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cENDKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//custom_section:
		//	"CUSTOM" custom_value* "END";
		@Override public ParserRule getRule() { return rule; }

		//"CUSTOM" custom_value* "END"
		public Group getGroup() { return cGroup; }

		//"CUSTOM"
		public Keyword getCUSTOMKeyword_0() { return cCUSTOMKeyword_0; }

		//custom_value*
		public RuleCall getCustom_valueParserRuleCall_1() { return cCustom_valueParserRuleCall_1; }

		//"END"
		public Keyword getENDKeyword_2() { return cENDKeyword_2; }
	}

	public class Custom_valueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "custom_value");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTOKENTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cValueParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//custom_value:
		//	TOKEN value ";";
		@Override public ParserRule getRule() { return rule; }

		//TOKEN value ";"
		public Group getGroup() { return cGroup; }

		//TOKEN
		public RuleCall getTOKENTerminalRuleCall_0() { return cTOKENTerminalRuleCall_0; }

		//value
		public RuleCall getValueParserRuleCall_1() { return cValueParserRuleCall_1; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class Resource_optionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "resource_option");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cDESCRIPTIONKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cFILEKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cLABELKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Keyword c_HTML_STYLECLASSKeyword_0_3 = (Keyword)cAlternatives_0.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cValueParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//resource_option:
		//	("DESCRIPTION" | "FILE" | "LABEL" | "_HTML_STYLECLASS") "(" value ")";
		@Override public ParserRule getRule() { return rule; }

		//("DESCRIPTION" | "FILE" | "LABEL" | "_HTML_STYLECLASS") "(" value ")"
		public Group getGroup() { return cGroup; }

		//"DESCRIPTION" | "FILE" | "LABEL" | "_HTML_STYLECLASS"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"DESCRIPTION"
		public Keyword getDESCRIPTIONKeyword_0_0() { return cDESCRIPTIONKeyword_0_0; }

		//"FILE"
		public Keyword getFILEKeyword_0_1() { return cFILEKeyword_0_1; }

		//"LABEL"
		public Keyword getLABELKeyword_0_2() { return cLABELKeyword_0_2; }

		//"_HTML_STYLECLASS"
		public Keyword get_HTML_STYLECLASSKeyword_0_3() { return c_HTML_STYLECLASSKeyword_0_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//value
		public RuleCall getValueParserRuleCall_2() { return cValueParserRuleCall_2; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class Resource_optionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "resource_options");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cResource_optionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cResource_optionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//resource_options:
		//	resource_option ("," resource_option)*;
		@Override public ParserRule getRule() { return rule; }

		//resource_option ("," resource_option)*
		public Group getGroup() { return cGroup; }

		//resource_option
		public RuleCall getResource_optionParserRuleCall_0() { return cResource_optionParserRuleCall_0; }

		//("," resource_option)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//resource_option
		public RuleCall getResource_optionParserRuleCall_1_1() { return cResource_optionParserRuleCall_1_1; }
	}

	public class Resource_valueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "resource_value");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cValueParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cResource_optionsParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//resource_value:
		//	value ":" resource_options? ";";
		@Override public ParserRule getRule() { return rule; }

		//value ":" resource_options? ";"
		public Group getGroup() { return cGroup; }

		//value
		public RuleCall getValueParserRuleCall_0() { return cValueParserRuleCall_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//resource_options?
		public RuleCall getResource_optionsParserRuleCall_2() { return cResource_optionsParserRuleCall_2; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class Resource_sectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "resource_section");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRESOURCESKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cResource_valueParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cENDKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//resource_section:
		//	"RESOURCES" resource_value+ "END";
		@Override public ParserRule getRule() { return rule; }

		//"RESOURCES" resource_value+ "END"
		public Group getGroup() { return cGroup; }

		//"RESOURCES"
		public Keyword getRESOURCESKeyword_0() { return cRESOURCESKeyword_0; }

		//resource_value+
		public RuleCall getResource_valueParserRuleCall_1() { return cResource_valueParserRuleCall_1; }

		//"END"
		public Keyword getENDKeyword_2() { return cENDKeyword_2; }
	}
	
	
	private final ProgramElements pProgram;
	private final Base_propElements pBase_prop;
	private final Category_typeElements pCategory_type;
	private final Category_type_listElements pCategory_type_list;
	private final ValueElements pValue;
	private final Value_listElements pValue_list;
	private final Token_listElements pToken_list;
	private final AssignElements pAssign;
	private final Assign_listElements pAssign_list;
	private final Composition_headerElements pComposition_header;
	private final Contract_instanceElements pContract_instance;
	private final Field_declElements pField_decl;
	private final Enum_declElements pEnum_decl;
	private final Input_sectionElements pInput_section;
	private final Input_valueElements pInput_value;
	private final Input_optionsElements pInput_options;
	private final Input_optionElements pInput_option;
	private final Formfield_optionElements pFormfield_option;
	private final Inputtype_optionElements pInputtype_option;
	private final Inputtype_optionsElements pInputtype_options;
	private final Output_sectionElements pOutput_section;
	private final Outfield_declElements pOutfield_decl;
	private final Eclfield_typeElements pEclfield_type;
	private final Ecloutput_declElements pEcloutput_decl;
	private final Output_optionElements pOutput_option;
	private final Output_optionsElements pOutput_options;
	private final Output_valueElements pOutput_value;
	private final Output_baseElements pOutput_base;
	private final Generate_sectionElements pGenerate_section;
	private final Generate_bodyElements pGenerate_body;
	private final Visual_sectionElements pVisual_section;
	private final VisualizationElements pVisualization;
	private final Vis_basisElements pVis_basis;
	private final Vis_basis_qualifiersElements pVis_basis_qualifiers;
	private final FunctionElements pFunction;
	private final Visual_section_optionsElements pVisual_section_options;
	private final Visual_section_optionElements pVisual_section_option;
	private final Visual_optionsElements pVisual_options;
	private final Visual_optionElements pVisual_option;
	private final Visual_multivalElements pVisual_multival;
	private final Custom_sectionElements pCustom_section;
	private final Custom_valueElements pCustom_value;
	private final Resource_optionElements pResource_option;
	private final Resource_optionsElements pResource_options;
	private final Resource_valueElements pResource_value;
	private final Resource_sectionElements pResource_section;
	private final TerminalRule tWS;
	private final TerminalRule tINT;
	private final TerminalRule tSTRING;
	private final TerminalRule tTOKEN;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public HIPIEGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pBase_prop = new Base_propElements();
		this.pCategory_type = new Category_typeElements();
		this.pCategory_type_list = new Category_type_listElements();
		this.pValue = new ValueElements();
		this.pValue_list = new Value_listElements();
		this.pToken_list = new Token_listElements();
		this.pAssign = new AssignElements();
		this.pAssign_list = new Assign_listElements();
		this.pComposition_header = new Composition_headerElements();
		this.pContract_instance = new Contract_instanceElements();
		this.pField_decl = new Field_declElements();
		this.pEnum_decl = new Enum_declElements();
		this.pInput_section = new Input_sectionElements();
		this.pInput_value = new Input_valueElements();
		this.pInput_options = new Input_optionsElements();
		this.pInput_option = new Input_optionElements();
		this.pFormfield_option = new Formfield_optionElements();
		this.pInputtype_option = new Inputtype_optionElements();
		this.pInputtype_options = new Inputtype_optionsElements();
		this.pOutput_section = new Output_sectionElements();
		this.pOutfield_decl = new Outfield_declElements();
		this.pEclfield_type = new Eclfield_typeElements();
		this.pEcloutput_decl = new Ecloutput_declElements();
		this.pOutput_option = new Output_optionElements();
		this.pOutput_options = new Output_optionsElements();
		this.pOutput_value = new Output_valueElements();
		this.pOutput_base = new Output_baseElements();
		this.pGenerate_section = new Generate_sectionElements();
		this.pGenerate_body = new Generate_bodyElements();
		this.pVisual_section = new Visual_sectionElements();
		this.pVisualization = new VisualizationElements();
		this.pVis_basis = new Vis_basisElements();
		this.pVis_basis_qualifiers = new Vis_basis_qualifiersElements();
		this.pFunction = new FunctionElements();
		this.pVisual_section_options = new Visual_section_optionsElements();
		this.pVisual_section_option = new Visual_section_optionElements();
		this.pVisual_options = new Visual_optionsElements();
		this.pVisual_option = new Visual_optionElements();
		this.pVisual_multival = new Visual_multivalElements();
		this.pCustom_section = new Custom_sectionElements();
		this.pCustom_value = new Custom_valueElements();
		this.pResource_option = new Resource_optionElements();
		this.pResource_options = new Resource_optionsElements();
		this.pResource_value = new Resource_valueElements();
		this.pResource_section = new Resource_sectionElements();
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING");
		this.tTOKEN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TOKEN");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.hipie.HIPIE".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//program:
	//	{program} composition_header? base_prop+ contract_instance* input_section? output_section? visual_section*
	//	generate_section? custom_section? resource_section?;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	//base_prop:
	//	("NAME" | "DESCRIPTION" | "AUTHOR" | "LICENSE" | "COPYRIGHT" | "VERSION" | "LABEL" | "ID") value_list ";" | "CATEGORY"
	//	category_type_list ";";
	public Base_propElements getBase_propAccess() {
		return pBase_prop;
	}
	
	public ParserRule getBase_propRule() {
		return getBase_propAccess().getRule();
	}

	//category_type:
	//	"CLEAN" | "INPUT" | "APPEND" | "LINK" | "ANALYSIS" | "CUSTOM" | "VISUALIZE" | "OUTPUT";
	public Category_typeElements getCategory_typeAccess() {
		return pCategory_type;
	}
	
	public ParserRule getCategory_typeRule() {
		return getCategory_typeAccess().getRule();
	}

	//category_type_list:
	//	category_type ("," category_type)*;
	public Category_type_listElements getCategory_type_listAccess() {
		return pCategory_type_list;
	}
	
	public ParserRule getCategory_type_listRule() {
		return getCategory_type_listAccess().getRule();
	}

	//value:
	//	TOKEN | INT | STRING;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//value_list:
	//	value ("," value)*;
	public Value_listElements getValue_listAccess() {
		return pValue_list;
	}
	
	public ParserRule getValue_listRule() {
		return getValue_listAccess().getRule();
	}

	//token_list:
	//	TOKEN ("," TOKEN)*;
	public Token_listElements getToken_listAccess() {
		return pToken_list;
	}
	
	public ParserRule getToken_listRule() {
		return getToken_listAccess().getRule();
	}

	//assign:
	//	value "=" value_list;
	public AssignElements getAssignAccess() {
		return pAssign;
	}
	
	public ParserRule getAssignRule() {
		return getAssignAccess().getRule();
	}

	//assign_list:
	//	assign ("," assign)*;
	public Assign_listElements getAssign_listAccess() {
		return pAssign_list;
	}
	
	public ParserRule getAssign_listRule() {
		return getAssign_listAccess().getRule();
	}

	//composition_header:
	//	"HEADER" assign* "END";
	public Composition_headerElements getComposition_headerAccess() {
		return pComposition_header;
	}
	
	public ParserRule getComposition_headerRule() {
		return getComposition_headerAccess().getRule();
	}

	//contract_instance:
	//	"INSTANCE" (TOKEN ":")? value "(" value ")" assign* "END";
	public Contract_instanceElements getContract_instanceAccess() {
		return pContract_instance;
	}
	
	public ParserRule getContract_instanceRule() {
		return getContract_instanceAccess().getRule();
	}

	//field_decl:
	//	"FIELD" TOKEN input_options? ";";
	public Field_declElements getField_declAccess() {
		return pField_decl;
	}
	
	public ParserRule getField_declRule() {
		return getField_declAccess().getRule();
	}

	//enum_decl:
	//	"ENUM" "(" (value_list | assign_list) ")";
	public Enum_declElements getEnum_declAccess() {
		return pEnum_decl;
	}
	
	public ParserRule getEnum_declRule() {
		return getEnum_declAccess().getRule();
	}

	//input_section:
	//	"INPUTS" input_value+ "END";
	public Input_sectionElements getInput_sectionAccess() {
		return pInput_section;
	}
	
	public ParserRule getInput_sectionRule() {
		return getInput_sectionAccess().getRule();
	}

	//input_value:
	//	("BOOL" | "INT" | enum_decl | "STRING" | "RECORD" | "DATASET") TOKEN input_options? ";" | "DATASET" TOKEN
	//	input_options? field_decl* "END" | "GROUP" TOKEN input_options? input_value* "END";
	public Input_valueElements getInput_valueAccess() {
		return pInput_value;
	}
	
	public ParserRule getInput_valueRule() {
		return getInput_valueAccess().getRule();
	}

	//input_options:
	//	":" input_option ("," input_option)*;
	public Input_optionsElements getInput_optionsAccess() {
		return pInput_options;
	}
	
	public ParserRule getInput_optionsRule() {
		return getInput_optionsAccess().getRule();
	}

	//input_option:
	//	("OPTIONAL" | "DEFINED" | "DISABLED" | "MAPBYTYPE" | "MAPBYNAME" | "MANY") | "FORMFIELD" "(" formfield_option ")" |
	//	"ENABLE" "(" assign_list ")" | "TYPE" "(" inputtype_options ")" | ("RANGE" | "DEFAULT" | "MAXLENGTH" | "DISABLED" |
	//	"DESCRIPTION" | "NULL" | "FIELDLENGTH" | "ROWS" | "COLS" | "_HTML_STYLECLASS" | "LABEL") "(" value_list ")";
	public Input_optionElements getInput_optionAccess() {
		return pInput_option;
	}
	
	public ParserRule getInput_optionRule() {
		return getInput_optionAccess().getRule();
	}

	//formfield_option:
	//	"CHECKBOX" | "RADIO" | "SELECT" | "MULTIPLESELECT" | "TEXTAREA" | "HIDDEN" | "TEXT";
	public Formfield_optionElements getFormfield_optionAccess() {
		return pFormfield_option;
	}
	
	public ParserRule getFormfield_optionRule() {
		return getFormfield_optionAccess().getRule();
	}

	//inputtype_option:
	//	"STRING" | "UNICODE" | "UNISTR" | "INTEGER" | "DECIMAL" | "NUMERIC" | "REAL";
	public Inputtype_optionElements getInputtype_optionAccess() {
		return pInputtype_option;
	}
	
	public ParserRule getInputtype_optionRule() {
		return getInputtype_optionAccess().getRule();
	}

	//inputtype_options:
	//	inputtype_option ("," inputtype_option)*;
	public Inputtype_optionsElements getInputtype_optionsAccess() {
		return pInputtype_options;
	}
	
	public ParserRule getInputtype_optionsRule() {
		return getInputtype_optionsAccess().getRule();
	}

	//output_section:
	//	"OUTPUTS" output_value+ "END";
	public Output_sectionElements getOutput_sectionAccess() {
		return pOutput_section;
	}
	
	public ParserRule getOutput_sectionRule() {
		return getOutput_sectionAccess().getRule();
	}

	//outfield_decl:
	//	("INT" | "BOOL" | "STRING" | "FIELD") TOKEN;
	public Outfield_declElements getOutfield_declAccess() {
		return pOutfield_decl;
	}
	
	public ParserRule getOutfield_declRule() {
		return getOutfield_declAccess().getRule();
	}

	//eclfield_type:
	//	("INTEGER" | "UNSIGNED" | "STRING" | "QSTRING" | "VARSTRING" | "UNICODE" | "VARUNICODE") INT? | ("DATA" | "REAL");
	public Eclfield_typeElements getEclfield_typeAccess() {
		return pEclfield_type;
	}
	
	public ParserRule getEclfield_typeRule() {
		return getEclfield_typeAccess().getRule();
	}

	//ecloutput_decl:
	//	eclfield_type TOKEN output_options? ";";
	public Ecloutput_declElements getEcloutput_declAccess() {
		return pEcloutput_decl;
	}
	
	public ParserRule getEcloutput_declRule() {
		return getEcloutput_declAccess().getRule();
	}

	//output_option:
	//	("SIDE" | "LARGE" | "SMALL" | "FEW" | "WUID") | "FROM" "(" TOKEN ")" | "DESCRIPTION" "(" value ")";
	public Output_optionElements getOutput_optionAccess() {
		return pOutput_option;
	}
	
	public ParserRule getOutput_optionRule() {
		return getOutput_optionAccess().getRule();
	}

	//output_options:
	//	":" output_option ("," output_option)*;
	public Output_optionsElements getOutput_optionsAccess() {
		return pOutput_options;
	}
	
	public ParserRule getOutput_optionsRule() {
		return getOutput_optionsAccess().getRule();
	}

	//output_value:
	//	("BOOL" | "INT" | "STRING" | "ACTION")? value output_options? ";" | "DATASET" TOKEN output_base? output_options?
	//	ecloutput_decl* "END" | "DATASET" TOKEN output_base? output_options? ";";
	public Output_valueElements getOutput_valueAccess() {
		return pOutput_value;
	}
	
	public ParserRule getOutput_valueRule() {
		return getOutput_valueAccess().getRule();
	}

	//output_base:
	//	"(" TOKEN ")";
	public Output_baseElements getOutput_baseAccess() {
		return pOutput_base;
	}
	
	public ParserRule getOutput_baseRule() {
		return getOutput_baseAccess().getRule();
	}

	//generate_section:
	//	"GENERATES" generate_body "ENDGENERATES";
	public Generate_sectionElements getGenerate_sectionAccess() {
		return pGenerate_section;
	}
	
	public ParserRule getGenerate_sectionRule() {
		return getGenerate_sectionAccess().getRule();
	}

	//generate_body:
	//	"INLINE" ("." | "-")+ / * ? here * / | "SALT" "(" TOKEN ")" ":" ("SCOREDSEARCH" | "PROFILE");
	public Generate_bodyElements getGenerate_bodyAccess() {
		return pGenerate_body;
	}
	
	public ParserRule getGenerate_bodyRule() {
		return getGenerate_bodyAccess().getRule();
	}

	//visual_section:
	//	"VISUALIZE" TOKEN visual_section_options? visualization+ "END";
	public Visual_sectionElements getVisual_sectionAccess() {
		return pVisual_section;
	}
	
	public ParserRule getVisual_sectionRule() {
		return getVisual_sectionAccess().getRule();
	}

	//visualization:
	//	("CHORO" | "LINE" | "TIMELINE" | "PIE" | "BAR" | "TABLE") TOKEN "(" vis_basis ")" visual_options? ";" | "SLIDER" TOKEN
	//	visual_options? ";";
	public VisualizationElements getVisualizationAccess() {
		return pVisualization;
	}
	
	public ParserRule getVisualizationRule() {
		return getVisualizationAccess().getRule();
	}

	//vis_basis:
	//	TOKEN vis_basis_qualifiers?;
	public Vis_basisElements getVis_basisAccess() {
		return pVis_basis;
	}
	
	public ParserRule getVis_basisRule() {
		return getVis_basisAccess().getRule();
	}

	//vis_basis_qualifiers:
	//	"{" function ("," function)* "}";
	public Vis_basis_qualifiersElements getVis_basis_qualifiersAccess() {
		return pVis_basis_qualifiers;
	}
	
	public ParserRule getVis_basis_qualifiersRule() {
		return getVis_basis_qualifiersAccess().getRule();
	}

	//function:
	//	value | "SUM" "(" TOKEN ")" | "SCALE" "(" TOKEN "," INT ")";
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}

	//visual_section_options:
	//	":" visual_section_option ("," visual_section_option)*;
	public Visual_section_optionsElements getVisual_section_optionsAccess() {
		return pVisual_section_options;
	}
	
	public ParserRule getVisual_section_optionsRule() {
		return getVisual_section_optionsAccess().getRule();
	}

	//visual_section_option:
	//	"LABEL" "(" value ")";
	public Visual_section_optionElements getVisual_section_optionAccess() {
		return pVisual_section_option;
	}
	
	public ParserRule getVisual_section_optionRule() {
		return getVisual_section_optionAccess().getRule();
	}

	//visual_options:
	//	":" visual_option ("," visual_option)*;
	public Visual_optionsElements getVisual_optionsAccess() {
		return pVisual_options;
	}
	
	public ParserRule getVisual_optionsRule() {
		return getVisual_optionsAccess().getRule();
	}

	//visual_option:
	//	("TITLE" | "DATE" | "DESCRIPTION" | "PICTURE" | "STATE" | "COUNTY" | "WEIGHT" | "SIZE") "(" function ")" |
	//	visual_multival "(" function ("," function)* ")" | "SELECTS" "(" TOKEN "->" TOKEN ")";
	public Visual_optionElements getVisual_optionAccess() {
		return pVisual_option;
	}
	
	public ParserRule getVisual_optionRule() {
		return getVisual_optionAccess().getRule();
	}

	//visual_multival:
	//	"X" | "Y" | "COLOR" | "RANGE" | "FILTER" | "LABEL" | "VALUE";
	public Visual_multivalElements getVisual_multivalAccess() {
		return pVisual_multival;
	}
	
	public ParserRule getVisual_multivalRule() {
		return getVisual_multivalAccess().getRule();
	}

	//custom_section:
	//	"CUSTOM" custom_value* "END";
	public Custom_sectionElements getCustom_sectionAccess() {
		return pCustom_section;
	}
	
	public ParserRule getCustom_sectionRule() {
		return getCustom_sectionAccess().getRule();
	}

	//custom_value:
	//	TOKEN value ";";
	public Custom_valueElements getCustom_valueAccess() {
		return pCustom_value;
	}
	
	public ParserRule getCustom_valueRule() {
		return getCustom_valueAccess().getRule();
	}

	//resource_option:
	//	("DESCRIPTION" | "FILE" | "LABEL" | "_HTML_STYLECLASS") "(" value ")";
	public Resource_optionElements getResource_optionAccess() {
		return pResource_option;
	}
	
	public ParserRule getResource_optionRule() {
		return getResource_optionAccess().getRule();
	}

	//resource_options:
	//	resource_option ("," resource_option)*;
	public Resource_optionsElements getResource_optionsAccess() {
		return pResource_options;
	}
	
	public ParserRule getResource_optionsRule() {
		return getResource_optionsAccess().getRule();
	}

	//resource_value:
	//	value ":" resource_options? ";";
	public Resource_valueElements getResource_valueAccess() {
		return pResource_value;
	}
	
	public ParserRule getResource_valueRule() {
		return getResource_valueAccess().getRule();
	}

	//resource_section:
	//	"RESOURCES" resource_value+ "END";
	public Resource_sectionElements getResource_sectionAccess() {
		return pResource_section;
	}
	
	public ParserRule getResource_sectionRule() {
		return getResource_sectionAccess().getRule();
	}

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return tWS;
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return tINT;
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	} 

	//terminal TOKEN:
	//	!("\r" | "\n" | "\t" | " " | ";" | "(" | ")" | "," | ":" | "=" | "{" | "}" | "-")+;
	public TerminalRule getTOKENRule() {
		return tTOKEN;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
