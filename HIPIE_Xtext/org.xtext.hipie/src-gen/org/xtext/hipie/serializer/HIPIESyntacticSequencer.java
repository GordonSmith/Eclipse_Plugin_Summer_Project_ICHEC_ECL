/*
 * generated by Xtext
 */
package org.xtext.hipie.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.hipie.services.HIPIEGrammarAccess;

@SuppressWarnings("all")
public class HIPIESyntacticSequencer extends AbstractSyntacticSequencer {

	protected HIPIEGrammarAccess grammarAccess;
	protected AbstractElementAlias match_program_Base_propParserRuleCall_2_p;
	protected AbstractElementAlias match_program_Composition_headerParserRuleCall_1_q;
	protected AbstractElementAlias match_program_Contract_instanceParserRuleCall_3_a;
	protected AbstractElementAlias match_program_Custom_sectionParserRuleCall_8_q;
	protected AbstractElementAlias match_program_Generate_sectionParserRuleCall_7_q;
	protected AbstractElementAlias match_program_Input_sectionParserRuleCall_4_q;
	protected AbstractElementAlias match_program_Output_sectionParserRuleCall_5_q;
	protected AbstractElementAlias match_program_Resource_sectionParserRuleCall_9_q;
	protected AbstractElementAlias match_program_Visual_sectionParserRuleCall_6_a;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (HIPIEGrammarAccess) access;
		match_program_Base_propParserRuleCall_2_p = new TokenAlias(true, false, grammarAccess.getProgramAccess().getBase_propParserRuleCall_2());
		match_program_Composition_headerParserRuleCall_1_q = new TokenAlias(false, true, grammarAccess.getProgramAccess().getComposition_headerParserRuleCall_1());
		match_program_Contract_instanceParserRuleCall_3_a = new TokenAlias(true, true, grammarAccess.getProgramAccess().getContract_instanceParserRuleCall_3());
		match_program_Custom_sectionParserRuleCall_8_q = new TokenAlias(false, true, grammarAccess.getProgramAccess().getCustom_sectionParserRuleCall_8());
		match_program_Generate_sectionParserRuleCall_7_q = new TokenAlias(false, true, grammarAccess.getProgramAccess().getGenerate_sectionParserRuleCall_7());
		match_program_Input_sectionParserRuleCall_4_q = new TokenAlias(false, true, grammarAccess.getProgramAccess().getInput_sectionParserRuleCall_4());
		match_program_Output_sectionParserRuleCall_5_q = new TokenAlias(false, true, grammarAccess.getProgramAccess().getOutput_sectionParserRuleCall_5());
		match_program_Resource_sectionParserRuleCall_9_q = new TokenAlias(false, true, grammarAccess.getProgramAccess().getResource_sectionParserRuleCall_9());
		match_program_Visual_sectionParserRuleCall_6_a = new TokenAlias(true, true, grammarAccess.getProgramAccess().getVisual_sectionParserRuleCall_6());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if(ruleCall.getRule() == grammarAccess.getBase_propRule())
			return getbase_propToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getComposition_headerRule())
			return getcomposition_headerToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getContract_instanceRule())
			return getcontract_instanceToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getCustom_sectionRule())
			return getcustom_sectionToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getGenerate_sectionRule())
			return getgenerate_sectionToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getInput_sectionRule())
			return getinput_sectionToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getOutput_sectionRule())
			return getoutput_sectionToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getResource_sectionRule())
			return getresource_sectionToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getVisual_sectionRule())
			return getvisual_sectionToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * base_prop: ( 'NAME' | 'DESCRIPTION' | 'AUTHOR' |  'LICENSE' | 'COPYRIGHT' | 'VERSION' | 'LABEL' | 'ID' ) value_list ';' |
	 * 				'CATEGORY' category_type_list ';';
	 */
	protected String getbase_propToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "NAME;";
	}
	
	/**
	 * composition_header:'HEADER' assign* 'END';
	 */
	protected String getcomposition_headerToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "HEADEREND";
	}
	
	/**
	 * contract_instance: 'INSTANCE' (TOKEN ':')? value '(' value ')' assign* 'END';
	 */
	protected String getcontract_instanceToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "INSTANCE()END";
	}
	
	/**
	 * custom_section: 'CUSTOM' custom_value* 'END';
	 */
	protected String getcustom_sectionToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "CUSTOMEND";
	}
	
	/**
	 * generate_section: 'GENERATES' generate_body 'ENDGENERATES';
	 */
	protected String getgenerate_sectionToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "GENERATESINLINE.ENDGENERATES";
	}
	
	/**
	 * input_section: 'INPUTS' input_value+ 'END';
	 */
	protected String getinput_sectionToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "INPUTSBOOL;END";
	}
	
	/**
	 * output_section : 'OUTPUTS' output_value+ 'END';
	 */
	protected String getoutput_sectionToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "OUTPUTS;END";
	}
	
	/**
	 * resource_section: 'RESOURCES' resource_value+ 'END';
	 */
	protected String getresource_sectionToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "RESOURCES:;END";
	}
	
	/**
	 * visual_section: 'VISUALIZE' TOKEN visual_section_options? visualization+ 'END';
	 */
	protected String getvisual_sectionToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "VISUALIZECHORO();END";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if(match_program_Base_propParserRuleCall_2_p.equals(syntax))
				emit_program_Base_propParserRuleCall_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_program_Composition_headerParserRuleCall_1_q.equals(syntax))
				emit_program_Composition_headerParserRuleCall_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_program_Contract_instanceParserRuleCall_3_a.equals(syntax))
				emit_program_Contract_instanceParserRuleCall_3_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_program_Custom_sectionParserRuleCall_8_q.equals(syntax))
				emit_program_Custom_sectionParserRuleCall_8_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_program_Generate_sectionParserRuleCall_7_q.equals(syntax))
				emit_program_Generate_sectionParserRuleCall_7_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_program_Input_sectionParserRuleCall_4_q.equals(syntax))
				emit_program_Input_sectionParserRuleCall_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_program_Output_sectionParserRuleCall_5_q.equals(syntax))
				emit_program_Output_sectionParserRuleCall_5_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_program_Resource_sectionParserRuleCall_9_q.equals(syntax))
				emit_program_Resource_sectionParserRuleCall_9_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_program_Visual_sectionParserRuleCall_6_a.equals(syntax))
				emit_program_Visual_sectionParserRuleCall_6_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     base_prop+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) composition_header? (ambiguity) contract_instance* input_section? output_section? visual_section* generate_section? custom_section? resource_section? (rule start)
	 */
	protected void emit_program_Base_propParserRuleCall_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     composition_header?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) base_prop+ contract_instance* input_section? output_section? visual_section* generate_section? custom_section? resource_section? (rule start)
	 */
	protected void emit_program_Composition_headerParserRuleCall_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     contract_instance*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) composition_header? base_prop+ (ambiguity) input_section? output_section? visual_section* generate_section? custom_section? resource_section? (rule start)
	 */
	protected void emit_program_Contract_instanceParserRuleCall_3_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     custom_section?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) composition_header? base_prop+ contract_instance* input_section? output_section? visual_section* generate_section? (ambiguity) resource_section? (rule start)
	 */
	protected void emit_program_Custom_sectionParserRuleCall_8_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     generate_section?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) composition_header? base_prop+ contract_instance* input_section? output_section? visual_section* (ambiguity) custom_section? resource_section? (rule start)
	 */
	protected void emit_program_Generate_sectionParserRuleCall_7_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     input_section?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) composition_header? base_prop+ contract_instance* (ambiguity) output_section? visual_section* generate_section? custom_section? resource_section? (rule start)
	 */
	protected void emit_program_Input_sectionParserRuleCall_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     output_section?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) composition_header? base_prop+ contract_instance* input_section? (ambiguity) visual_section* generate_section? custom_section? resource_section? (rule start)
	 */
	protected void emit_program_Output_sectionParserRuleCall_5_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     resource_section?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) composition_header? base_prop+ contract_instance* input_section? output_section? visual_section* generate_section? custom_section? (ambiguity) (rule start)
	 */
	protected void emit_program_Resource_sectionParserRuleCall_9_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     visual_section*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) composition_header? base_prop+ contract_instance* input_section? output_section? (ambiguity) generate_section? custom_section? resource_section? (rule start)
	 */
	protected void emit_program_Visual_sectionParserRuleCall_6_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
