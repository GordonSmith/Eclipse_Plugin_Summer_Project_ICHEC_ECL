/*
 * generated by Xtext
 */
grammar InternalHIPIE;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.hipie.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.hipie.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.hipie.services.HIPIEGrammarAccess;

}

@parser::members {

 	private HIPIEGrammarAccess grammarAccess;
 	
    public InternalHIPIEParser(TokenStream input, HIPIEGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "program";	
   	}
   	
   	@Override
   	protected HIPIEGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleprogram
entryRuleprogram returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	 iv_ruleprogram=ruleprogram 
	 { $current=$iv_ruleprogram.current; } 
	 EOF 
;

// Rule program
ruleprogram returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getProgramAccess().getProgramAction_0(),
            $current);
    }
)(
    { 
        newCompositeNode(grammarAccess.getProgramAccess().getComposition_headerParserRuleCall_1()); 
    }
rulecomposition_header
    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getProgramAccess().getBase_propParserRuleCall_2()); 
    }
rulebase_prop
    { 
        afterParserOrEnumRuleCall();
    }
)+(
    { 
        newCompositeNode(grammarAccess.getProgramAccess().getContract_instanceParserRuleCall_3()); 
    }
rulecontract_instance
    { 
        afterParserOrEnumRuleCall();
    }
)*(
    { 
        newCompositeNode(grammarAccess.getProgramAccess().getInput_sectionParserRuleCall_4()); 
    }
ruleinput_section
    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getProgramAccess().getOutput_sectionParserRuleCall_5()); 
    }
ruleoutput_section
    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getProgramAccess().getVisual_sectionParserRuleCall_6()); 
    }
rulevisual_section
    { 
        afterParserOrEnumRuleCall();
    }
)*(
    { 
        newCompositeNode(grammarAccess.getProgramAccess().getGenerate_sectionParserRuleCall_7()); 
    }
rulegenerate_section
    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getProgramAccess().getCustom_sectionParserRuleCall_8()); 
    }
rulecustom_section
    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getProgramAccess().getResource_sectionParserRuleCall_9()); 
    }
ruleresource_section
    { 
        afterParserOrEnumRuleCall();
    }
)?)
;





// Entry rule entryRulebase_prop
entryRulebase_prop returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBase_propRule()); } 
	 iv_rulebase_prop=rulebase_prop 
	 { $current=$iv_rulebase_prop.current.getText(); }  
	 EOF 
;

// Rule base_prop
rulebase_prop returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	kw='NAME' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBase_propAccess().getNAMEKeyword_0_0_0()); 
    }

    |
	kw='DESCRIPTION' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBase_propAccess().getDESCRIPTIONKeyword_0_0_1()); 
    }

    |
	kw='AUTHOR' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBase_propAccess().getAUTHORKeyword_0_0_2()); 
    }

    |
	kw='LICENSE' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBase_propAccess().getLICENSEKeyword_0_0_3()); 
    }

    |
	kw='COPYRIGHT' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBase_propAccess().getCOPYRIGHTKeyword_0_0_4()); 
    }

    |
	kw='VERSION' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBase_propAccess().getVERSIONKeyword_0_0_5()); 
    }

    |
	kw='LABEL' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBase_propAccess().getLABELKeyword_0_0_6()); 
    }

    |
	kw='ID' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBase_propAccess().getIDKeyword_0_0_7()); 
    }
)
    { 
        newCompositeNode(grammarAccess.getBase_propAccess().getValue_listParserRuleCall_0_1()); 
    }
    this_value_list_8=rulevalue_list    {
		$current.merge(this_value_list_8);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBase_propAccess().getSemicolonKeyword_0_2()); 
    }
)
    |(
	kw='CATEGORY' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBase_propAccess().getCATEGORYKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getBase_propAccess().getCategory_type_listParserRuleCall_1_1()); 
    }
    this_category_type_list_11=rulecategory_type_list    {
		$current.merge(this_category_type_list_11);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBase_propAccess().getSemicolonKeyword_1_2()); 
    }
))
    ;





// Entry rule entryRulecategory_type
entryRulecategory_type returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCategory_typeRule()); } 
	 iv_rulecategory_type=rulecategory_type 
	 { $current=$iv_rulecategory_type.current.getText(); }  
	 EOF 
;

// Rule category_type
rulecategory_type returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='CLEAN' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCategory_typeAccess().getCLEANKeyword_0()); 
    }

    |
	kw='INPUT' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCategory_typeAccess().getINPUTKeyword_1()); 
    }

    |
	kw='APPEND' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCategory_typeAccess().getAPPENDKeyword_2()); 
    }

    |
	kw='LINK' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCategory_typeAccess().getLINKKeyword_3()); 
    }

    |
	kw='ANALYSIS' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCategory_typeAccess().getANALYSISKeyword_4()); 
    }

    |
	kw='CUSTOM' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCategory_typeAccess().getCUSTOMKeyword_5()); 
    }

    |
	kw='VISUALIZE' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCategory_typeAccess().getVISUALIZEKeyword_6()); 
    }

    |
	kw='OUTPUT' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCategory_typeAccess().getOUTPUTKeyword_7()); 
    }
)
    ;





// Entry rule entryRulecategory_type_list
entryRulecategory_type_list returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCategory_type_listRule()); } 
	 iv_rulecategory_type_list=rulecategory_type_list 
	 { $current=$iv_rulecategory_type_list.current.getText(); }  
	 EOF 
;

// Rule category_type_list
rulecategory_type_list returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCategory_type_listAccess().getCategory_typeParserRuleCall_0()); 
    }
    this_category_type_0=rulecategory_type    {
		$current.merge(this_category_type_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCategory_type_listAccess().getCommaKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getCategory_type_listAccess().getCategory_typeParserRuleCall_1_1()); 
    }
    this_category_type_2=rulecategory_type    {
		$current.merge(this_category_type_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRulevalue
entryRulevalue returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueRule()); } 
	 iv_rulevalue=rulevalue 
	 { $current=$iv_rulevalue.current.getText(); }  
	 EOF 
;

// Rule value
rulevalue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_TOKEN_0=RULE_TOKEN    {
		$current.merge(this_TOKEN_0);
    }

    { 
    newLeafNode(this_TOKEN_0, grammarAccess.getValueAccess().getTOKENTerminalRuleCall_0()); 
    }

    |    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getValueAccess().getINTTerminalRuleCall_1()); 
    }

    |    this_STRING_2=RULE_STRING    {
		$current.merge(this_STRING_2);
    }

    { 
    newLeafNode(this_STRING_2, grammarAccess.getValueAccess().getSTRINGTerminalRuleCall_2()); 
    }
)
    ;





// Entry rule entryRulevalue_list
entryRulevalue_list returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getValue_listRule()); } 
	 iv_rulevalue_list=rulevalue_list 
	 { $current=$iv_rulevalue_list.current.getText(); }  
	 EOF 
;

// Rule value_list
rulevalue_list returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getValue_listAccess().getValueParserRuleCall_0()); 
    }
    this_value_0=rulevalue    {
		$current.merge(this_value_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getValue_listAccess().getCommaKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getValue_listAccess().getValueParserRuleCall_1_1()); 
    }
    this_value_2=rulevalue    {
		$current.merge(this_value_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;







// Entry rule entryRuleassign
entryRuleassign returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignRule()); } 
	 iv_ruleassign=ruleassign 
	 { $current=$iv_ruleassign.current.getText(); }  
	 EOF 
;

// Rule assign
ruleassign returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAssignAccess().getValueParserRuleCall_0()); 
    }
    this_value_0=rulevalue    {
		$current.merge(this_value_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignAccess().getEqualsSignKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getAssignAccess().getValue_listParserRuleCall_2()); 
    }
    this_value_list_2=rulevalue_list    {
		$current.merge(this_value_list_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleassign_list
entryRuleassign_list returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssign_listRule()); } 
	 iv_ruleassign_list=ruleassign_list 
	 { $current=$iv_ruleassign_list.current.getText(); }  
	 EOF 
;

// Rule assign_list
ruleassign_list returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAssign_listAccess().getAssignParserRuleCall_0()); 
    }
    this_assign_0=ruleassign    {
		$current.merge(this_assign_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssign_listAccess().getCommaKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getAssign_listAccess().getAssignParserRuleCall_1_1()); 
    }
    this_assign_2=ruleassign    {
		$current.merge(this_assign_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRulecomposition_header
entryRulecomposition_header returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getComposition_headerRule()); } 
	 iv_rulecomposition_header=rulecomposition_header 
	 { $current=$iv_rulecomposition_header.current.getText(); }  
	 EOF 
;

// Rule composition_header
rulecomposition_header returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='HEADER' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComposition_headerAccess().getHEADERKeyword_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getComposition_headerAccess().getAssignParserRuleCall_1()); 
    }
    this_assign_1=ruleassign    {
		$current.merge(this_assign_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
	kw='END' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComposition_headerAccess().getENDKeyword_2()); 
    }
)
    ;





// Entry rule entryRulecontract_instance
entryRulecontract_instance returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getContract_instanceRule()); } 
	 iv_rulecontract_instance=rulecontract_instance 
	 { $current=$iv_rulecontract_instance.current.getText(); }  
	 EOF 
;

// Rule contract_instance
rulecontract_instance returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='INSTANCE' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getContract_instanceAccess().getINSTANCEKeyword_0()); 
    }
(    this_TOKEN_1=RULE_TOKEN    {
		$current.merge(this_TOKEN_1);
    }

    { 
    newLeafNode(this_TOKEN_1, grammarAccess.getContract_instanceAccess().getTOKENTerminalRuleCall_1_0()); 
    }

	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getContract_instanceAccess().getColonKeyword_1_1()); 
    }
)?
    { 
        newCompositeNode(grammarAccess.getContract_instanceAccess().getValueParserRuleCall_2()); 
    }
    this_value_3=rulevalue    {
		$current.merge(this_value_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getContract_instanceAccess().getLeftParenthesisKeyword_3()); 
    }

    { 
        newCompositeNode(grammarAccess.getContract_instanceAccess().getValueParserRuleCall_4()); 
    }
    this_value_5=rulevalue    {
		$current.merge(this_value_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getContract_instanceAccess().getRightParenthesisKeyword_5()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getContract_instanceAccess().getAssignParserRuleCall_6()); 
    }
    this_assign_7=ruleassign    {
		$current.merge(this_assign_7);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
	kw='END' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getContract_instanceAccess().getENDKeyword_7()); 
    }
)
    ;





// Entry rule entryRulefield_decl
entryRulefield_decl returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getField_declRule()); } 
	 iv_rulefield_decl=rulefield_decl 
	 { $current=$iv_rulefield_decl.current.getText(); }  
	 EOF 
;

// Rule field_decl
rulefield_decl returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='FIELD' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getField_declAccess().getFIELDKeyword_0()); 
    }
    this_TOKEN_1=RULE_TOKEN    {
		$current.merge(this_TOKEN_1);
    }

    { 
    newLeafNode(this_TOKEN_1, grammarAccess.getField_declAccess().getTOKENTerminalRuleCall_1()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getField_declAccess().getInput_optionsParserRuleCall_2()); 
    }
    this_input_options_2=ruleinput_options    {
		$current.merge(this_input_options_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getField_declAccess().getSemicolonKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleenum_decl
entryRuleenum_decl returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnum_declRule()); } 
	 iv_ruleenum_decl=ruleenum_decl 
	 { $current=$iv_ruleenum_decl.current.getText(); }  
	 EOF 
;

// Rule enum_decl
ruleenum_decl returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='ENUM' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnum_declAccess().getENUMKeyword_0()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnum_declAccess().getLeftParenthesisKeyword_1()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getEnum_declAccess().getValue_listParserRuleCall_2_0()); 
    }
    this_value_list_2=rulevalue_list    {
		$current.merge(this_value_list_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getEnum_declAccess().getAssign_listParserRuleCall_2_1()); 
    }
    this_assign_list_3=ruleassign_list    {
		$current.merge(this_assign_list_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnum_declAccess().getRightParenthesisKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleinput_section
entryRuleinput_section returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getInput_sectionRule()); } 
	 iv_ruleinput_section=ruleinput_section 
	 { $current=$iv_ruleinput_section.current.getText(); }  
	 EOF 
;

// Rule input_section
ruleinput_section returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='INPUTS' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInput_sectionAccess().getINPUTSKeyword_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getInput_sectionAccess().getInput_valueParserRuleCall_1()); 
    }
    this_input_value_1=ruleinput_value    {
		$current.merge(this_input_value_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)+
	kw='END' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInput_sectionAccess().getENDKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleinput_value
entryRuleinput_value returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getInput_valueRule()); } 
	 iv_ruleinput_value=ruleinput_value 
	 { $current=$iv_ruleinput_value.current.getText(); }  
	 EOF 
;

// Rule input_value
ruleinput_value returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	kw='BOOL' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInput_valueAccess().getBOOLKeyword_0_0_0()); 
    }

    |
	kw='INT' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInput_valueAccess().getINTKeyword_0_0_1()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getInput_valueAccess().getEnum_declParserRuleCall_0_0_2()); 
    }
    this_enum_decl_2=ruleenum_decl    {
		$current.merge(this_enum_decl_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
	kw='STRING' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInput_valueAccess().getSTRINGKeyword_0_0_3()); 
    }

    |
	kw='RECORD' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInput_valueAccess().getRECORDKeyword_0_0_4()); 
    }

    |
	kw='DATASET' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInput_valueAccess().getDATASETKeyword_0_0_5()); 
    }
)    this_TOKEN_6=RULE_TOKEN    {
		$current.merge(this_TOKEN_6);
    }

    { 
    newLeafNode(this_TOKEN_6, grammarAccess.getInput_valueAccess().getTOKENTerminalRuleCall_0_1()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getInput_valueAccess().getInput_optionsParserRuleCall_0_2()); 
    }
    this_input_options_7=ruleinput_options    {
		$current.merge(this_input_options_7);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInput_valueAccess().getSemicolonKeyword_0_3()); 
    }
)
    |(
	kw='DATASET' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInput_valueAccess().getDATASETKeyword_1_0()); 
    }
    this_TOKEN_10=RULE_TOKEN    {
		$current.merge(this_TOKEN_10);
    }

    { 
    newLeafNode(this_TOKEN_10, grammarAccess.getInput_valueAccess().getTOKENTerminalRuleCall_1_1()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getInput_valueAccess().getInput_optionsParserRuleCall_1_2()); 
    }
    this_input_options_11=ruleinput_options    {
		$current.merge(this_input_options_11);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getInput_valueAccess().getField_declParserRuleCall_1_3()); 
    }
    this_field_decl_12=rulefield_decl    {
		$current.merge(this_field_decl_12);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
	kw='END' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInput_valueAccess().getENDKeyword_1_4()); 
    }
)
    |(
	kw='GROUP' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInput_valueAccess().getGROUPKeyword_2_0()); 
    }
    this_TOKEN_15=RULE_TOKEN    {
		$current.merge(this_TOKEN_15);
    }

    { 
    newLeafNode(this_TOKEN_15, grammarAccess.getInput_valueAccess().getTOKENTerminalRuleCall_2_1()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getInput_valueAccess().getInput_optionsParserRuleCall_2_2()); 
    }
    this_input_options_16=ruleinput_options    {
		$current.merge(this_input_options_16);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getInput_valueAccess().getInput_valueParserRuleCall_2_3()); 
    }
    this_input_value_17=ruleinput_value    {
		$current.merge(this_input_value_17);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
	kw='END' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInput_valueAccess().getENDKeyword_2_4()); 
    }
))
    ;





// Entry rule entryRuleinput_options
entryRuleinput_options returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getInput_optionsRule()); } 
	 iv_ruleinput_options=ruleinput_options 
	 { $current=$iv_ruleinput_options.current.getText(); }  
	 EOF 
;

// Rule input_options
ruleinput_options returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInput_optionsAccess().getColonKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getInput_optionsAccess().getInput_optionParserRuleCall_1()); 
    }
    this_input_option_1=ruleinput_option    {
		$current.merge(this_input_option_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInput_optionsAccess().getCommaKeyword_2_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getInput_optionsAccess().getInput_optionParserRuleCall_2_1()); 
    }
    this_input_option_3=ruleinput_option    {
		$current.merge(this_input_option_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleinput_option
entryRuleinput_option returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getInput_optionRule()); } 
	 iv_ruleinput_option=ruleinput_option 
	 { $current=$iv_ruleinput_option.current.getText(); }  
	 EOF 
;

// Rule input_option
ruleinput_option returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='OPTIONAL' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInput_optionAccess().getOPTIONALKeyword_0_0()); 
    }

    |
	kw='DEFINED' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInput_optionAccess().getDEFINEDKeyword_0_1()); 
    }

    |
	kw='DISABLED' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInput_optionAccess().getDISABLEDKeyword_0_2()); 
    }

    |
	kw='MAPBYTYPE' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInput_optionAccess().getMAPBYTYPEKeyword_0_3()); 
    }

    |
	kw='MAPBYNAME' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInput_optionAccess().getMAPBYNAMEKeyword_0_4()); 
    }

    |
	kw='MANY' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInput_optionAccess().getMANYKeyword_0_5()); 
    }
)
    |(
	kw='FORMFIELD' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInput_optionAccess().getFORMFIELDKeyword_1_0()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInput_optionAccess().getLeftParenthesisKeyword_1_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getInput_optionAccess().getFormfield_optionParserRuleCall_1_2()); 
    }
    this_formfield_option_8=ruleformfield_option    {
		$current.merge(this_formfield_option_8);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInput_optionAccess().getRightParenthesisKeyword_1_3()); 
    }
)
    |(
	kw='ENABLE' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInput_optionAccess().getENABLEKeyword_2_0()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInput_optionAccess().getLeftParenthesisKeyword_2_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getInput_optionAccess().getAssign_listParserRuleCall_2_2()); 
    }
    this_assign_list_12=ruleassign_list    {
		$current.merge(this_assign_list_12);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInput_optionAccess().getRightParenthesisKeyword_2_3()); 
    }
)
    |(
	kw='TYPE' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInput_optionAccess().getTYPEKeyword_3_0()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInput_optionAccess().getLeftParenthesisKeyword_3_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getInput_optionAccess().getInputtype_optionsParserRuleCall_3_2()); 
    }
    this_inputtype_options_16=ruleinputtype_options    {
		$current.merge(this_inputtype_options_16);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInput_optionAccess().getRightParenthesisKeyword_3_3()); 
    }
)
    |((
	kw='RANGE' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInput_optionAccess().getRANGEKeyword_4_0_0()); 
    }

    |
	kw='DEFAULT' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInput_optionAccess().getDEFAULTKeyword_4_0_1()); 
    }

    |
	kw='MAXLENGTH' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInput_optionAccess().getMAXLENGTHKeyword_4_0_2()); 
    }

    |
	kw='DISABLED' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInput_optionAccess().getDISABLEDKeyword_4_0_3()); 
    }

    |
	kw='DESCRIPTION' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInput_optionAccess().getDESCRIPTIONKeyword_4_0_4()); 
    }

    |
	kw='NULL' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInput_optionAccess().getNULLKeyword_4_0_5()); 
    }

    |
	kw='FIELDLENGTH' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInput_optionAccess().getFIELDLENGTHKeyword_4_0_6()); 
    }

    |
	kw='ROWS' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInput_optionAccess().getROWSKeyword_4_0_7()); 
    }

    |
	kw='COLS' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInput_optionAccess().getCOLSKeyword_4_0_8()); 
    }

    |
	kw='_HTML_STYLECLASS' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInput_optionAccess().get_HTML_STYLECLASSKeyword_4_0_9()); 
    }

    |
	kw='LABEL' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInput_optionAccess().getLABELKeyword_4_0_10()); 
    }
)
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInput_optionAccess().getLeftParenthesisKeyword_4_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getInput_optionAccess().getValue_listParserRuleCall_4_2()); 
    }
    this_value_list_30=rulevalue_list    {
		$current.merge(this_value_list_30);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInput_optionAccess().getRightParenthesisKeyword_4_3()); 
    }
))
    ;





// Entry rule entryRuleformfield_option
entryRuleformfield_option returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFormfield_optionRule()); } 
	 iv_ruleformfield_option=ruleformfield_option 
	 { $current=$iv_ruleformfield_option.current.getText(); }  
	 EOF 
;

// Rule formfield_option
ruleformfield_option returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='CHECKBOX' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFormfield_optionAccess().getCHECKBOXKeyword_0()); 
    }

    |
	kw='RADIO' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFormfield_optionAccess().getRADIOKeyword_1()); 
    }

    |
	kw='SELECT' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFormfield_optionAccess().getSELECTKeyword_2()); 
    }

    |
	kw='MULTIPLESELECT' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFormfield_optionAccess().getMULTIPLESELECTKeyword_3()); 
    }

    |
	kw='TEXTAREA' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFormfield_optionAccess().getTEXTAREAKeyword_4()); 
    }

    |
	kw='HIDDEN' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFormfield_optionAccess().getHIDDENKeyword_5()); 
    }

    |
	kw='TEXT' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFormfield_optionAccess().getTEXTKeyword_6()); 
    }
)
    ;





// Entry rule entryRuleinputtype_option
entryRuleinputtype_option returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getInputtype_optionRule()); } 
	 iv_ruleinputtype_option=ruleinputtype_option 
	 { $current=$iv_ruleinputtype_option.current.getText(); }  
	 EOF 
;

// Rule inputtype_option
ruleinputtype_option returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='STRING' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInputtype_optionAccess().getSTRINGKeyword_0()); 
    }

    |
	kw='UNICODE' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInputtype_optionAccess().getUNICODEKeyword_1()); 
    }

    |
	kw='UNISTR' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInputtype_optionAccess().getUNISTRKeyword_2()); 
    }

    |
	kw='INTEGER' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInputtype_optionAccess().getINTEGERKeyword_3()); 
    }

    |
	kw='DECIMAL' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInputtype_optionAccess().getDECIMALKeyword_4()); 
    }

    |
	kw='NUMERIC' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInputtype_optionAccess().getNUMERICKeyword_5()); 
    }

    |
	kw='REAL' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInputtype_optionAccess().getREALKeyword_6()); 
    }
)
    ;





// Entry rule entryRuleinputtype_options
entryRuleinputtype_options returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getInputtype_optionsRule()); } 
	 iv_ruleinputtype_options=ruleinputtype_options 
	 { $current=$iv_ruleinputtype_options.current.getText(); }  
	 EOF 
;

// Rule inputtype_options
ruleinputtype_options returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getInputtype_optionsAccess().getInputtype_optionParserRuleCall_0()); 
    }
    this_inputtype_option_0=ruleinputtype_option    {
		$current.merge(this_inputtype_option_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInputtype_optionsAccess().getCommaKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getInputtype_optionsAccess().getInputtype_optionParserRuleCall_1_1()); 
    }
    this_inputtype_option_2=ruleinputtype_option    {
		$current.merge(this_inputtype_option_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleoutput_section
entryRuleoutput_section returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOutput_sectionRule()); } 
	 iv_ruleoutput_section=ruleoutput_section 
	 { $current=$iv_ruleoutput_section.current.getText(); }  
	 EOF 
;

// Rule output_section
ruleoutput_section returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='OUTPUTS' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOutput_sectionAccess().getOUTPUTSKeyword_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getOutput_sectionAccess().getOutput_valueParserRuleCall_1()); 
    }
    this_output_value_1=ruleoutput_value    {
		$current.merge(this_output_value_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)+
	kw='END' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOutput_sectionAccess().getENDKeyword_2()); 
    }
)
    ;







// Entry rule entryRuleeclfield_type
entryRuleeclfield_type returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEclfield_typeRule()); } 
	 iv_ruleeclfield_type=ruleeclfield_type 
	 { $current=$iv_ruleeclfield_type.current.getText(); }  
	 EOF 
;

// Rule eclfield_type
ruleeclfield_type returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	kw='INTEGER' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEclfield_typeAccess().getINTEGERKeyword_0_0_0()); 
    }

    |
	kw='UNSIGNED' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEclfield_typeAccess().getUNSIGNEDKeyword_0_0_1()); 
    }

    |
	kw='STRING' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEclfield_typeAccess().getSTRINGKeyword_0_0_2()); 
    }

    |
	kw='QSTRING' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEclfield_typeAccess().getQSTRINGKeyword_0_0_3()); 
    }

    |
	kw='VARSTRING' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEclfield_typeAccess().getVARSTRINGKeyword_0_0_4()); 
    }

    |
	kw='UNICODE' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEclfield_typeAccess().getUNICODEKeyword_0_0_5()); 
    }

    |
	kw='VARUNICODE' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEclfield_typeAccess().getVARUNICODEKeyword_0_0_6()); 
    }
)(    this_INT_7=RULE_INT    {
		$current.merge(this_INT_7);
    }

    { 
    newLeafNode(this_INT_7, grammarAccess.getEclfield_typeAccess().getINTTerminalRuleCall_0_1()); 
    }
)?)
    |(
	kw='DATA' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEclfield_typeAccess().getDATAKeyword_1_0()); 
    }

    |
	kw='REAL' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEclfield_typeAccess().getREALKeyword_1_1()); 
    }
))
    ;





// Entry rule entryRuleecloutput_decl
entryRuleecloutput_decl returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEcloutput_declRule()); } 
	 iv_ruleecloutput_decl=ruleecloutput_decl 
	 { $current=$iv_ruleecloutput_decl.current.getText(); }  
	 EOF 
;

// Rule ecloutput_decl
ruleecloutput_decl returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getEcloutput_declAccess().getEclfield_typeParserRuleCall_0()); 
    }
    this_eclfield_type_0=ruleeclfield_type    {
		$current.merge(this_eclfield_type_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
    this_TOKEN_1=RULE_TOKEN    {
		$current.merge(this_TOKEN_1);
    }

    { 
    newLeafNode(this_TOKEN_1, grammarAccess.getEcloutput_declAccess().getTOKENTerminalRuleCall_1()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getEcloutput_declAccess().getOutput_optionsParserRuleCall_2()); 
    }
    this_output_options_2=ruleoutput_options    {
		$current.merge(this_output_options_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEcloutput_declAccess().getSemicolonKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleoutput_option
entryRuleoutput_option returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOutput_optionRule()); } 
	 iv_ruleoutput_option=ruleoutput_option 
	 { $current=$iv_ruleoutput_option.current.getText(); }  
	 EOF 
;

// Rule output_option
ruleoutput_option returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='SIDE' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOutput_optionAccess().getSIDEKeyword_0_0()); 
    }

    |
	kw='LARGE' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOutput_optionAccess().getLARGEKeyword_0_1()); 
    }

    |
	kw='SMALL' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOutput_optionAccess().getSMALLKeyword_0_2()); 
    }

    |
	kw='FEW' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOutput_optionAccess().getFEWKeyword_0_3()); 
    }

    |
	kw='WUID' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOutput_optionAccess().getWUIDKeyword_0_4()); 
    }
)
    |(
	kw='FROM' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOutput_optionAccess().getFROMKeyword_1_0()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOutput_optionAccess().getLeftParenthesisKeyword_1_1()); 
    }
    this_TOKEN_7=RULE_TOKEN    {
		$current.merge(this_TOKEN_7);
    }

    { 
    newLeafNode(this_TOKEN_7, grammarAccess.getOutput_optionAccess().getTOKENTerminalRuleCall_1_2()); 
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOutput_optionAccess().getRightParenthesisKeyword_1_3()); 
    }
)
    |(
	kw='DESCRIPTION' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOutput_optionAccess().getDESCRIPTIONKeyword_2_0()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOutput_optionAccess().getLeftParenthesisKeyword_2_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getOutput_optionAccess().getValueParserRuleCall_2_2()); 
    }
    this_value_11=rulevalue    {
		$current.merge(this_value_11);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOutput_optionAccess().getRightParenthesisKeyword_2_3()); 
    }
))
    ;





// Entry rule entryRuleoutput_options
entryRuleoutput_options returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOutput_optionsRule()); } 
	 iv_ruleoutput_options=ruleoutput_options 
	 { $current=$iv_ruleoutput_options.current.getText(); }  
	 EOF 
;

// Rule output_options
ruleoutput_options returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOutput_optionsAccess().getColonKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getOutput_optionsAccess().getOutput_optionParserRuleCall_1()); 
    }
    this_output_option_1=ruleoutput_option    {
		$current.merge(this_output_option_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOutput_optionsAccess().getCommaKeyword_2_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getOutput_optionsAccess().getOutput_optionParserRuleCall_2_1()); 
    }
    this_output_option_3=ruleoutput_option    {
		$current.merge(this_output_option_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleoutput_value
entryRuleoutput_value returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOutput_valueRule()); } 
	 iv_ruleoutput_value=ruleoutput_value 
	 { $current=$iv_ruleoutput_value.current.getText(); }  
	 EOF 
;

// Rule output_value
ruleoutput_value returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	kw='BOOL' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOutput_valueAccess().getBOOLKeyword_0_0_0()); 
    }

    |
	kw='INT' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOutput_valueAccess().getINTKeyword_0_0_1()); 
    }

    |
	kw='STRING' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOutput_valueAccess().getSTRINGKeyword_0_0_2()); 
    }

    |
	kw='ACTION' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOutput_valueAccess().getACTIONKeyword_0_0_3()); 
    }
)?
    { 
        newCompositeNode(grammarAccess.getOutput_valueAccess().getValueParserRuleCall_0_1()); 
    }
    this_value_4=rulevalue    {
		$current.merge(this_value_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getOutput_valueAccess().getOutput_optionsParserRuleCall_0_2()); 
    }
    this_output_options_5=ruleoutput_options    {
		$current.merge(this_output_options_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOutput_valueAccess().getSemicolonKeyword_0_3()); 
    }
)
    |(
	kw='DATASET' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOutput_valueAccess().getDATASETKeyword_1_0()); 
    }
    this_TOKEN_8=RULE_TOKEN    {
		$current.merge(this_TOKEN_8);
    }

    { 
    newLeafNode(this_TOKEN_8, grammarAccess.getOutput_valueAccess().getTOKENTerminalRuleCall_1_1()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getOutput_valueAccess().getOutput_baseParserRuleCall_1_2()); 
    }
    this_output_base_9=ruleoutput_base    {
		$current.merge(this_output_base_9);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getOutput_valueAccess().getOutput_optionsParserRuleCall_1_3()); 
    }
    this_output_options_10=ruleoutput_options    {
		$current.merge(this_output_options_10);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getOutput_valueAccess().getEcloutput_declParserRuleCall_1_4()); 
    }
    this_ecloutput_decl_11=ruleecloutput_decl    {
		$current.merge(this_ecloutput_decl_11);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
	kw='END' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOutput_valueAccess().getENDKeyword_1_5()); 
    }
)
    |(
	kw='DATASET' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOutput_valueAccess().getDATASETKeyword_2_0()); 
    }
    this_TOKEN_14=RULE_TOKEN    {
		$current.merge(this_TOKEN_14);
    }

    { 
    newLeafNode(this_TOKEN_14, grammarAccess.getOutput_valueAccess().getTOKENTerminalRuleCall_2_1()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getOutput_valueAccess().getOutput_baseParserRuleCall_2_2()); 
    }
    this_output_base_15=ruleoutput_base    {
		$current.merge(this_output_base_15);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getOutput_valueAccess().getOutput_optionsParserRuleCall_2_3()); 
    }
    this_output_options_16=ruleoutput_options    {
		$current.merge(this_output_options_16);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOutput_valueAccess().getSemicolonKeyword_2_4()); 
    }
))
    ;





// Entry rule entryRuleoutput_base
entryRuleoutput_base returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOutput_baseRule()); } 
	 iv_ruleoutput_base=ruleoutput_base 
	 { $current=$iv_ruleoutput_base.current.getText(); }  
	 EOF 
;

// Rule output_base
ruleoutput_base returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOutput_baseAccess().getLeftParenthesisKeyword_0()); 
    }
    this_TOKEN_1=RULE_TOKEN    {
		$current.merge(this_TOKEN_1);
    }

    { 
    newLeafNode(this_TOKEN_1, grammarAccess.getOutput_baseAccess().getTOKENTerminalRuleCall_1()); 
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOutput_baseAccess().getRightParenthesisKeyword_2()); 
    }
)
    ;





// Entry rule entryRulegenerate_section
entryRulegenerate_section returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getGenerate_sectionRule()); } 
	 iv_rulegenerate_section=rulegenerate_section 
	 { $current=$iv_rulegenerate_section.current.getText(); }  
	 EOF 
;

// Rule generate_section
rulegenerate_section returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='GENERATES' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getGenerate_sectionAccess().getGENERATESKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getGenerate_sectionAccess().getGenerate_bodyParserRuleCall_1()); 
    }
    this_generate_body_1=rulegenerate_body    {
		$current.merge(this_generate_body_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='ENDGENERATES' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getGenerate_sectionAccess().getENDGENERATESKeyword_2()); 
    }
)
    ;





// Entry rule entryRulegenerate_body
entryRulegenerate_body returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getGenerate_bodyRule()); } 
	 iv_rulegenerate_body=rulegenerate_body 
	 { $current=$iv_rulegenerate_body.current.getText(); }  
	 EOF 
;

// Rule generate_body
rulegenerate_body returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='INLINE' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getGenerate_bodyAccess().getINLINEKeyword_0_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getGenerate_bodyAccess().getFullStopKeyword_0_1_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getGenerate_bodyAccess().getHyphenMinusKeyword_0_1_1()); 
    }
)+)
    |(
	kw='SALT' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getGenerate_bodyAccess().getSALTKeyword_1_0()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getGenerate_bodyAccess().getLeftParenthesisKeyword_1_1()); 
    }
    this_TOKEN_5=RULE_TOKEN    {
		$current.merge(this_TOKEN_5);
    }

    { 
    newLeafNode(this_TOKEN_5, grammarAccess.getGenerate_bodyAccess().getTOKENTerminalRuleCall_1_2()); 
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getGenerate_bodyAccess().getRightParenthesisKeyword_1_3()); 
    }

	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getGenerate_bodyAccess().getColonKeyword_1_4()); 
    }
(
	kw='SCOREDSEARCH' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getGenerate_bodyAccess().getSCOREDSEARCHKeyword_1_5_0()); 
    }

    |
	kw='PROFILE' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getGenerate_bodyAccess().getPROFILEKeyword_1_5_1()); 
    }
)))
    ;





// Entry rule entryRulevisual_section
entryRulevisual_section returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getVisual_sectionRule()); } 
	 iv_rulevisual_section=rulevisual_section 
	 { $current=$iv_rulevisual_section.current.getText(); }  
	 EOF 
;

// Rule visual_section
rulevisual_section returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='VISUALIZE' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVisual_sectionAccess().getVISUALIZEKeyword_0()); 
    }
    this_TOKEN_1=RULE_TOKEN    {
		$current.merge(this_TOKEN_1);
    }

    { 
    newLeafNode(this_TOKEN_1, grammarAccess.getVisual_sectionAccess().getTOKENTerminalRuleCall_1()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getVisual_sectionAccess().getVisual_section_optionsParserRuleCall_2()); 
    }
    this_visual_section_options_2=rulevisual_section_options    {
		$current.merge(this_visual_section_options_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getVisual_sectionAccess().getVisualizationParserRuleCall_3()); 
    }
    this_visualization_3=rulevisualization    {
		$current.merge(this_visualization_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)+
	kw='END' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVisual_sectionAccess().getENDKeyword_4()); 
    }
)
    ;





// Entry rule entryRulevisualization
entryRulevisualization returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getVisualizationRule()); } 
	 iv_rulevisualization=rulevisualization 
	 { $current=$iv_rulevisualization.current.getText(); }  
	 EOF 
;

// Rule visualization
rulevisualization returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	kw='CHORO' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVisualizationAccess().getCHOROKeyword_0_0_0()); 
    }

    |
	kw='LINE' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVisualizationAccess().getLINEKeyword_0_0_1()); 
    }

    |
	kw='TIMELINE' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVisualizationAccess().getTIMELINEKeyword_0_0_2()); 
    }

    |
	kw='PIE' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVisualizationAccess().getPIEKeyword_0_0_3()); 
    }

    |
	kw='BAR' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVisualizationAccess().getBARKeyword_0_0_4()); 
    }

    |
	kw='TABLE' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVisualizationAccess().getTABLEKeyword_0_0_5()); 
    }
)    this_TOKEN_6=RULE_TOKEN    {
		$current.merge(this_TOKEN_6);
    }

    { 
    newLeafNode(this_TOKEN_6, grammarAccess.getVisualizationAccess().getTOKENTerminalRuleCall_0_1()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVisualizationAccess().getLeftParenthesisKeyword_0_2()); 
    }

    { 
        newCompositeNode(grammarAccess.getVisualizationAccess().getVis_basisParserRuleCall_0_3()); 
    }
    this_vis_basis_8=rulevis_basis    {
		$current.merge(this_vis_basis_8);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVisualizationAccess().getRightParenthesisKeyword_0_4()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getVisualizationAccess().getVisual_optionsParserRuleCall_0_5()); 
    }
    this_visual_options_10=rulevisual_options    {
		$current.merge(this_visual_options_10);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVisualizationAccess().getSemicolonKeyword_0_6()); 
    }
)
    |(
	kw='SLIDER' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVisualizationAccess().getSLIDERKeyword_1_0()); 
    }
    this_TOKEN_13=RULE_TOKEN    {
		$current.merge(this_TOKEN_13);
    }

    { 
    newLeafNode(this_TOKEN_13, grammarAccess.getVisualizationAccess().getTOKENTerminalRuleCall_1_1()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getVisualizationAccess().getVisual_optionsParserRuleCall_1_2()); 
    }
    this_visual_options_14=rulevisual_options    {
		$current.merge(this_visual_options_14);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVisualizationAccess().getSemicolonKeyword_1_3()); 
    }
))
    ;





// Entry rule entryRulevis_basis
entryRulevis_basis returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getVis_basisRule()); } 
	 iv_rulevis_basis=rulevis_basis 
	 { $current=$iv_rulevis_basis.current.getText(); }  
	 EOF 
;

// Rule vis_basis
rulevis_basis returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_TOKEN_0=RULE_TOKEN    {
		$current.merge(this_TOKEN_0);
    }

    { 
    newLeafNode(this_TOKEN_0, grammarAccess.getVis_basisAccess().getTOKENTerminalRuleCall_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getVis_basisAccess().getVis_basis_qualifiersParserRuleCall_1()); 
    }
    this_vis_basis_qualifiers_1=rulevis_basis_qualifiers    {
		$current.merge(this_vis_basis_qualifiers_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    ;





// Entry rule entryRulevis_basis_qualifiers
entryRulevis_basis_qualifiers returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getVis_basis_qualifiersRule()); } 
	 iv_rulevis_basis_qualifiers=rulevis_basis_qualifiers 
	 { $current=$iv_rulevis_basis_qualifiers.current.getText(); }  
	 EOF 
;

// Rule vis_basis_qualifiers
rulevis_basis_qualifiers returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVis_basis_qualifiersAccess().getLeftCurlyBracketKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getVis_basis_qualifiersAccess().getFunctionParserRuleCall_1()); 
    }
    this_function_1=rulefunction    {
		$current.merge(this_function_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVis_basis_qualifiersAccess().getCommaKeyword_2_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getVis_basis_qualifiersAccess().getFunctionParserRuleCall_2_1()); 
    }
    this_function_3=rulefunction    {
		$current.merge(this_function_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVis_basis_qualifiersAccess().getRightCurlyBracketKeyword_3()); 
    }
)
    ;





// Entry rule entryRulefunction
entryRulefunction returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionRule()); } 
	 iv_rulefunction=rulefunction 
	 { $current=$iv_rulefunction.current.getText(); }  
	 EOF 
;

// Rule function
rulefunction returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFunctionAccess().getValueParserRuleCall_0()); 
    }
    this_value_0=rulevalue    {
		$current.merge(this_value_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |(
	kw='SUM' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFunctionAccess().getSUMKeyword_1_0()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_1_1()); 
    }
    this_TOKEN_3=RULE_TOKEN    {
		$current.merge(this_TOKEN_3);
    }

    { 
    newLeafNode(this_TOKEN_3, grammarAccess.getFunctionAccess().getTOKENTerminalRuleCall_1_2()); 
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFunctionAccess().getRightParenthesisKeyword_1_3()); 
    }
)
    |(
	kw='SCALE' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFunctionAccess().getSCALEKeyword_2_0()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_2_1()); 
    }
    this_TOKEN_7=RULE_TOKEN    {
		$current.merge(this_TOKEN_7);
    }

    { 
    newLeafNode(this_TOKEN_7, grammarAccess.getFunctionAccess().getTOKENTerminalRuleCall_2_2()); 
    }

	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFunctionAccess().getCommaKeyword_2_3()); 
    }
    this_INT_9=RULE_INT    {
		$current.merge(this_INT_9);
    }

    { 
    newLeafNode(this_INT_9, grammarAccess.getFunctionAccess().getINTTerminalRuleCall_2_4()); 
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFunctionAccess().getRightParenthesisKeyword_2_5()); 
    }
))
    ;





// Entry rule entryRulevisual_section_options
entryRulevisual_section_options returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getVisual_section_optionsRule()); } 
	 iv_rulevisual_section_options=rulevisual_section_options 
	 { $current=$iv_rulevisual_section_options.current.getText(); }  
	 EOF 
;

// Rule visual_section_options
rulevisual_section_options returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVisual_section_optionsAccess().getColonKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getVisual_section_optionsAccess().getVisual_section_optionParserRuleCall_1()); 
    }
    this_visual_section_option_1=rulevisual_section_option    {
		$current.merge(this_visual_section_option_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVisual_section_optionsAccess().getCommaKeyword_2_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getVisual_section_optionsAccess().getVisual_section_optionParserRuleCall_2_1()); 
    }
    this_visual_section_option_3=rulevisual_section_option    {
		$current.merge(this_visual_section_option_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRulevisual_section_option
entryRulevisual_section_option returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getVisual_section_optionRule()); } 
	 iv_rulevisual_section_option=rulevisual_section_option 
	 { $current=$iv_rulevisual_section_option.current.getText(); }  
	 EOF 
;

// Rule visual_section_option
rulevisual_section_option returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='LABEL' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVisual_section_optionAccess().getLABELKeyword_0()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVisual_section_optionAccess().getLeftParenthesisKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getVisual_section_optionAccess().getValueParserRuleCall_2()); 
    }
    this_value_2=rulevalue    {
		$current.merge(this_value_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVisual_section_optionAccess().getRightParenthesisKeyword_3()); 
    }
)
    ;





// Entry rule entryRulevisual_options
entryRulevisual_options returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getVisual_optionsRule()); } 
	 iv_rulevisual_options=rulevisual_options 
	 { $current=$iv_rulevisual_options.current.getText(); }  
	 EOF 
;

// Rule visual_options
rulevisual_options returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVisual_optionsAccess().getColonKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getVisual_optionsAccess().getVisual_optionParserRuleCall_1()); 
    }
    this_visual_option_1=rulevisual_option    {
		$current.merge(this_visual_option_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVisual_optionsAccess().getCommaKeyword_2_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getVisual_optionsAccess().getVisual_optionParserRuleCall_2_1()); 
    }
    this_visual_option_3=rulevisual_option    {
		$current.merge(this_visual_option_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRulevisual_option
entryRulevisual_option returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getVisual_optionRule()); } 
	 iv_rulevisual_option=rulevisual_option 
	 { $current=$iv_rulevisual_option.current.getText(); }  
	 EOF 
;

// Rule visual_option
rulevisual_option returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	kw='TITLE' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVisual_optionAccess().getTITLEKeyword_0_0_0()); 
    }

    |
	kw='DATE' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVisual_optionAccess().getDATEKeyword_0_0_1()); 
    }

    |
	kw='DESCRIPTION' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVisual_optionAccess().getDESCRIPTIONKeyword_0_0_2()); 
    }

    |
	kw='PICTURE' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVisual_optionAccess().getPICTUREKeyword_0_0_3()); 
    }

    |
	kw='STATE' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVisual_optionAccess().getSTATEKeyword_0_0_4()); 
    }

    |
	kw='COUNTY' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVisual_optionAccess().getCOUNTYKeyword_0_0_5()); 
    }

    |
	kw='WEIGHT' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVisual_optionAccess().getWEIGHTKeyword_0_0_6()); 
    }

    |
	kw='SIZE' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVisual_optionAccess().getSIZEKeyword_0_0_7()); 
    }
)
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVisual_optionAccess().getLeftParenthesisKeyword_0_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getVisual_optionAccess().getFunctionParserRuleCall_0_2()); 
    }
    this_function_9=rulefunction    {
		$current.merge(this_function_9);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVisual_optionAccess().getRightParenthesisKeyword_0_3()); 
    }
)
    |(
    { 
        newCompositeNode(grammarAccess.getVisual_optionAccess().getVisual_multivalParserRuleCall_1_0()); 
    }
    this_visual_multival_11=rulevisual_multival    {
		$current.merge(this_visual_multival_11);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVisual_optionAccess().getLeftParenthesisKeyword_1_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getVisual_optionAccess().getFunctionParserRuleCall_1_2()); 
    }
    this_function_13=rulefunction    {
		$current.merge(this_function_13);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVisual_optionAccess().getCommaKeyword_1_3_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getVisual_optionAccess().getFunctionParserRuleCall_1_3_1()); 
    }
    this_function_15=rulefunction    {
		$current.merge(this_function_15);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVisual_optionAccess().getRightParenthesisKeyword_1_4()); 
    }
)
    |(
	kw='SELECTS' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVisual_optionAccess().getSELECTSKeyword_2_0()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVisual_optionAccess().getLeftParenthesisKeyword_2_1()); 
    }
    this_TOKEN_19=RULE_TOKEN    {
		$current.merge(this_TOKEN_19);
    }

    { 
    newLeafNode(this_TOKEN_19, grammarAccess.getVisual_optionAccess().getTOKENTerminalRuleCall_2_2()); 
    }

	kw='->' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVisual_optionAccess().getHyphenMinusGreaterThanSignKeyword_2_3()); 
    }
    this_TOKEN_21=RULE_TOKEN    {
		$current.merge(this_TOKEN_21);
    }

    { 
    newLeafNode(this_TOKEN_21, grammarAccess.getVisual_optionAccess().getTOKENTerminalRuleCall_2_4()); 
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVisual_optionAccess().getRightParenthesisKeyword_2_5()); 
    }
))
    ;





// Entry rule entryRulevisual_multival
entryRulevisual_multival returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getVisual_multivalRule()); } 
	 iv_rulevisual_multival=rulevisual_multival 
	 { $current=$iv_rulevisual_multival.current.getText(); }  
	 EOF 
;

// Rule visual_multival
rulevisual_multival returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='X' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVisual_multivalAccess().getXKeyword_0()); 
    }

    |
	kw='Y' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVisual_multivalAccess().getYKeyword_1()); 
    }

    |
	kw='COLOR' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVisual_multivalAccess().getCOLORKeyword_2()); 
    }

    |
	kw='RANGE' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVisual_multivalAccess().getRANGEKeyword_3()); 
    }

    |
	kw='FILTER' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVisual_multivalAccess().getFILTERKeyword_4()); 
    }

    |
	kw='LABEL' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVisual_multivalAccess().getLABELKeyword_5()); 
    }

    |
	kw='VALUE' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVisual_multivalAccess().getVALUEKeyword_6()); 
    }
)
    ;





// Entry rule entryRulecustom_section
entryRulecustom_section returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCustom_sectionRule()); } 
	 iv_rulecustom_section=rulecustom_section 
	 { $current=$iv_rulecustom_section.current.getText(); }  
	 EOF 
;

// Rule custom_section
rulecustom_section returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='CUSTOM' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCustom_sectionAccess().getCUSTOMKeyword_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getCustom_sectionAccess().getCustom_valueParserRuleCall_1()); 
    }
    this_custom_value_1=rulecustom_value    {
		$current.merge(this_custom_value_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
	kw='END' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCustom_sectionAccess().getENDKeyword_2()); 
    }
)
    ;





// Entry rule entryRulecustom_value
entryRulecustom_value returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCustom_valueRule()); } 
	 iv_rulecustom_value=rulecustom_value 
	 { $current=$iv_rulecustom_value.current.getText(); }  
	 EOF 
;

// Rule custom_value
rulecustom_value returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_TOKEN_0=RULE_TOKEN    {
		$current.merge(this_TOKEN_0);
    }

    { 
    newLeafNode(this_TOKEN_0, grammarAccess.getCustom_valueAccess().getTOKENTerminalRuleCall_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getCustom_valueAccess().getValueParserRuleCall_1()); 
    }
    this_value_1=rulevalue    {
		$current.merge(this_value_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCustom_valueAccess().getSemicolonKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleresource_option
entryRuleresource_option returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getResource_optionRule()); } 
	 iv_ruleresource_option=ruleresource_option 
	 { $current=$iv_ruleresource_option.current.getText(); }  
	 EOF 
;

// Rule resource_option
ruleresource_option returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='DESCRIPTION' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getResource_optionAccess().getDESCRIPTIONKeyword_0_0()); 
    }

    |
	kw='FILE' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getResource_optionAccess().getFILEKeyword_0_1()); 
    }

    |
	kw='LABEL' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getResource_optionAccess().getLABELKeyword_0_2()); 
    }

    |
	kw='_HTML_STYLECLASS' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getResource_optionAccess().get_HTML_STYLECLASSKeyword_0_3()); 
    }
)
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getResource_optionAccess().getLeftParenthesisKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getResource_optionAccess().getValueParserRuleCall_2()); 
    }
    this_value_5=rulevalue    {
		$current.merge(this_value_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getResource_optionAccess().getRightParenthesisKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleresource_options
entryRuleresource_options returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getResource_optionsRule()); } 
	 iv_ruleresource_options=ruleresource_options 
	 { $current=$iv_ruleresource_options.current.getText(); }  
	 EOF 
;

// Rule resource_options
ruleresource_options returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getResource_optionsAccess().getResource_optionParserRuleCall_0()); 
    }
    this_resource_option_0=ruleresource_option    {
		$current.merge(this_resource_option_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getResource_optionsAccess().getCommaKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getResource_optionsAccess().getResource_optionParserRuleCall_1_1()); 
    }
    this_resource_option_2=ruleresource_option    {
		$current.merge(this_resource_option_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleresource_value
entryRuleresource_value returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getResource_valueRule()); } 
	 iv_ruleresource_value=ruleresource_value 
	 { $current=$iv_ruleresource_value.current.getText(); }  
	 EOF 
;

// Rule resource_value
ruleresource_value returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getResource_valueAccess().getValueParserRuleCall_0()); 
    }
    this_value_0=rulevalue    {
		$current.merge(this_value_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getResource_valueAccess().getColonKeyword_1()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getResource_valueAccess().getResource_optionsParserRuleCall_2()); 
    }
    this_resource_options_2=ruleresource_options    {
		$current.merge(this_resource_options_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getResource_valueAccess().getSemicolonKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleresource_section
entryRuleresource_section returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getResource_sectionRule()); } 
	 iv_ruleresource_section=ruleresource_section 
	 { $current=$iv_ruleresource_section.current.getText(); }  
	 EOF 
;

// Rule resource_section
ruleresource_section returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='RESOURCES' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getResource_sectionAccess().getRESOURCESKeyword_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getResource_sectionAccess().getResource_valueParserRuleCall_1()); 
    }
    this_resource_value_1=ruleresource_value    {
		$current.merge(this_resource_value_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)+
	kw='END' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getResource_sectionAccess().getENDKeyword_2()); 
    }
)
    ;





RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_TOKEN : ~(('\r'|'\n'|'\t'|' '|';'|'('|')'|','|':'|'='|'{'|'}'|'-'))+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ANY_OTHER : .;


