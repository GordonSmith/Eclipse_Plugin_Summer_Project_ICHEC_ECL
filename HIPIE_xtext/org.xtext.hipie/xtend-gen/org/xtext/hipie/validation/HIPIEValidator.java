/**
 * generated by Xtext
 */
package org.xtext.hipie.validation;

import com.google.common.base.Objects;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.xbase.lib.ExclusiveRange;
import org.xtext.hipie.hIPIE.HIPIEPackage;
import org.xtext.hipie.hIPIE.base_prop;
import org.xtext.hipie.hIPIE.value;
import org.xtext.hipie.hIPIE.value_list;
import org.xtext.hipie.validation.AbstractHIPIEValidator;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class HIPIEValidator extends AbstractHIPIEValidator {
  public final static String INVALID_NAME = "Argument should be a string.";
  
  @Check
  public void checkIfBPString(final base_prop base) {
    boolean _or = false;
    boolean _or_1 = false;
    boolean _or_2 = false;
    boolean _or_3 = false;
    boolean _or_4 = false;
    String _name = base.getName();
    boolean _equals = Objects.equal(_name, "LABEL");
    if (_equals) {
      _or_4 = true;
    } else {
      String _name_1 = base.getName();
      boolean _equals_1 = Objects.equal(_name_1, "DESCRIPTION");
      _or_4 = _equals_1;
    }
    if (_or_4) {
      _or_3 = true;
    } else {
      String _name_2 = base.getName();
      boolean _equals_2 = Objects.equal(_name_2, "AUTHOR");
      _or_3 = _equals_2;
    }
    if (_or_3) {
      _or_2 = true;
    } else {
      String _name_3 = base.getName();
      boolean _equals_3 = Objects.equal(_name_3, "VERSION");
      _or_2 = _equals_3;
    }
    if (_or_2) {
      _or_1 = true;
    } else {
      String _name_4 = base.getName();
      boolean _equals_4 = Objects.equal(_name_4, "COPYRIGHT");
      _or_1 = _equals_4;
    }
    if (_or_1) {
      _or = true;
    } else {
      String _name_5 = base.getName();
      boolean _equals_5 = Objects.equal(_name_5, "LICENSE");
      _or = _equals_5;
    }
    if (_or) {
      value_list _vals = base.getVals();
      EList<value> _vals_1 = _vals.getVals();
      int _size = _vals_1.size();
      ExclusiveRange _doubleDotLessThan = new ExclusiveRange(0, _size, true);
      for (final Integer i : _doubleDotLessThan) {
        value_list _vals_2 = base.getVals();
        EList<value> _vals_3 = _vals_2.getVals();
        value _get = _vals_3.get((i).intValue());
        String _str_val = _get.getStr_val();
        boolean _equals_6 = Objects.equal(_str_val, null);
        if (_equals_6) {
          EReference _base_prop_Vals = HIPIEPackage.eINSTANCE.getbase_prop_Vals();
          this.error("Input should be a string.", _base_prop_Vals);
          return;
        }
      }
    }
    return;
  }
}
