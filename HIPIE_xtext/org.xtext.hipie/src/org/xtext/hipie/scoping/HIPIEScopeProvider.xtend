/*
 * generated by Xtext
 */
package org.xtext.hipie.scoping

import org.eclipse.xtext.scoping.IScope
import org.eclipse.emf.ecore.EReference
import org.xtext.hipie.hIPIE.OutputSection
import org.eclipse.xtext.scoping.Scopes
import org.xtext.hipie.hIPIE.OutputOptions
import org.xtext.hipie.hIPIE.VisualSection 
import org.xtext.hipie.hIPIE.InputSection
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.util.EcoreUtil
import org.xtext.hipie.hIPIE.VisBasis
import org.xtext.hipie.hIPIE.dataset
import org.xtext.hipie.hIPIE.vis_basis_qualifiers
import org.eclipse.xtext.scoping.impl.MapBasedScope
import java.util.Collection
import org.eclipse.xtext.resource.IEObjectDescription

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 *
 */
class HIPIEScopeProvider extends org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider {

    def scope_outputbase_actions(OutputSection context , EReference ref) {
    	val parent = EcoreUtil.getRootContainer(context)
    	for (i : 0..<parent.eContents.length)
    		if (parent.eContents.get(i) instanceof InputSection)
    			return getScope(parent.eContents.get(i), ref)
    }
    
    def scope_VisBasis_assigned(VisualSection context, EReference ref) {
 		val parent = EcoreUtil.getRootContainer(context)
    	for (i : 0..<parent.eContents.length)
    		if (parent.eContents.get(i) instanceof OutputSection)
    			return getScope(parent.eContents.get(i), ref)
    }

    def scope_function_vars(vis_basis_qualifiers context, EReference ref) {
 		val parent = context.eContainer
    	if (parent instanceof VisBasis)
    	{	
			val basis = parent as VisBasis
			println('jer') ;
			println(basis.assigned.out_base) ;
			println('bib') ;
			if (basis.assigned.out_base != null)
			{
				val origin = basis.assigned.out_base.actions			
				val list_1 = Scopes::scopedElementsFor(origin.eContents)
				val list_2 = Scopes::scopedElementsFor(basis.assigned.eContents)
				val list = list_1 + list_2 
				return MapBasedScope::createScope(IScope::NULLSCOPE , list)
			}
			else
			{
				return getScope(basis.assigned , ref)
			}
    	}
    }
}
