/*
 * generated by Xtext
 */
package org.xtext.hipie.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class HIPIEGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cComposition_headerAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cComposition_headerCompositionHeaderParserRuleCall_0_0 = (RuleCall)cComposition_headerAssignment_0.eContents().get(0);
		private final Assignment cBase_propsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBase_propsBasePropParserRuleCall_1_0 = (RuleCall)cBase_propsAssignment_1.eContents().get(0);
		private final Assignment cContract_instancesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContract_instancesContractInstanceParserRuleCall_2_0 = (RuleCall)cContract_instancesAssignment_2.eContents().get(0);
		private final Assignment cInput_sectionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInput_sectionInputSectionParserRuleCall_3_0 = (RuleCall)cInput_sectionAssignment_3.eContents().get(0);
		private final Assignment cOutput_sectionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOutput_sectionOutputSectionParserRuleCall_4_0 = (RuleCall)cOutput_sectionAssignment_4.eContents().get(0);
		private final Assignment cVisual_sectionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cVisual_sectionVisualSectionParserRuleCall_5_0 = (RuleCall)cVisual_sectionAssignment_5.eContents().get(0);
		private final Assignment cGenerate_sectionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cGenerate_sectionGenerateSectionParserRuleCall_6_0 = (RuleCall)cGenerate_sectionAssignment_6.eContents().get(0);
		private final Assignment cCustom_sectionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cCustom_sectionCustomSectionParserRuleCall_7_0 = (RuleCall)cCustom_sectionAssignment_7.eContents().get(0);
		private final Assignment cSesource_sectionAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cSesource_sectionResourceSectionParserRuleCall_8_0 = (RuleCall)cSesource_sectionAssignment_8.eContents().get(0);
		
		//Program:
		//	composition_header+=CompositionHeader? base_props+=BaseProp+ contract_instances+=ContractInstance*
		//	input_section+=InputSection? output_section+=OutputSection? visual_section+=VisualSection*
		//	generate_section+=GenerateSection? custom_section+=CustomSection? sesource_section+=ResourceSection?;
		@Override public ParserRule getRule() { return rule; }

		//composition_header+=CompositionHeader? base_props+=BaseProp+ contract_instances+=ContractInstance*
		//input_section+=InputSection? output_section+=OutputSection? visual_section+=VisualSection*
		//generate_section+=GenerateSection? custom_section+=CustomSection? sesource_section+=ResourceSection?
		public Group getGroup() { return cGroup; }

		//composition_header+=CompositionHeader?
		public Assignment getComposition_headerAssignment_0() { return cComposition_headerAssignment_0; }

		//CompositionHeader
		public RuleCall getComposition_headerCompositionHeaderParserRuleCall_0_0() { return cComposition_headerCompositionHeaderParserRuleCall_0_0; }

		//base_props+=BaseProp+
		public Assignment getBase_propsAssignment_1() { return cBase_propsAssignment_1; }

		//BaseProp
		public RuleCall getBase_propsBasePropParserRuleCall_1_0() { return cBase_propsBasePropParserRuleCall_1_0; }

		//contract_instances+=ContractInstance*
		public Assignment getContract_instancesAssignment_2() { return cContract_instancesAssignment_2; }

		//ContractInstance
		public RuleCall getContract_instancesContractInstanceParserRuleCall_2_0() { return cContract_instancesContractInstanceParserRuleCall_2_0; }

		//input_section+=InputSection?
		public Assignment getInput_sectionAssignment_3() { return cInput_sectionAssignment_3; }

		//InputSection
		public RuleCall getInput_sectionInputSectionParserRuleCall_3_0() { return cInput_sectionInputSectionParserRuleCall_3_0; }

		//output_section+=OutputSection?
		public Assignment getOutput_sectionAssignment_4() { return cOutput_sectionAssignment_4; }

		//OutputSection
		public RuleCall getOutput_sectionOutputSectionParserRuleCall_4_0() { return cOutput_sectionOutputSectionParserRuleCall_4_0; }

		//visual_section+=VisualSection*
		public Assignment getVisual_sectionAssignment_5() { return cVisual_sectionAssignment_5; }

		//VisualSection
		public RuleCall getVisual_sectionVisualSectionParserRuleCall_5_0() { return cVisual_sectionVisualSectionParserRuleCall_5_0; }

		//generate_section+=GenerateSection?
		public Assignment getGenerate_sectionAssignment_6() { return cGenerate_sectionAssignment_6; }

		//GenerateSection
		public RuleCall getGenerate_sectionGenerateSectionParserRuleCall_6_0() { return cGenerate_sectionGenerateSectionParserRuleCall_6_0; }

		//custom_section+=CustomSection?
		public Assignment getCustom_sectionAssignment_7() { return cCustom_sectionAssignment_7; }

		//CustomSection
		public RuleCall getCustom_sectionCustomSectionParserRuleCall_7_0() { return cCustom_sectionCustomSectionParserRuleCall_7_0; }

		//sesource_section+=ResourceSection?
		public Assignment getSesource_sectionAssignment_8() { return cSesource_sectionAssignment_8; }

		//ResourceSection
		public RuleCall getSesource_sectionResourceSectionParserRuleCall_8_0() { return cSesource_sectionResourceSectionParserRuleCall_8_0; }
	}

	public class BasePropElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BaseProp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_0_0 = (Assignment)cAlternatives_0_0.eContents().get(0);
		private final Keyword cNameNAMEKeyword_0_0_0_0 = (Keyword)cNameAssignment_0_0_0.eContents().get(0);
		private final Assignment cNameAssignment_0_0_1 = (Assignment)cAlternatives_0_0.eContents().get(1);
		private final Keyword cNameDESCRIPTIONKeyword_0_0_1_0 = (Keyword)cNameAssignment_0_0_1.eContents().get(0);
		private final Assignment cNameAssignment_0_0_2 = (Assignment)cAlternatives_0_0.eContents().get(2);
		private final Keyword cNameAUTHORKeyword_0_0_2_0 = (Keyword)cNameAssignment_0_0_2.eContents().get(0);
		private final Assignment cNameAssignment_0_0_3 = (Assignment)cAlternatives_0_0.eContents().get(3);
		private final Keyword cNameLICENSEKeyword_0_0_3_0 = (Keyword)cNameAssignment_0_0_3.eContents().get(0);
		private final Assignment cNameAssignment_0_0_4 = (Assignment)cAlternatives_0_0.eContents().get(4);
		private final Keyword cNameCOPYRIGHTKeyword_0_0_4_0 = (Keyword)cNameAssignment_0_0_4.eContents().get(0);
		private final Assignment cNameAssignment_0_0_5 = (Assignment)cAlternatives_0_0.eContents().get(5);
		private final Keyword cNameVERSIONKeyword_0_0_5_0 = (Keyword)cNameAssignment_0_0_5.eContents().get(0);
		private final Assignment cNameAssignment_0_0_6 = (Assignment)cAlternatives_0_0.eContents().get(6);
		private final Keyword cNameLABELKeyword_0_0_6_0 = (Keyword)cNameAssignment_0_0_6.eContents().get(0);
		private final Assignment cNameAssignment_0_0_7 = (Assignment)cAlternatives_0_0.eContents().get(7);
		private final Keyword cNameIDKeyword_0_0_7_0 = (Keyword)cNameAssignment_0_0_7.eContents().get(0);
		private final Assignment cVal_listAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cVal_listValueListParserRuleCall_0_1_0 = (RuleCall)cVal_listAssignment_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cNameCATEGORYKeyword_1_0_0 = (Keyword)cNameAssignment_1_0.eContents().get(0);
		private final Assignment cCat_listAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCat_listCategoryTypeListParserRuleCall_1_1_0 = (RuleCall)cCat_listAssignment_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//BaseProp:
		//	(name="NAME" | name="DESCRIPTION" | name="AUTHOR" | name="LICENSE" | name="COPYRIGHT" | name="VERSION" | name="LABEL"
		//	| name="ID") val_list=ValueList ";" | name="CATEGORY" cat_list=CategoryTypeList ";";
		@Override public ParserRule getRule() { return rule; }

		//(name="NAME" | name="DESCRIPTION" | name="AUTHOR" | name="LICENSE" | name="COPYRIGHT" | name="VERSION" | name="LABEL" |
		//name="ID") val_list=ValueList ";" | name="CATEGORY" cat_list=CategoryTypeList ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//(name="NAME" | name="DESCRIPTION" | name="AUTHOR" | name="LICENSE" | name="COPYRIGHT" | name="VERSION" | name="LABEL" |
		//name="ID") val_list=ValueList ";"
		public Group getGroup_0() { return cGroup_0; }

		//name="NAME" | name="DESCRIPTION" | name="AUTHOR" | name="LICENSE" | name="COPYRIGHT" | name="VERSION" | name="LABEL" |
		//name="ID"
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }

		//name="NAME"
		public Assignment getNameAssignment_0_0_0() { return cNameAssignment_0_0_0; }

		//"NAME"
		public Keyword getNameNAMEKeyword_0_0_0_0() { return cNameNAMEKeyword_0_0_0_0; }

		//name="DESCRIPTION"
		public Assignment getNameAssignment_0_0_1() { return cNameAssignment_0_0_1; }

		//"DESCRIPTION"
		public Keyword getNameDESCRIPTIONKeyword_0_0_1_0() { return cNameDESCRIPTIONKeyword_0_0_1_0; }

		//name="AUTHOR"
		public Assignment getNameAssignment_0_0_2() { return cNameAssignment_0_0_2; }

		//"AUTHOR"
		public Keyword getNameAUTHORKeyword_0_0_2_0() { return cNameAUTHORKeyword_0_0_2_0; }

		//name="LICENSE"
		public Assignment getNameAssignment_0_0_3() { return cNameAssignment_0_0_3; }

		//"LICENSE"
		public Keyword getNameLICENSEKeyword_0_0_3_0() { return cNameLICENSEKeyword_0_0_3_0; }

		//name="COPYRIGHT"
		public Assignment getNameAssignment_0_0_4() { return cNameAssignment_0_0_4; }

		//"COPYRIGHT"
		public Keyword getNameCOPYRIGHTKeyword_0_0_4_0() { return cNameCOPYRIGHTKeyword_0_0_4_0; }

		//name="VERSION"
		public Assignment getNameAssignment_0_0_5() { return cNameAssignment_0_0_5; }

		//"VERSION"
		public Keyword getNameVERSIONKeyword_0_0_5_0() { return cNameVERSIONKeyword_0_0_5_0; }

		//name="LABEL"
		public Assignment getNameAssignment_0_0_6() { return cNameAssignment_0_0_6; }

		//"LABEL"
		public Keyword getNameLABELKeyword_0_0_6_0() { return cNameLABELKeyword_0_0_6_0; }

		//name="ID"
		public Assignment getNameAssignment_0_0_7() { return cNameAssignment_0_0_7; }

		//"ID"
		public Keyword getNameIDKeyword_0_0_7_0() { return cNameIDKeyword_0_0_7_0; }

		//val_list=ValueList
		public Assignment getVal_listAssignment_0_1() { return cVal_listAssignment_0_1; }

		//ValueList
		public RuleCall getVal_listValueListParserRuleCall_0_1_0() { return cVal_listValueListParserRuleCall_0_1_0; }

		//";"
		public Keyword getSemicolonKeyword_0_2() { return cSemicolonKeyword_0_2; }

		//name="CATEGORY" cat_list=CategoryTypeList ";"
		public Group getGroup_1() { return cGroup_1; }

		//name="CATEGORY"
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//"CATEGORY"
		public Keyword getNameCATEGORYKeyword_1_0_0() { return cNameCATEGORYKeyword_1_0_0; }

		//cat_list=CategoryTypeList
		public Assignment getCat_listAssignment_1_1() { return cCat_listAssignment_1_1; }

		//CategoryTypeList
		public RuleCall getCat_listCategoryTypeListParserRuleCall_1_1_0() { return cCat_listCategoryTypeListParserRuleCall_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1_2() { return cSemicolonKeyword_1_2; }
	}

	public class CategoryTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CategoryType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCLEANKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cINPUTKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAPPENDKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLINKKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cANALYSISKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cCUSTOMKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cVISUALIZEKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cOUTPUTKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//CategoryType:
		//	"CLEAN" | "INPUT" | "APPEND" | "LINK" | "ANALYSIS" | "CUSTOM" | "VISUALIZE" | "OUTPUT";
		@Override public ParserRule getRule() { return rule; }

		//"CLEAN" | "INPUT" | "APPEND" | "LINK" | "ANALYSIS" | "CUSTOM" | "VISUALIZE" | "OUTPUT"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"CLEAN"
		public Keyword getCLEANKeyword_0() { return cCLEANKeyword_0; }

		//"INPUT"
		public Keyword getINPUTKeyword_1() { return cINPUTKeyword_1; }

		//"APPEND"
		public Keyword getAPPENDKeyword_2() { return cAPPENDKeyword_2; }

		//"LINK"
		public Keyword getLINKKeyword_3() { return cLINKKeyword_3; }

		//"ANALYSIS"
		public Keyword getANALYSISKeyword_4() { return cANALYSISKeyword_4; }

		//"CUSTOM"
		public Keyword getCUSTOMKeyword_5() { return cCUSTOMKeyword_5; }

		//"VISUALIZE"
		public Keyword getVISUALIZEKeyword_6() { return cVISUALIZEKeyword_6; }

		//"OUTPUT"
		public Keyword getOUTPUTKeyword_7() { return cOUTPUTKeyword_7; }
	}

	public class CategoryTypeListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CategoryTypeList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCatsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCatsCategoryTypeParserRuleCall_0_0 = (RuleCall)cCatsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cCatsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCatsCategoryTypeParserRuleCall_1_1_0 = (RuleCall)cCatsAssignment_1_1.eContents().get(0);
		
		//CategoryTypeList:
		//	cats+=CategoryType ("," cats+=CategoryType)*;
		@Override public ParserRule getRule() { return rule; }

		//cats+=CategoryType ("," cats+=CategoryType)*
		public Group getGroup() { return cGroup; }

		//cats+=CategoryType
		public Assignment getCatsAssignment_0() { return cCatsAssignment_0; }

		//CategoryType
		public RuleCall getCatsCategoryTypeParserRuleCall_0_0() { return cCatsCategoryTypeParserRuleCall_0_0; }

		//("," cats+=CategoryType)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//cats+=CategoryType
		public Assignment getCatsAssignment_1_1() { return cCatsAssignment_1_1; }

		//CategoryType
		public RuleCall getCatsCategoryTypeParserRuleCall_1_1_0() { return cCatsCategoryTypeParserRuleCall_1_1_0; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cInt_valAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cInt_valINTTerminalRuleCall_1_0 = (RuleCall)cInt_valAssignment_1.eContents().get(0);
		private final Assignment cStr_valAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cStr_valSTRINGTerminalRuleCall_2_0 = (RuleCall)cStr_valAssignment_2.eContents().get(0);
		
		//Value:
		//	name=ID | int_val=INT | str_val=STRING;
		@Override public ParserRule getRule() { return rule; }

		//name=ID | int_val=INT | str_val=STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//int_val=INT
		public Assignment getInt_valAssignment_1() { return cInt_valAssignment_1; }

		//INT
		public RuleCall getInt_valINTTerminalRuleCall_1_0() { return cInt_valINTTerminalRuleCall_1_0; }

		//str_val=STRING
		public Assignment getStr_valAssignment_2() { return cStr_valAssignment_2; }

		//STRING
		public RuleCall getStr_valSTRINGTerminalRuleCall_2_0() { return cStr_valSTRINGTerminalRuleCall_2_0; }
	}

	public class ValueListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValsValueParserRuleCall_0_0 = (RuleCall)cValsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValsValueParserRuleCall_1_1_0 = (RuleCall)cValsAssignment_1_1.eContents().get(0);
		
		//ValueList:
		//	vals+=Value ("," vals+=Value)*;
		@Override public ParserRule getRule() { return rule; }

		//vals+=Value ("," vals+=Value)*
		public Group getGroup() { return cGroup; }

		//vals+=Value
		public Assignment getValsAssignment_0() { return cValsAssignment_0; }

		//Value
		public RuleCall getValsValueParserRuleCall_0_0() { return cValsValueParserRuleCall_0_0; }

		//("," vals+=Value)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//vals+=Value
		public Assignment getValsAssignment_1_1() { return cValsAssignment_1_1; }

		//Value
		public RuleCall getValsValueParserRuleCall_1_1_0() { return cValsValueParserRuleCall_1_1_0; }
	}

	public class ID_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ID_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//ID_list:
		//	ID ("," ID)*;
		@Override public ParserRule getRule() { return rule; }

		//ID ("," ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("," ID)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class AssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValsValueListParserRuleCall_2_0 = (RuleCall)cValsAssignment_2.eContents().get(0);
		
		//Assign:
		//	name=ID "=" vals=ValueList;
		@Override public ParserRule getRule() { return rule; }

		//name=ID "=" vals=ValueList
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//vals=ValueList
		public Assignment getValsAssignment_2() { return cValsAssignment_2; }

		//ValueList
		public RuleCall getValsValueListParserRuleCall_2_0() { return cValsValueListParserRuleCall_2_0; }
	}

	public class AssignListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssignList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAssignsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAssignsAssignParserRuleCall_0_0 = (RuleCall)cAssignsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAssignsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAssignsAssignParserRuleCall_1_1_0 = (RuleCall)cAssignsAssignment_1_1.eContents().get(0);
		
		//AssignList:
		//	assigns+=Assign ("," assigns+=Assign)*;
		@Override public ParserRule getRule() { return rule; }

		//assigns+=Assign ("," assigns+=Assign)*
		public Group getGroup() { return cGroup; }

		//assigns+=Assign
		public Assignment getAssignsAssignment_0() { return cAssignsAssignment_0; }

		//Assign
		public RuleCall getAssignsAssignParserRuleCall_0_0() { return cAssignsAssignParserRuleCall_0_0; }

		//("," assigns+=Assign)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//assigns+=Assign
		public Assignment getAssignsAssignment_1_1() { return cAssignsAssignment_1_1; }

		//Assign
		public RuleCall getAssignsAssignParserRuleCall_1_1_0() { return cAssignsAssignParserRuleCall_1_1_0; }
	}

	public class CompositionHeaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompositionHeader");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameHEADERKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cAssignsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAssignsAssignParserRuleCall_1_0 = (RuleCall)cAssignsAssignment_1.eContents().get(0);
		private final Keyword cENDKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//CompositionHeader:
		//	name="HEADER" assigns+=Assign* => "END";
		@Override public ParserRule getRule() { return rule; }

		//name="HEADER" assigns+=Assign* => "END"
		public Group getGroup() { return cGroup; }

		//name="HEADER"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"HEADER"
		public Keyword getNameHEADERKeyword_0_0() { return cNameHEADERKeyword_0_0; }

		//assigns+=Assign*
		public Assignment getAssignsAssignment_1() { return cAssignsAssignment_1; }

		//Assign
		public RuleCall getAssignsAssignParserRuleCall_1_0() { return cAssignsAssignParserRuleCall_1_0; }

		//=> "END"
		public Keyword getENDKeyword_2() { return cENDKeyword_2; }
	}

	public class ContractInstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ContractInstance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSec_nameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cSec_nameINSTANCEKeyword_0_0 = (Keyword)cSec_nameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cValsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValsValueParserRuleCall_2_0 = (RuleCall)cValsAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cVarsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cVarsValueCrossReference_4_0 = (CrossReference)cVarsAssignment_4.eContents().get(0);
		private final RuleCall cVarsValueIDTerminalRuleCall_4_0_1 = (RuleCall)cVarsValueCrossReference_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cAssignsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAssignsAssignParserRuleCall_6_0 = (RuleCall)cAssignsAssignment_6.eContents().get(0);
		private final Keyword cENDKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ContractInstance:
		//	sec_name="INSTANCE" (ID ":")? vals+=Value "(" vars+=[Value] ")" assigns+=Assign* => "END";
		@Override public ParserRule getRule() { return rule; }

		//sec_name="INSTANCE" (ID ":")? vals+=Value "(" vars+=[Value] ")" assigns+=Assign* => "END"
		public Group getGroup() { return cGroup; }

		//sec_name="INSTANCE"
		public Assignment getSec_nameAssignment_0() { return cSec_nameAssignment_0; }

		//"INSTANCE"
		public Keyword getSec_nameINSTANCEKeyword_0_0() { return cSec_nameINSTANCEKeyword_0_0; }

		//(ID ":")?
		public Group getGroup_1() { return cGroup_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_0() { return cIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }

		//vals+=Value
		public Assignment getValsAssignment_2() { return cValsAssignment_2; }

		//Value
		public RuleCall getValsValueParserRuleCall_2_0() { return cValsValueParserRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//vars+=[Value]
		public Assignment getVarsAssignment_4() { return cVarsAssignment_4; }

		//[Value]
		public CrossReference getVarsValueCrossReference_4_0() { return cVarsValueCrossReference_4_0; }

		//ID
		public RuleCall getVarsValueIDTerminalRuleCall_4_0_1() { return cVarsValueIDTerminalRuleCall_4_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//assigns+=Assign*
		public Assignment getAssignsAssignment_6() { return cAssignsAssignment_6; }

		//Assign
		public RuleCall getAssignsAssignParserRuleCall_6_0() { return cAssignsAssignParserRuleCall_6_0; }

		//=> "END"
		public Keyword getENDKeyword_7() { return cENDKeyword_7; }
	}

	public class FieldDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FieldDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFIELDKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cInput_opsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInput_opsInputOptionsParserRuleCall_2_0 = (RuleCall)cInput_opsAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FieldDecl:
		//	"FIELD" name=ID input_ops=InputOptions? ";";
		@Override public ParserRule getRule() { return rule; }

		//"FIELD" name=ID input_ops=InputOptions? ";"
		public Group getGroup() { return cGroup; }

		//"FIELD"
		public Keyword getFIELDKeyword_0() { return cFIELDKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//input_ops=InputOptions?
		public Assignment getInput_opsAssignment_2() { return cInput_opsAssignment_2; }

		//InputOptions
		public RuleCall getInput_opsInputOptionsParserRuleCall_2_0() { return cInput_opsInputOptionsParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class EnumDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEnum_decAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cEnum_decENUMKeyword_0_0 = (Keyword)cEnum_decAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cValsAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cValsValueListParserRuleCall_2_0_0 = (RuleCall)cValsAssignment_2_0.eContents().get(0);
		private final Assignment cAssignsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cAssignsAssignListParserRuleCall_2_1_0 = (RuleCall)cAssignsAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//EnumDecl:
		//	enum_dec="ENUM" "(" (vals+=ValueList | assigns+=AssignList) ")";
		@Override public ParserRule getRule() { return rule; }

		//enum_dec="ENUM" "(" (vals+=ValueList | assigns+=AssignList) ")"
		public Group getGroup() { return cGroup; }

		//enum_dec="ENUM"
		public Assignment getEnum_decAssignment_0() { return cEnum_decAssignment_0; }

		//"ENUM"
		public Keyword getEnum_decENUMKeyword_0_0() { return cEnum_decENUMKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//vals+=ValueList | assigns+=AssignList
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//vals+=ValueList
		public Assignment getValsAssignment_2_0() { return cValsAssignment_2_0; }

		//ValueList
		public RuleCall getValsValueListParserRuleCall_2_0_0() { return cValsValueListParserRuleCall_2_0_0; }

		//assigns+=AssignList
		public Assignment getAssignsAssignment_2_1() { return cAssignsAssignment_2_1; }

		//AssignList
		public RuleCall getAssignsAssignListParserRuleCall_2_1_0() { return cAssignsAssignListParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class InputSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InputSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameINPUTSKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cInputsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInputsInputValueParserRuleCall_1_0 = (RuleCall)cInputsAssignment_1.eContents().get(0);
		private final Keyword cENDKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//InputSection:
		//	name="INPUTS" inputs+=InputValue+ => "END";
		@Override public ParserRule getRule() { return rule; }

		//name="INPUTS" inputs+=InputValue+ => "END"
		public Group getGroup() { return cGroup; }

		//name="INPUTS"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"INPUTS"
		public Keyword getNameINPUTSKeyword_0_0() { return cNameINPUTSKeyword_0_0; }

		//inputs+=InputValue+
		public Assignment getInputsAssignment_1() { return cInputsAssignment_1; }

		//InputValue
		public RuleCall getInputsInputValueParserRuleCall_1_0() { return cInputsInputValueParserRuleCall_1_0; }

		//=> "END"
		public Keyword getENDKeyword_2() { return cENDKeyword_2; }
	}

	public class BoolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Bool");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBOOLKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Bool:
		//	"BOOL" name=ID;
		@Override public ParserRule getRule() { return rule; }

		//"BOOL" name=ID
		public Group getGroup() { return cGroup; }

		//"BOOL"
		public Keyword getBOOLKeyword_0() { return cBOOLKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class IntVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntVar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cINTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//IntVar:
		//	"INT" name=ID;
		@Override public ParserRule getRule() { return rule; }

		//"INT" name=ID
		public Group getGroup() { return cGroup; }

		//"INT"
		public Keyword getINTKeyword_0() { return cINTKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class StringVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringVar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSTRINGKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//StringVar:
		//	"STRING" name=ID;
		@Override public ParserRule getRule() { return rule; }

		//"STRING" name=ID
		public Group getGroup() { return cGroup; }

		//"STRING"
		public Keyword getSTRINGKeyword_0() { return cSTRINGKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class RecordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Record");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRECORDKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Record:
		//	"RECORD" name=ID;
		@Override public ParserRule getRule() { return rule; }

		//"RECORD" name=ID
		public Group getGroup() { return cGroup; }

		//"RECORD"
		public Keyword getRECORDKeyword_0() { return cRECORDKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class DatasetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Dataset");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDATASETKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Dataset:
		//	"DATASET" name=ID;
		@Override public ParserRule getRule() { return rule; }

		//"DATASET" name=ID
		public Group getGroup() { return cGroup; }

		//"DATASET"
		public Keyword getDATASETKeyword_0() { return cDATASETKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class GroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Group");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGROUPKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Group:
		//	"GROUP" name=ID;
		@Override public ParserRule getRule() { return rule; }

		//"GROUP" name=ID
		public Group getGroup() { return cGroup; }

		//"GROUP"
		public Keyword getGROUPKeyword_0() { return cGROUPKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class DatatypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Datatype");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBoolParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntVarParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringVarParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRecordParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDatasetParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Datatype:
		//	Bool | IntVar | StringVar | Record | Dataset;
		@Override public ParserRule getRule() { return rule; }

		//Bool | IntVar | StringVar | Record | Dataset
		public Alternatives getAlternatives() { return cAlternatives; }

		//Bool
		public RuleCall getBoolParserRuleCall_0() { return cBoolParserRuleCall_0; }

		//IntVar
		public RuleCall getIntVarParserRuleCall_1() { return cIntVarParserRuleCall_1; }

		//StringVar
		public RuleCall getStringVarParserRuleCall_2() { return cStringVarParserRuleCall_2; }

		//Record
		public RuleCall getRecordParserRuleCall_3() { return cRecordParserRuleCall_3; }

		//Dataset
		public RuleCall getDatasetParserRuleCall_4() { return cDatasetParserRuleCall_4; }
	}

	public class InputValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InputValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final RuleCall cBoolParserRuleCall_0_0_0 = (RuleCall)cAlternatives_0_0.eContents().get(0);
		private final RuleCall cIntVarParserRuleCall_0_0_1 = (RuleCall)cAlternatives_0_0.eContents().get(1);
		private final RuleCall cStringVarParserRuleCall_0_0_2 = (RuleCall)cAlternatives_0_0.eContents().get(2);
		private final RuleCall cRecordParserRuleCall_0_0_3 = (RuleCall)cAlternatives_0_0.eContents().get(3);
		private final RuleCall cDatasetParserRuleCall_0_0_4 = (RuleCall)cAlternatives_0_0.eContents().get(4);
		private final RuleCall cEnumDeclParserRuleCall_0_0_5 = (RuleCall)cAlternatives_0_0.eContents().get(5);
		private final Assignment cInput_op_listAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cInput_op_listInputOptionsParserRuleCall_0_1_0 = (RuleCall)cInput_op_listAssignment_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cDatasetParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cInput_op_listAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cInput_op_listInputOptionsParserRuleCall_1_1_0 = (RuleCall)cInput_op_listAssignment_1_1.eContents().get(0);
		private final Assignment cFieldsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cFieldsFieldDeclParserRuleCall_1_2_0 = (RuleCall)cFieldsAssignment_1_2.eContents().get(0);
		private final Keyword cENDKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cGroupParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cInput_op_listAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInput_op_listInputOptionsParserRuleCall_2_1_0 = (RuleCall)cInput_op_listAssignment_2_1.eContents().get(0);
		private final Assignment cValsAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cValsInputValueParserRuleCall_2_2_0 = (RuleCall)cValsAssignment_2_2.eContents().get(0);
		private final Keyword cENDKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//InputValue:
		//	(Bool | IntVar | StringVar | Record | Dataset | EnumDecl) input_op_list=InputOptions? ";" | Dataset
		//	input_op_list=InputOptions? fields+=FieldDecl* => "END" | Group input_op_list=InputOptions? vals+=InputValue* =>
		//	"END";
		@Override public ParserRule getRule() { return rule; }

		//(Bool | IntVar | StringVar | Record | Dataset | EnumDecl) input_op_list=InputOptions? ";" | Dataset
		//input_op_list=InputOptions? fields+=FieldDecl* => "END" | Group input_op_list=InputOptions? vals+=InputValue* => "END"
		public Alternatives getAlternatives() { return cAlternatives; }

		//(Bool | IntVar | StringVar | Record | Dataset | EnumDecl) input_op_list=InputOptions? ";"
		public Group getGroup_0() { return cGroup_0; }

		//Bool | IntVar | StringVar | Record | Dataset | EnumDecl
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }

		//Bool
		public RuleCall getBoolParserRuleCall_0_0_0() { return cBoolParserRuleCall_0_0_0; }

		//IntVar
		public RuleCall getIntVarParserRuleCall_0_0_1() { return cIntVarParserRuleCall_0_0_1; }

		//StringVar
		public RuleCall getStringVarParserRuleCall_0_0_2() { return cStringVarParserRuleCall_0_0_2; }

		//Record
		public RuleCall getRecordParserRuleCall_0_0_3() { return cRecordParserRuleCall_0_0_3; }

		//Dataset
		public RuleCall getDatasetParserRuleCall_0_0_4() { return cDatasetParserRuleCall_0_0_4; }

		//EnumDecl
		public RuleCall getEnumDeclParserRuleCall_0_0_5() { return cEnumDeclParserRuleCall_0_0_5; }

		//input_op_list=InputOptions?
		public Assignment getInput_op_listAssignment_0_1() { return cInput_op_listAssignment_0_1; }

		//InputOptions
		public RuleCall getInput_op_listInputOptionsParserRuleCall_0_1_0() { return cInput_op_listInputOptionsParserRuleCall_0_1_0; }

		//";"
		public Keyword getSemicolonKeyword_0_2() { return cSemicolonKeyword_0_2; }

		//Dataset input_op_list=InputOptions? fields+=FieldDecl* => "END"
		public Group getGroup_1() { return cGroup_1; }

		//Dataset
		public RuleCall getDatasetParserRuleCall_1_0() { return cDatasetParserRuleCall_1_0; }

		//input_op_list=InputOptions?
		public Assignment getInput_op_listAssignment_1_1() { return cInput_op_listAssignment_1_1; }

		//InputOptions
		public RuleCall getInput_op_listInputOptionsParserRuleCall_1_1_0() { return cInput_op_listInputOptionsParserRuleCall_1_1_0; }

		//fields+=FieldDecl*
		public Assignment getFieldsAssignment_1_2() { return cFieldsAssignment_1_2; }

		//FieldDecl
		public RuleCall getFieldsFieldDeclParserRuleCall_1_2_0() { return cFieldsFieldDeclParserRuleCall_1_2_0; }

		//=> "END"
		public Keyword getENDKeyword_1_3() { return cENDKeyword_1_3; }

		//Group input_op_list=InputOptions? vals+=InputValue* => "END"
		public Group getGroup_2() { return cGroup_2; }

		//Group
		public RuleCall getGroupParserRuleCall_2_0() { return cGroupParserRuleCall_2_0; }

		//input_op_list=InputOptions?
		public Assignment getInput_op_listAssignment_2_1() { return cInput_op_listAssignment_2_1; }

		//InputOptions
		public RuleCall getInput_op_listInputOptionsParserRuleCall_2_1_0() { return cInput_op_listInputOptionsParserRuleCall_2_1_0; }

		//vals+=InputValue*
		public Assignment getValsAssignment_2_2() { return cValsAssignment_2_2; }

		//InputValue
		public RuleCall getValsInputValueParserRuleCall_2_2_0() { return cValsInputValueParserRuleCall_2_2_0; }

		//=> "END"
		public Keyword getENDKeyword_2_3() { return cENDKeyword_2_3; }
	}

	public class InputOptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InputOptions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInput_opsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInput_opsInputOptionParserRuleCall_1_0 = (RuleCall)cInput_opsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInput_opsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInput_opsInputOptionParserRuleCall_2_1_0 = (RuleCall)cInput_opsAssignment_2_1.eContents().get(0);
		
		//InputOptions:
		//	":" input_ops+=InputOption ("," input_ops+=InputOption)*;
		@Override public ParserRule getRule() { return rule; }

		//":" input_ops+=InputOption ("," input_ops+=InputOption)*
		public Group getGroup() { return cGroup; }

		//":"
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }

		//input_ops+=InputOption
		public Assignment getInput_opsAssignment_1() { return cInput_opsAssignment_1; }

		//InputOption
		public RuleCall getInput_opsInputOptionParserRuleCall_1_0() { return cInput_opsInputOptionParserRuleCall_1_0; }

		//("," input_ops+=InputOption)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//input_ops+=InputOption
		public Assignment getInput_opsAssignment_2_1() { return cInput_opsAssignment_2_1; }

		//InputOption
		public RuleCall getInput_opsInputOptionParserRuleCall_2_1_0() { return cInput_opsInputOptionParserRuleCall_2_1_0; }
	}

	public class InputOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InputOption");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cNameOPTIONALKeyword_0_0_0 = (Keyword)cNameAssignment_0_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cNameDEFINEDKeyword_0_1_0 = (Keyword)cNameAssignment_0_1.eContents().get(0);
		private final Assignment cNameAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final Keyword cNameDISABLEDKeyword_0_2_0 = (Keyword)cNameAssignment_0_2.eContents().get(0);
		private final Assignment cNameAssignment_0_3 = (Assignment)cAlternatives_0.eContents().get(3);
		private final Keyword cNameMAPBYTYPEKeyword_0_3_0 = (Keyword)cNameAssignment_0_3.eContents().get(0);
		private final Assignment cNameAssignment_0_4 = (Assignment)cAlternatives_0.eContents().get(4);
		private final Keyword cNameMAPBYNAMEKeyword_0_4_0 = (Keyword)cNameAssignment_0_4.eContents().get(0);
		private final Assignment cNameAssignment_0_5 = (Assignment)cAlternatives_0.eContents().get(5);
		private final Keyword cNameMANYKeyword_0_5_0 = (Keyword)cNameAssignment_0_5.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cNameFORMFIELDKeyword_1_0_0 = (Keyword)cNameAssignment_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cFormfieldOptionParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cNameAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cNameENABLEKeyword_2_0_0 = (Keyword)cNameAssignment_2_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cAssigns_listAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cAssigns_listAssignListParserRuleCall_2_2_0 = (RuleCall)cAssigns_listAssignment_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cNameAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cNameTYPEKeyword_3_0_0 = (Keyword)cNameAssignment_3_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final RuleCall cInputtypeOptionsParserRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Assignment cNameAssignment_4_0_0 = (Assignment)cAlternatives_4_0.eContents().get(0);
		private final Keyword cNameRANGEKeyword_4_0_0_0 = (Keyword)cNameAssignment_4_0_0.eContents().get(0);
		private final Assignment cNameAssignment_4_0_1 = (Assignment)cAlternatives_4_0.eContents().get(1);
		private final Keyword cNameDEFAULTKeyword_4_0_1_0 = (Keyword)cNameAssignment_4_0_1.eContents().get(0);
		private final Assignment cNameAssignment_4_0_2 = (Assignment)cAlternatives_4_0.eContents().get(2);
		private final Keyword cNameMAXLENGTHKeyword_4_0_2_0 = (Keyword)cNameAssignment_4_0_2.eContents().get(0);
		private final Assignment cNameAssignment_4_0_3 = (Assignment)cAlternatives_4_0.eContents().get(3);
		private final Keyword cNameDISABLEDKeyword_4_0_3_0 = (Keyword)cNameAssignment_4_0_3.eContents().get(0);
		private final Assignment cNameAssignment_4_0_4 = (Assignment)cAlternatives_4_0.eContents().get(4);
		private final Keyword cNameDESCRIPTIONKeyword_4_0_4_0 = (Keyword)cNameAssignment_4_0_4.eContents().get(0);
		private final Assignment cNameAssignment_4_0_5 = (Assignment)cAlternatives_4_0.eContents().get(5);
		private final Keyword cNameNULLKeyword_4_0_5_0 = (Keyword)cNameAssignment_4_0_5.eContents().get(0);
		private final Assignment cNameAssignment_4_0_6 = (Assignment)cAlternatives_4_0.eContents().get(6);
		private final Keyword cNameFIELDLENGTHKeyword_4_0_6_0 = (Keyword)cNameAssignment_4_0_6.eContents().get(0);
		private final Assignment cNameAssignment_4_0_7 = (Assignment)cAlternatives_4_0.eContents().get(7);
		private final Keyword cNameROWSKeyword_4_0_7_0 = (Keyword)cNameAssignment_4_0_7.eContents().get(0);
		private final Assignment cNameAssignment_4_0_8 = (Assignment)cAlternatives_4_0.eContents().get(8);
		private final Keyword cNameCOLSKeyword_4_0_8_0 = (Keyword)cNameAssignment_4_0_8.eContents().get(0);
		private final Assignment cNameAssignment_4_0_9 = (Assignment)cAlternatives_4_0.eContents().get(9);
		private final Keyword cName_HTML_STYLECLASSKeyword_4_0_9_0 = (Keyword)cNameAssignment_4_0_9.eContents().get(0);
		private final Assignment cNameAssignment_4_0_10 = (Assignment)cAlternatives_4_0.eContents().get(10);
		private final Keyword cNameLABELKeyword_4_0_10_0 = (Keyword)cNameAssignment_4_0_10.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cValsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cValsValueListParserRuleCall_4_2_0 = (RuleCall)cValsAssignment_4_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		
		//InputOption:
		//	(name="OPTIONAL" | name="DEFINED" | name="DISABLED" | name="MAPBYTYPE" | name="MAPBYNAME" | name="MANY") |
		//	name="FORMFIELD" "(" FormfieldOption ")" | name="ENABLE" "(" assigns_list=AssignList ")" | name="TYPE" "("
		//	InputtypeOptions ")" | (name="RANGE" | name="DEFAULT" | name="MAXLENGTH" | name="DISABLED" | name="DESCRIPTION" |
		//	name="NULL" | name="FIELDLENGTH" | name="ROWS" | name="COLS" | name="_HTML_STYLECLASS" | name="LABEL") "("
		//	vals+=ValueList ")";
		@Override public ParserRule getRule() { return rule; }

		//(name="OPTIONAL" | name="DEFINED" | name="DISABLED" | name="MAPBYTYPE" | name="MAPBYNAME" | name="MANY") |
		//name="FORMFIELD" "(" FormfieldOption ")" | name="ENABLE" "(" assigns_list=AssignList ")" | name="TYPE" "("
		//InputtypeOptions ")" | (name="RANGE" | name="DEFAULT" | name="MAXLENGTH" | name="DISABLED" | name="DESCRIPTION" |
		//name="NULL" | name="FIELDLENGTH" | name="ROWS" | name="COLS" | name="_HTML_STYLECLASS" | name="LABEL") "("
		//vals+=ValueList ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//name="OPTIONAL" | name="DEFINED" | name="DISABLED" | name="MAPBYTYPE" | name="MAPBYNAME" | name="MANY"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//name="OPTIONAL"
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//"OPTIONAL"
		public Keyword getNameOPTIONALKeyword_0_0_0() { return cNameOPTIONALKeyword_0_0_0; }

		//name="DEFINED"
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//"DEFINED"
		public Keyword getNameDEFINEDKeyword_0_1_0() { return cNameDEFINEDKeyword_0_1_0; }

		//name="DISABLED"
		public Assignment getNameAssignment_0_2() { return cNameAssignment_0_2; }

		//"DISABLED"
		public Keyword getNameDISABLEDKeyword_0_2_0() { return cNameDISABLEDKeyword_0_2_0; }

		//name="MAPBYTYPE"
		public Assignment getNameAssignment_0_3() { return cNameAssignment_0_3; }

		//"MAPBYTYPE"
		public Keyword getNameMAPBYTYPEKeyword_0_3_0() { return cNameMAPBYTYPEKeyword_0_3_0; }

		//name="MAPBYNAME"
		public Assignment getNameAssignment_0_4() { return cNameAssignment_0_4; }

		//"MAPBYNAME"
		public Keyword getNameMAPBYNAMEKeyword_0_4_0() { return cNameMAPBYNAMEKeyword_0_4_0; }

		//name="MANY"
		public Assignment getNameAssignment_0_5() { return cNameAssignment_0_5; }

		//"MANY"
		public Keyword getNameMANYKeyword_0_5_0() { return cNameMANYKeyword_0_5_0; }

		//name="FORMFIELD" "(" FormfieldOption ")"
		public Group getGroup_1() { return cGroup_1; }

		//name="FORMFIELD"
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//"FORMFIELD"
		public Keyword getNameFORMFIELDKeyword_1_0_0() { return cNameFORMFIELDKeyword_1_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//FormfieldOption
		public RuleCall getFormfieldOptionParserRuleCall_1_2() { return cFormfieldOptionParserRuleCall_1_2; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }

		//name="ENABLE" "(" assigns_list=AssignList ")"
		public Group getGroup_2() { return cGroup_2; }

		//name="ENABLE"
		public Assignment getNameAssignment_2_0() { return cNameAssignment_2_0; }

		//"ENABLE"
		public Keyword getNameENABLEKeyword_2_0_0() { return cNameENABLEKeyword_2_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }

		//assigns_list=AssignList
		public Assignment getAssigns_listAssignment_2_2() { return cAssigns_listAssignment_2_2; }

		//AssignList
		public RuleCall getAssigns_listAssignListParserRuleCall_2_2_0() { return cAssigns_listAssignListParserRuleCall_2_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }

		//name="TYPE" "(" InputtypeOptions ")"
		public Group getGroup_3() { return cGroup_3; }

		//name="TYPE"
		public Assignment getNameAssignment_3_0() { return cNameAssignment_3_0; }

		//"TYPE"
		public Keyword getNameTYPEKeyword_3_0_0() { return cNameTYPEKeyword_3_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }

		//InputtypeOptions
		public RuleCall getInputtypeOptionsParserRuleCall_3_2() { return cInputtypeOptionsParserRuleCall_3_2; }

		//")"
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }

		//(name="RANGE" | name="DEFAULT" | name="MAXLENGTH" | name="DISABLED" | name="DESCRIPTION" | name="NULL" |
		//name="FIELDLENGTH" | name="ROWS" | name="COLS" | name="_HTML_STYLECLASS" | name="LABEL") "(" vals+=ValueList ")"
		public Group getGroup_4() { return cGroup_4; }

		//name="RANGE" | name="DEFAULT" | name="MAXLENGTH" | name="DISABLED" | name="DESCRIPTION" | name="NULL" |
		//name="FIELDLENGTH" | name="ROWS" | name="COLS" | name="_HTML_STYLECLASS" | name="LABEL"
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }

		//name="RANGE"
		public Assignment getNameAssignment_4_0_0() { return cNameAssignment_4_0_0; }

		//"RANGE"
		public Keyword getNameRANGEKeyword_4_0_0_0() { return cNameRANGEKeyword_4_0_0_0; }

		//name="DEFAULT"
		public Assignment getNameAssignment_4_0_1() { return cNameAssignment_4_0_1; }

		//"DEFAULT"
		public Keyword getNameDEFAULTKeyword_4_0_1_0() { return cNameDEFAULTKeyword_4_0_1_0; }

		//name="MAXLENGTH"
		public Assignment getNameAssignment_4_0_2() { return cNameAssignment_4_0_2; }

		//"MAXLENGTH"
		public Keyword getNameMAXLENGTHKeyword_4_0_2_0() { return cNameMAXLENGTHKeyword_4_0_2_0; }

		//name="DISABLED"
		public Assignment getNameAssignment_4_0_3() { return cNameAssignment_4_0_3; }

		//"DISABLED"
		public Keyword getNameDISABLEDKeyword_4_0_3_0() { return cNameDISABLEDKeyword_4_0_3_0; }

		//name="DESCRIPTION"
		public Assignment getNameAssignment_4_0_4() { return cNameAssignment_4_0_4; }

		//"DESCRIPTION"
		public Keyword getNameDESCRIPTIONKeyword_4_0_4_0() { return cNameDESCRIPTIONKeyword_4_0_4_0; }

		//name="NULL"
		public Assignment getNameAssignment_4_0_5() { return cNameAssignment_4_0_5; }

		//"NULL"
		public Keyword getNameNULLKeyword_4_0_5_0() { return cNameNULLKeyword_4_0_5_0; }

		//name="FIELDLENGTH"
		public Assignment getNameAssignment_4_0_6() { return cNameAssignment_4_0_6; }

		//"FIELDLENGTH"
		public Keyword getNameFIELDLENGTHKeyword_4_0_6_0() { return cNameFIELDLENGTHKeyword_4_0_6_0; }

		//name="ROWS"
		public Assignment getNameAssignment_4_0_7() { return cNameAssignment_4_0_7; }

		//"ROWS"
		public Keyword getNameROWSKeyword_4_0_7_0() { return cNameROWSKeyword_4_0_7_0; }

		//name="COLS"
		public Assignment getNameAssignment_4_0_8() { return cNameAssignment_4_0_8; }

		//"COLS"
		public Keyword getNameCOLSKeyword_4_0_8_0() { return cNameCOLSKeyword_4_0_8_0; }

		//name="_HTML_STYLECLASS"
		public Assignment getNameAssignment_4_0_9() { return cNameAssignment_4_0_9; }

		//"_HTML_STYLECLASS"
		public Keyword getName_HTML_STYLECLASSKeyword_4_0_9_0() { return cName_HTML_STYLECLASSKeyword_4_0_9_0; }

		//name="LABEL"
		public Assignment getNameAssignment_4_0_10() { return cNameAssignment_4_0_10; }

		//"LABEL"
		public Keyword getNameLABELKeyword_4_0_10_0() { return cNameLABELKeyword_4_0_10_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }

		//vals+=ValueList
		public Assignment getValsAssignment_4_2() { return cValsAssignment_4_2; }

		//ValueList
		public RuleCall getValsValueListParserRuleCall_4_2_0() { return cValsValueListParserRuleCall_4_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }
	}

	public class FormfieldOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FormfieldOption");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCHECKBOXKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cRADIOKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSELECTKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cMULTIPLESELECTKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cTEXTAREAKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cHIDDENKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cTEXTKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//FormfieldOption:
		//	"CHECKBOX" | "RADIO" | "SELECT" | "MULTIPLESELECT" | "TEXTAREA" | "HIDDEN" | "TEXT";
		@Override public ParserRule getRule() { return rule; }

		//"CHECKBOX" | "RADIO" | "SELECT" | "MULTIPLESELECT" | "TEXTAREA" | "HIDDEN" | "TEXT"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"CHECKBOX"
		public Keyword getCHECKBOXKeyword_0() { return cCHECKBOXKeyword_0; }

		//"RADIO"
		public Keyword getRADIOKeyword_1() { return cRADIOKeyword_1; }

		//"SELECT"
		public Keyword getSELECTKeyword_2() { return cSELECTKeyword_2; }

		//"MULTIPLESELECT"
		public Keyword getMULTIPLESELECTKeyword_3() { return cMULTIPLESELECTKeyword_3; }

		//"TEXTAREA"
		public Keyword getTEXTAREAKeyword_4() { return cTEXTAREAKeyword_4; }

		//"HIDDEN"
		public Keyword getHIDDENKeyword_5() { return cHIDDENKeyword_5; }

		//"TEXT"
		public Keyword getTEXTKeyword_6() { return cTEXTKeyword_6; }
	}

	public class InputtypeOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InputtypeOption");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSTRINGKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cUNICODEKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cUNISTRKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cINTEGERKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cDECIMALKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cNUMERICKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cREALKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//InputtypeOption:
		//	"STRING" | "UNICODE" | "UNISTR" | "INTEGER" | "DECIMAL" | "NUMERIC" | "REAL";
		@Override public ParserRule getRule() { return rule; }

		//"STRING" | "UNICODE" | "UNISTR" | "INTEGER" | "DECIMAL" | "NUMERIC" | "REAL"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"STRING"
		public Keyword getSTRINGKeyword_0() { return cSTRINGKeyword_0; }

		//"UNICODE"
		public Keyword getUNICODEKeyword_1() { return cUNICODEKeyword_1; }

		//"UNISTR"
		public Keyword getUNISTRKeyword_2() { return cUNISTRKeyword_2; }

		//"INTEGER"
		public Keyword getINTEGERKeyword_3() { return cINTEGERKeyword_3; }

		//"DECIMAL"
		public Keyword getDECIMALKeyword_4() { return cDECIMALKeyword_4; }

		//"NUMERIC"
		public Keyword getNUMERICKeyword_5() { return cNUMERICKeyword_5; }

		//"REAL"
		public Keyword getREALKeyword_6() { return cREALKeyword_6; }
	}

	public class InputtypeOptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InputtypeOptions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cInputtypeOptionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cInputtypeOptionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//InputtypeOptions:
		//	InputtypeOption ("," InputtypeOption)*;
		@Override public ParserRule getRule() { return rule; }

		//InputtypeOption ("," InputtypeOption)*
		public Group getGroup() { return cGroup; }

		//InputtypeOption
		public RuleCall getInputtypeOptionParserRuleCall_0() { return cInputtypeOptionParserRuleCall_0; }

		//("," InputtypeOption)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//InputtypeOption
		public RuleCall getInputtypeOptionParserRuleCall_1_1() { return cInputtypeOptionParserRuleCall_1_1; }
	}

	public class OutputSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OutputSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameOUTPUTSKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cOutputsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOutputsOutputValueParserRuleCall_1_0 = (RuleCall)cOutputsAssignment_1.eContents().get(0);
		private final Keyword cENDKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//OutputSection:
		//	name="OUTPUTS" outputs+=OutputValue+ => "END";
		@Override public ParserRule getRule() { return rule; }

		//name="OUTPUTS" outputs+=OutputValue+ => "END"
		public Group getGroup() { return cGroup; }

		//name="OUTPUTS"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"OUTPUTS"
		public Keyword getNameOUTPUTSKeyword_0_0() { return cNameOUTPUTSKeyword_0_0; }

		//outputs+=OutputValue+
		public Assignment getOutputsAssignment_1() { return cOutputsAssignment_1; }

		//OutputValue
		public RuleCall getOutputsOutputValueParserRuleCall_1_0() { return cOutputsOutputValueParserRuleCall_1_0; }

		//=> "END"
		public Keyword getENDKeyword_2() { return cENDKeyword_2; }
	}

	public class OutfieldDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OutfieldDecl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntVarParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBoolParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringVarParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Assignment cFieldsAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cFieldsFieldDeclParserRuleCall_3_0 = (RuleCall)cFieldsAssignment_3.eContents().get(0);
		
		//OutfieldDecl:
		//	IntVar | Bool | StringVar | fields+=FieldDecl;
		@Override public ParserRule getRule() { return rule; }

		//IntVar | Bool | StringVar | fields+=FieldDecl
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntVar
		public RuleCall getIntVarParserRuleCall_0() { return cIntVarParserRuleCall_0; }

		//Bool
		public RuleCall getBoolParserRuleCall_1() { return cBoolParserRuleCall_1; }

		//StringVar
		public RuleCall getStringVarParserRuleCall_2() { return cStringVarParserRuleCall_2; }

		//fields+=FieldDecl
		public Assignment getFieldsAssignment_3() { return cFieldsAssignment_3; }

		//FieldDecl
		public RuleCall getFieldsFieldDeclParserRuleCall_3_0() { return cFieldsFieldDeclParserRuleCall_3_0; }
	}

	public class ECLIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ECLInteger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cINTEGERKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//ECLInteger:
		//	"INTEGER" INT? name=ID;
		@Override public ParserRule getRule() { return rule; }

		//"INTEGER" INT? name=ID
		public Group getGroup() { return cGroup; }

		//"INTEGER"
		public Keyword getINTEGERKeyword_0() { return cINTEGERKeyword_0; }

		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class ECLUnsignedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ECLUnsigned");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUNSIGNEDKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//ECLUnsigned:
		//	"UNSIGNED" INT? name=ID;
		@Override public ParserRule getRule() { return rule; }

		//"UNSIGNED" INT? name=ID
		public Group getGroup() { return cGroup; }

		//"UNSIGNED"
		public Keyword getUNSIGNEDKeyword_0() { return cUNSIGNEDKeyword_0; }

		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class ECLStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ECLString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSTRINGKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//ECLString:
		//	"STRING" INT? name=ID;
		@Override public ParserRule getRule() { return rule; }

		//"STRING" INT? name=ID
		public Group getGroup() { return cGroup; }

		//"STRING"
		public Keyword getSTRINGKeyword_0() { return cSTRINGKeyword_0; }

		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class ECLQstringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ECLQstring");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQSTRINGKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//ECLQstring:
		//	"QSTRING" INT? name=ID;
		@Override public ParserRule getRule() { return rule; }

		//"QSTRING" INT? name=ID
		public Group getGroup() { return cGroup; }

		//"QSTRING"
		public Keyword getQSTRINGKeyword_0() { return cQSTRINGKeyword_0; }

		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class ECLVarstringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ECLVarstring");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVARSTRINGKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//ECLVarstring:
		//	"VARSTRING" INT? name=ID;
		@Override public ParserRule getRule() { return rule; }

		//"VARSTRING" INT? name=ID
		public Group getGroup() { return cGroup; }

		//"VARSTRING"
		public Keyword getVARSTRINGKeyword_0() { return cVARSTRINGKeyword_0; }

		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class ECLUnicodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ECLUnicode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUNICODEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//ECLUnicode:
		//	"UNICODE" INT? name=ID;
		@Override public ParserRule getRule() { return rule; }

		//"UNICODE" INT? name=ID
		public Group getGroup() { return cGroup; }

		//"UNICODE"
		public Keyword getUNICODEKeyword_0() { return cUNICODEKeyword_0; }

		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class ECLVarunicodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ECLVarunicode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVARUNICODEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//ECLVarunicode:
		//	"VARUNICODE" INT? name=ID;
		@Override public ParserRule getRule() { return rule; }

		//"VARUNICODE" INT? name=ID
		public Group getGroup() { return cGroup; }

		//"VARUNICODE"
		public Keyword getVARUNICODEKeyword_0() { return cVARUNICODEKeyword_0; }

		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class ECLDataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ECLData");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDATAKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ECLData:
		//	"DATA" name=ID;
		@Override public ParserRule getRule() { return rule; }

		//"DATA" name=ID
		public Group getGroup() { return cGroup; }

		//"DATA"
		public Keyword getDATAKeyword_0() { return cDATAKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class ECLRealElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ECLReal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cREALKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ECLReal:
		//	"REAL" name=ID;
		@Override public ParserRule getRule() { return rule; }

		//"REAL" name=ID
		public Group getGroup() { return cGroup; }

		//"REAL"
		public Keyword getREALKeyword_0() { return cREALKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class ECLfieldTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ECLfieldType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cECLIntegerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cECLQstringParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cECLStringParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cECLRealParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cECLUnicodeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cECLDataParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cECLVarstringParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cECLVarunicodeParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cECLUnsignedParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//ECLfieldType:
		//	ECLInteger | ECLQstring | ECLString | ECLReal | ECLUnicode | ECLData | ECLVarstring | ECLVarunicode | ECLUnsigned;
		@Override public ParserRule getRule() { return rule; }

		//ECLInteger | ECLQstring | ECLString | ECLReal | ECLUnicode | ECLData | ECLVarstring | ECLVarunicode | ECLUnsigned
		public Alternatives getAlternatives() { return cAlternatives; }

		//ECLInteger
		public RuleCall getECLIntegerParserRuleCall_0() { return cECLIntegerParserRuleCall_0; }

		//ECLQstring
		public RuleCall getECLQstringParserRuleCall_1() { return cECLQstringParserRuleCall_1; }

		//ECLString
		public RuleCall getECLStringParserRuleCall_2() { return cECLStringParserRuleCall_2; }

		//ECLReal
		public RuleCall getECLRealParserRuleCall_3() { return cECLRealParserRuleCall_3; }

		//ECLUnicode
		public RuleCall getECLUnicodeParserRuleCall_4() { return cECLUnicodeParserRuleCall_4; }

		//ECLData
		public RuleCall getECLDataParserRuleCall_5() { return cECLDataParserRuleCall_5; }

		//ECLVarstring
		public RuleCall getECLVarstringParserRuleCall_6() { return cECLVarstringParserRuleCall_6; }

		//ECLVarunicode
		public RuleCall getECLVarunicodeParserRuleCall_7() { return cECLVarunicodeParserRuleCall_7; }

		//ECLUnsigned
		public RuleCall getECLUnsignedParserRuleCall_8() { return cECLUnsignedParserRuleCall_8; }
	}

	public class PosVizDataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PosVizData");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cECLfieldTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFieldDeclParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PosVizData:
		//	ECLfieldType | FieldDecl;
		@Override public ParserRule getRule() { return rule; }

		//ECLfieldType | FieldDecl
		public Alternatives getAlternatives() { return cAlternatives; }

		//ECLfieldType
		public RuleCall getECLfieldTypeParserRuleCall_0() { return cECLfieldTypeParserRuleCall_0; }

		//FieldDecl
		public RuleCall getFieldDeclParserRuleCall_1() { return cFieldDeclParserRuleCall_1; }
	}

	public class ECLOutputDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ECLOutputDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cECLfieldTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cOptionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOptionsOutputOptionsParserRuleCall_1_0 = (RuleCall)cOptionsAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ECLOutputDecl:
		//	ECLfieldType options=OutputOptions? ";";
		@Override public ParserRule getRule() { return rule; }

		//ECLfieldType options=OutputOptions? ";"
		public Group getGroup() { return cGroup; }

		//ECLfieldType
		public RuleCall getECLfieldTypeParserRuleCall_0() { return cECLfieldTypeParserRuleCall_0; }

		//options=OutputOptions?
		public Assignment getOptionsAssignment_1() { return cOptionsAssignment_1; }

		//OutputOptions
		public RuleCall getOptionsOutputOptionsParserRuleCall_1_0() { return cOptionsOutputOptionsParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class OutputOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OutputOption");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cNameSIDEKeyword_0_0_0 = (Keyword)cNameAssignment_0_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cNameLARGEKeyword_0_1_0 = (Keyword)cNameAssignment_0_1.eContents().get(0);
		private final Assignment cNameAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final Keyword cNameSMALLKeyword_0_2_0 = (Keyword)cNameAssignment_0_2.eContents().get(0);
		private final Assignment cNameAssignment_0_3 = (Assignment)cAlternatives_0.eContents().get(3);
		private final Keyword cNameFEWKeyword_0_3_0 = (Keyword)cNameAssignment_0_3.eContents().get(0);
		private final Assignment cNameAssignment_0_4 = (Assignment)cAlternatives_0.eContents().get(4);
		private final Keyword cNameWUIDKeyword_0_4_0 = (Keyword)cNameAssignment_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cNameFROMKeyword_1_0_0 = (Keyword)cNameAssignment_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cVarsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cVarsDatatypeCrossReference_1_2_0 = (CrossReference)cVarsAssignment_1_2.eContents().get(0);
		private final RuleCall cVarsDatatypeIDTerminalRuleCall_1_2_0_1 = (RuleCall)cVarsDatatypeCrossReference_1_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cNameAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cNameDESCRIPTIONKeyword_2_0_0 = (Keyword)cNameAssignment_2_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cValsAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cValsValueParserRuleCall_2_2_0 = (RuleCall)cValsAssignment_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//OutputOption:
		//	(name="SIDE" | name="LARGE" | name="SMALL" | name="FEW" | name="WUID") | name="FROM" "(" vars=[Datatype] ")" |
		//	name="DESCRIPTION" "(" vals=Value ")";
		@Override public ParserRule getRule() { return rule; }

		//(name="SIDE" | name="LARGE" | name="SMALL" | name="FEW" | name="WUID") | name="FROM" "(" vars=[Datatype] ")" |
		//name="DESCRIPTION" "(" vals=Value ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//name="SIDE" | name="LARGE" | name="SMALL" | name="FEW" | name="WUID"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//name="SIDE"
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//"SIDE"
		public Keyword getNameSIDEKeyword_0_0_0() { return cNameSIDEKeyword_0_0_0; }

		//name="LARGE"
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//"LARGE"
		public Keyword getNameLARGEKeyword_0_1_0() { return cNameLARGEKeyword_0_1_0; }

		//name="SMALL"
		public Assignment getNameAssignment_0_2() { return cNameAssignment_0_2; }

		//"SMALL"
		public Keyword getNameSMALLKeyword_0_2_0() { return cNameSMALLKeyword_0_2_0; }

		//name="FEW"
		public Assignment getNameAssignment_0_3() { return cNameAssignment_0_3; }

		//"FEW"
		public Keyword getNameFEWKeyword_0_3_0() { return cNameFEWKeyword_0_3_0; }

		//name="WUID"
		public Assignment getNameAssignment_0_4() { return cNameAssignment_0_4; }

		//"WUID"
		public Keyword getNameWUIDKeyword_0_4_0() { return cNameWUIDKeyword_0_4_0; }

		//name="FROM" "(" vars=[Datatype] ")"
		public Group getGroup_1() { return cGroup_1; }

		//name="FROM"
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//"FROM"
		public Keyword getNameFROMKeyword_1_0_0() { return cNameFROMKeyword_1_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//vars=[Datatype]
		public Assignment getVarsAssignment_1_2() { return cVarsAssignment_1_2; }

		//[Datatype]
		public CrossReference getVarsDatatypeCrossReference_1_2_0() { return cVarsDatatypeCrossReference_1_2_0; }

		//ID
		public RuleCall getVarsDatatypeIDTerminalRuleCall_1_2_0_1() { return cVarsDatatypeIDTerminalRuleCall_1_2_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }

		//name="DESCRIPTION" "(" vals=Value ")"
		public Group getGroup_2() { return cGroup_2; }

		//name="DESCRIPTION"
		public Assignment getNameAssignment_2_0() { return cNameAssignment_2_0; }

		//"DESCRIPTION"
		public Keyword getNameDESCRIPTIONKeyword_2_0_0() { return cNameDESCRIPTIONKeyword_2_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }

		//vals=Value
		public Assignment getValsAssignment_2_2() { return cValsAssignment_2_2; }

		//Value
		public RuleCall getValsValueParserRuleCall_2_2_0() { return cValsValueParserRuleCall_2_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}

	public class OutputOptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OutputOptions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOutput_opsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOutput_opsOutputOptionParserRuleCall_1_0 = (RuleCall)cOutput_opsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOutput_opsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOutput_opsOutputOptionParserRuleCall_2_1_0 = (RuleCall)cOutput_opsAssignment_2_1.eContents().get(0);
		
		//OutputOptions:
		//	":" output_ops+=OutputOption ("," output_ops+=OutputOption)*;
		@Override public ParserRule getRule() { return rule; }

		//":" output_ops+=OutputOption ("," output_ops+=OutputOption)*
		public Group getGroup() { return cGroup; }

		//":"
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }

		//output_ops+=OutputOption
		public Assignment getOutput_opsAssignment_1() { return cOutput_opsAssignment_1; }

		//OutputOption
		public RuleCall getOutput_opsOutputOptionParserRuleCall_1_0() { return cOutput_opsOutputOptionParserRuleCall_1_0; }

		//("," output_ops+=OutputOption)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//output_ops+=OutputOption
		public Assignment getOutput_opsAssignment_2_1() { return cOutput_opsAssignment_2_1; }

		//OutputOption
		public RuleCall getOutput_opsOutputOptionParserRuleCall_2_1_0() { return cOutput_opsOutputOptionParserRuleCall_2_1_0; }
	}

	public class OutTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OutType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cBOOLKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cINTKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cSTRINGKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Keyword cACTIONKeyword_0_3 = (Keyword)cAlternatives_0.eContents().get(3);
		private final Assignment cValAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValValueParserRuleCall_1_0 = (RuleCall)cValAssignment_1.eContents().get(0);
		
		//OutType:
		//	("BOOL" | "INT" | "STRING" | "ACTION")? val=Value;
		@Override public ParserRule getRule() { return rule; }

		//("BOOL" | "INT" | "STRING" | "ACTION")? val=Value
		public Group getGroup() { return cGroup; }

		//("BOOL" | "INT" | "STRING" | "ACTION")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"BOOL"
		public Keyword getBOOLKeyword_0_0() { return cBOOLKeyword_0_0; }

		//"INT"
		public Keyword getINTKeyword_0_1() { return cINTKeyword_0_1; }

		//"STRING"
		public Keyword getSTRINGKeyword_0_2() { return cSTRINGKeyword_0_2; }

		//"ACTION"
		public Keyword getACTIONKeyword_0_3() { return cACTIONKeyword_0_3; }

		//val=Value
		public Assignment getValAssignment_1() { return cValAssignment_1; }

		//Value
		public RuleCall getValValueParserRuleCall_1_0() { return cValValueParserRuleCall_1_0; }
	}

	public class OutDatasetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OutDataset");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDATASETKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cOut_baseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOut_baseOutputBaseParserRuleCall_2_0 = (RuleCall)cOut_baseAssignment_2.eContents().get(0);
		private final Assignment cOpsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOpsOutputOptionsParserRuleCall_3_0 = (RuleCall)cOpsAssignment_3.eContents().get(0);
		
		//OutDataset:
		//	"DATASET" name=ID out_base=OutputBase? ops+=OutputOptions?;
		@Override public ParserRule getRule() { return rule; }

		//"DATASET" name=ID out_base=OutputBase? ops+=OutputOptions?
		public Group getGroup() { return cGroup; }

		//"DATASET"
		public Keyword getDATASETKeyword_0() { return cDATASETKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//out_base=OutputBase?
		public Assignment getOut_baseAssignment_2() { return cOut_baseAssignment_2; }

		//OutputBase
		public RuleCall getOut_baseOutputBaseParserRuleCall_2_0() { return cOut_baseOutputBaseParserRuleCall_2_0; }

		//ops+=OutputOptions?
		public Assignment getOpsAssignment_3() { return cOpsAssignment_3; }

		//OutputOptions
		public RuleCall getOpsOutputOptionsParserRuleCall_3_0() { return cOpsOutputOptionsParserRuleCall_3_0; }
	}

	public class OutputValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OutputValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cOutTypeParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Assignment cOpsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOpsOutputOptionsParserRuleCall_0_1_0 = (RuleCall)cOpsAssignment_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cOutDatasetParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cEcl_varsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEcl_varsECLOutputDeclParserRuleCall_1_1_0 = (RuleCall)cEcl_varsAssignment_1_1.eContents().get(0);
		private final Keyword cENDKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cOutDatasetParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//OutputValue:
		//	OutType ops=OutputOptions? ";" | OutDataset ecl_vars+=ECLOutputDecl* => "END" | OutDataset ";";
		@Override public ParserRule getRule() { return rule; }

		//OutType ops=OutputOptions? ";" | OutDataset ecl_vars+=ECLOutputDecl* => "END" | OutDataset ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//OutType ops=OutputOptions? ";"
		public Group getGroup_0() { return cGroup_0; }

		//OutType
		public RuleCall getOutTypeParserRuleCall_0_0() { return cOutTypeParserRuleCall_0_0; }

		//ops=OutputOptions?
		public Assignment getOpsAssignment_0_1() { return cOpsAssignment_0_1; }

		//OutputOptions
		public RuleCall getOpsOutputOptionsParserRuleCall_0_1_0() { return cOpsOutputOptionsParserRuleCall_0_1_0; }

		//";"
		public Keyword getSemicolonKeyword_0_2() { return cSemicolonKeyword_0_2; }

		//OutDataset ecl_vars+=ECLOutputDecl* => "END"
		public Group getGroup_1() { return cGroup_1; }

		//OutDataset
		public RuleCall getOutDatasetParserRuleCall_1_0() { return cOutDatasetParserRuleCall_1_0; }

		//ecl_vars+=ECLOutputDecl*
		public Assignment getEcl_varsAssignment_1_1() { return cEcl_varsAssignment_1_1; }

		//ECLOutputDecl
		public RuleCall getEcl_varsECLOutputDeclParserRuleCall_1_1_0() { return cEcl_varsECLOutputDeclParserRuleCall_1_1_0; }

		//=> "END"
		public Keyword getENDKeyword_1_2() { return cENDKeyword_1_2; }

		//OutDataset ";"
		public Group getGroup_2() { return cGroup_2; }

		//OutDataset
		public RuleCall getOutDatasetParserRuleCall_2_0() { return cOutDatasetParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
	}

	public class OutputBaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OutputBase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBaseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cBaseDatatypeCrossReference_1_0 = (CrossReference)cBaseAssignment_1.eContents().get(0);
		private final RuleCall cBaseDatatypeIDTerminalRuleCall_1_0_1 = (RuleCall)cBaseDatatypeCrossReference_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//OutputBase:
		//	"(" base=[Datatype] ")";
		@Override public ParserRule getRule() { return rule; }

		//"(" base=[Datatype] ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//base=[Datatype]
		public Assignment getBaseAssignment_1() { return cBaseAssignment_1; }

		//[Datatype]
		public CrossReference getBaseDatatypeCrossReference_1_0() { return cBaseDatatypeCrossReference_1_0; }

		//ID
		public RuleCall getBaseDatatypeIDTerminalRuleCall_1_0_1() { return cBaseDatatypeIDTerminalRuleCall_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class GenerateSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GenerateSection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGenerateBodyInlineParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGenerateBodySaltParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//GenerateSection:
		//	GenerateBodyInline | GenerateBodySalt;
		@Override public ParserRule getRule() { return rule; }

		//GenerateBodyInline | GenerateBodySalt
		public Alternatives getAlternatives() { return cAlternatives; }

		//GenerateBodyInline
		public RuleCall getGenerateBodyInlineParserRuleCall_0() { return cGenerateBodyInlineParserRuleCall_0; }

		//GenerateBodySalt
		public RuleCall getGenerateBodySaltParserRuleCall_1() { return cGenerateBodySaltParserRuleCall_1; }
	}

	public class GenerateBodyInlineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GenerateBodyInline");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameGENERATESKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final RuleCall cGEN_BLOCKTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//GenerateBodyInline:
		//	name="GENERATES" GEN_BLOCK;
		@Override public ParserRule getRule() { return rule; }

		//name="GENERATES" GEN_BLOCK
		public Group getGroup() { return cGroup; }

		//name="GENERATES"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"GENERATES"
		public Keyword getNameGENERATESKeyword_0_0() { return cNameGENERATESKeyword_0_0; }

		//GEN_BLOCK
		public RuleCall getGEN_BLOCKTerminalRuleCall_1() { return cGEN_BLOCKTerminalRuleCall_1; }
	}

	public class GenerateBodySaltElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GenerateBodySalt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameGENERATESKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cSALTKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cIDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Keyword cSCOREDSEARCHKeyword_6_0 = (Keyword)cAlternatives_6.eContents().get(0);
		private final Keyword cPROFILEKeyword_6_1 = (Keyword)cAlternatives_6.eContents().get(1);
		private final Keyword cENDGENERATESKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//GenerateBodySalt:
		//	name="GENERATES" "SALT" "(" ID ")" ":" ("SCOREDSEARCH" | "PROFILE") => "ENDGENERATES";
		@Override public ParserRule getRule() { return rule; }

		//name="GENERATES" "SALT" "(" ID ")" ":" ("SCOREDSEARCH" | "PROFILE") => "ENDGENERATES"
		public Group getGroup() { return cGroup; }

		//name="GENERATES"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"GENERATES"
		public Keyword getNameGENERATESKeyword_0_0() { return cNameGENERATESKeyword_0_0; }

		//"SALT"
		public Keyword getSALTKeyword_1() { return cSALTKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//ID
		public RuleCall getIDTerminalRuleCall_3() { return cIDTerminalRuleCall_3; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//":"
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }

		//"SCOREDSEARCH" | "PROFILE"
		public Alternatives getAlternatives_6() { return cAlternatives_6; }

		//"SCOREDSEARCH"
		public Keyword getSCOREDSEARCHKeyword_6_0() { return cSCOREDSEARCHKeyword_6_0; }

		//"PROFILE"
		public Keyword getPROFILEKeyword_6_1() { return cPROFILEKeyword_6_1; }

		//=> "ENDGENERATES"
		public Keyword getENDGENERATESKeyword_7() { return cENDGENERATESKeyword_7; }
	}

	public class VisualSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VisualSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSec_nameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cSec_nameVISUALIZEKeyword_0_0 = (Keyword)cSec_nameAssignment_0.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cVis_opsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVis_opsVisualSectionOptionsParserRuleCall_2_0 = (RuleCall)cVis_opsAssignment_2.eContents().get(0);
		private final Assignment cVis_elementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVis_elementsVisualizationParserRuleCall_3_0 = (RuleCall)cVis_elementsAssignment_3.eContents().get(0);
		private final Keyword cENDKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//VisualSection:
		//	sec_name="VISUALIZE" ID vis_ops=VisualSectionOptions? vis_elements+=Visualization+ => "END";
		@Override public ParserRule getRule() { return rule; }

		//sec_name="VISUALIZE" ID vis_ops=VisualSectionOptions? vis_elements+=Visualization+ => "END"
		public Group getGroup() { return cGroup; }

		//sec_name="VISUALIZE"
		public Assignment getSec_nameAssignment_0() { return cSec_nameAssignment_0; }

		//"VISUALIZE"
		public Keyword getSec_nameVISUALIZEKeyword_0_0() { return cSec_nameVISUALIZEKeyword_0_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//vis_ops=VisualSectionOptions?
		public Assignment getVis_opsAssignment_2() { return cVis_opsAssignment_2; }

		//VisualSectionOptions
		public RuleCall getVis_opsVisualSectionOptionsParserRuleCall_2_0() { return cVis_opsVisualSectionOptionsParserRuleCall_2_0; }

		//vis_elements+=Visualization+
		public Assignment getVis_elementsAssignment_3() { return cVis_elementsAssignment_3; }

		//Visualization
		public RuleCall getVis_elementsVisualizationParserRuleCall_3_0() { return cVis_elementsVisualizationParserRuleCall_3_0; }

		//=> "END"
		public Keyword getENDKeyword_4() { return cENDKeyword_4; }
	}

	public class VisualizationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Visualization");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Keyword cCHOROKeyword_0_0_0 = (Keyword)cAlternatives_0_0.eContents().get(0);
		private final Keyword cLINEKeyword_0_0_1 = (Keyword)cAlternatives_0_0.eContents().get(1);
		private final Keyword cTIMELINEKeyword_0_0_2 = (Keyword)cAlternatives_0_0.eContents().get(2);
		private final Keyword cPIEKeyword_0_0_3 = (Keyword)cAlternatives_0_0.eContents().get(3);
		private final Keyword cBARKeyword_0_0_4 = (Keyword)cAlternatives_0_0.eContents().get(4);
		private final Keyword cTABLEKeyword_0_0_5 = (Keyword)cAlternatives_0_0.eContents().get(5);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cInputAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cInputVisBasisParserRuleCall_0_3_0 = (RuleCall)cInputAssignment_0_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cVis_opAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cVis_opVisualOptionsParserRuleCall_0_5_0 = (RuleCall)cVis_opAssignment_0_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_6 = (Keyword)cGroup_0.eContents().get(6);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cSLIDERKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Assignment cVis_opAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cVis_opVisualOptionsParserRuleCall_1_2_0 = (RuleCall)cVis_opAssignment_1_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//Visualization:
		//	("CHORO" | "LINE" | "TIMELINE" | "PIE" | "BAR" | "TABLE") name=ID "(" input=VisBasis ")" vis_op=VisualOptions? ";" |
		//	"SLIDER" name=ID vis_op=VisualOptions? ";";
		@Override public ParserRule getRule() { return rule; }

		//("CHORO" | "LINE" | "TIMELINE" | "PIE" | "BAR" | "TABLE") name=ID "(" input=VisBasis ")" vis_op=VisualOptions? ";" |
		//"SLIDER" name=ID vis_op=VisualOptions? ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//("CHORO" | "LINE" | "TIMELINE" | "PIE" | "BAR" | "TABLE") name=ID "(" input=VisBasis ")" vis_op=VisualOptions? ";"
		public Group getGroup_0() { return cGroup_0; }

		//"CHORO" | "LINE" | "TIMELINE" | "PIE" | "BAR" | "TABLE"
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }

		//"CHORO"
		public Keyword getCHOROKeyword_0_0_0() { return cCHOROKeyword_0_0_0; }

		//"LINE"
		public Keyword getLINEKeyword_0_0_1() { return cLINEKeyword_0_0_1; }

		//"TIMELINE"
		public Keyword getTIMELINEKeyword_0_0_2() { return cTIMELINEKeyword_0_0_2; }

		//"PIE"
		public Keyword getPIEKeyword_0_0_3() { return cPIEKeyword_0_0_3; }

		//"BAR"
		public Keyword getBARKeyword_0_0_4() { return cBARKeyword_0_0_4; }

		//"TABLE"
		public Keyword getTABLEKeyword_0_0_5() { return cTABLEKeyword_0_0_5; }

		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_2() { return cLeftParenthesisKeyword_0_2; }

		//input=VisBasis
		public Assignment getInputAssignment_0_3() { return cInputAssignment_0_3; }

		//VisBasis
		public RuleCall getInputVisBasisParserRuleCall_0_3_0() { return cInputVisBasisParserRuleCall_0_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }

		//vis_op=VisualOptions?
		public Assignment getVis_opAssignment_0_5() { return cVis_opAssignment_0_5; }

		//VisualOptions
		public RuleCall getVis_opVisualOptionsParserRuleCall_0_5_0() { return cVis_opVisualOptionsParserRuleCall_0_5_0; }

		//";"
		public Keyword getSemicolonKeyword_0_6() { return cSemicolonKeyword_0_6; }

		//"SLIDER" name=ID vis_op=VisualOptions? ";"
		public Group getGroup_1() { return cGroup_1; }

		//"SLIDER"
		public Keyword getSLIDERKeyword_1_0() { return cSLIDERKeyword_1_0; }

		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }

		//vis_op=VisualOptions?
		public Assignment getVis_opAssignment_1_2() { return cVis_opAssignment_1_2; }

		//VisualOptions
		public RuleCall getVis_opVisualOptionsParserRuleCall_1_2_0() { return cVis_opVisualOptionsParserRuleCall_1_2_0; }

		//";"
		public Keyword getSemicolonKeyword_1_3() { return cSemicolonKeyword_1_3; }
	}

	public class VisBasisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VisBasis");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBasisAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cBasisOutDatasetCrossReference_0_0 = (CrossReference)cBasisAssignment_0.eContents().get(0);
		private final RuleCall cBasisOutDatasetIDTerminalRuleCall_0_0_1 = (RuleCall)cBasisOutDatasetCrossReference_0_0.eContents().get(1);
		private final Assignment cQualsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQualsVisBasisQualifiersParserRuleCall_1_0 = (RuleCall)cQualsAssignment_1.eContents().get(0);
		
		//VisBasis:
		//	basis=[OutDataset] quals=VisBasisQualifiers?;
		@Override public ParserRule getRule() { return rule; }

		//basis=[OutDataset] quals=VisBasisQualifiers?
		public Group getGroup() { return cGroup; }

		//basis=[OutDataset]
		public Assignment getBasisAssignment_0() { return cBasisAssignment_0; }

		//[OutDataset]
		public CrossReference getBasisOutDatasetCrossReference_0_0() { return cBasisOutDatasetCrossReference_0_0; }

		//ID
		public RuleCall getBasisOutDatasetIDTerminalRuleCall_0_0_1() { return cBasisOutDatasetIDTerminalRuleCall_0_0_1; }

		//quals=VisBasisQualifiers?
		public Assignment getQualsAssignment_1() { return cQualsAssignment_1; }

		//VisBasisQualifiers
		public RuleCall getQualsVisBasisQualifiersParserRuleCall_1_0() { return cQualsVisBasisQualifiersParserRuleCall_1_0; }
	}

	public class VisBasisQualifiersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VisBasisQualifiers");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFuncsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFuncsFunctionParserRuleCall_1_0 = (RuleCall)cFuncsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFuncsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFuncsFunctionParserRuleCall_2_1_0 = (RuleCall)cFuncsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//VisBasisQualifiers:
		//	"{" funcs+=Function ("," funcs+=Function)* "}";
		@Override public ParserRule getRule() { return rule; }

		//"{" funcs+=Function ("," funcs+=Function)* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//funcs+=Function
		public Assignment getFuncsAssignment_1() { return cFuncsAssignment_1; }

		//Function
		public RuleCall getFuncsFunctionParserRuleCall_1_0() { return cFuncsFunctionParserRuleCall_1_0; }

		//("," funcs+=Function)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//funcs+=Function
		public Assignment getFuncsAssignment_2_1() { return cFuncsAssignment_2_1; }

		//Function
		public RuleCall getFuncsFunctionParserRuleCall_2_1_0() { return cFuncsFunctionParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Function");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVarsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cVarsPosVizDataCrossReference_0_0 = (CrossReference)cVarsAssignment_0.eContents().get(0);
		private final RuleCall cVarsPosVizDataIDTerminalRuleCall_0_0_1 = (RuleCall)cVarsPosVizDataCrossReference_0_0.eContents().get(1);
		private final Assignment cValsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValsValueParserRuleCall_1_0 = (RuleCall)cValsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cSUMKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Alternatives cAlternatives_2_2 = (Alternatives)cGroup_2.eContents().get(2);
		private final Assignment cVarsAssignment_2_2_0 = (Assignment)cAlternatives_2_2.eContents().get(0);
		private final CrossReference cVarsPosVizDataCrossReference_2_2_0_0 = (CrossReference)cVarsAssignment_2_2_0.eContents().get(0);
		private final RuleCall cVarsPosVizDataIDTerminalRuleCall_2_2_0_0_1 = (RuleCall)cVarsPosVizDataCrossReference_2_2_0_0.eContents().get(1);
		private final Assignment cValsAssignment_2_2_1 = (Assignment)cAlternatives_2_2.eContents().get(1);
		private final RuleCall cValsValueParserRuleCall_2_2_1_0 = (RuleCall)cValsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cSCALEKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Alternatives cAlternatives_3_2 = (Alternatives)cGroup_3.eContents().get(2);
		private final Assignment cVarsAssignment_3_2_0 = (Assignment)cAlternatives_3_2.eContents().get(0);
		private final CrossReference cVarsPosVizDataCrossReference_3_2_0_0 = (CrossReference)cVarsAssignment_3_2_0.eContents().get(0);
		private final RuleCall cVarsPosVizDataIDTerminalRuleCall_3_2_0_0_1 = (RuleCall)cVarsPosVizDataCrossReference_3_2_0_0.eContents().get(1);
		private final Assignment cValsAssignment_3_2_1 = (Assignment)cAlternatives_3_2.eContents().get(1);
		private final RuleCall cValsValueParserRuleCall_3_2_1_0 = (RuleCall)cValsAssignment_3_2_1.eContents().get(0);
		private final Keyword cCommaKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final RuleCall cINTTerminalRuleCall_3_4 = (RuleCall)cGroup_3.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_3_5 = (Keyword)cGroup_3.eContents().get(5);
		
		//Function:
		//	vars=[PosVizData] | vals=Value | "SUM" "(" (vars=[PosVizData] | vals=Value) ")" | "SCALE" "(" (vars=[PosVizData] |
		//	vals=Value) "," INT ")";
		@Override public ParserRule getRule() { return rule; }

		//vars=[PosVizData] | vals=Value | "SUM" "(" (vars=[PosVizData] | vals=Value) ")" | "SCALE" "(" (vars=[PosVizData] |
		//vals=Value) "," INT ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//vars=[PosVizData]
		public Assignment getVarsAssignment_0() { return cVarsAssignment_0; }

		//[PosVizData]
		public CrossReference getVarsPosVizDataCrossReference_0_0() { return cVarsPosVizDataCrossReference_0_0; }

		//ID
		public RuleCall getVarsPosVizDataIDTerminalRuleCall_0_0_1() { return cVarsPosVizDataIDTerminalRuleCall_0_0_1; }

		//vals=Value
		public Assignment getValsAssignment_1() { return cValsAssignment_1; }

		//Value
		public RuleCall getValsValueParserRuleCall_1_0() { return cValsValueParserRuleCall_1_0; }

		//"SUM" "(" (vars=[PosVizData] | vals=Value) ")"
		public Group getGroup_2() { return cGroup_2; }

		//"SUM"
		public Keyword getSUMKeyword_2_0() { return cSUMKeyword_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }

		//vars=[PosVizData] | vals=Value
		public Alternatives getAlternatives_2_2() { return cAlternatives_2_2; }

		//vars=[PosVizData]
		public Assignment getVarsAssignment_2_2_0() { return cVarsAssignment_2_2_0; }

		//[PosVizData]
		public CrossReference getVarsPosVizDataCrossReference_2_2_0_0() { return cVarsPosVizDataCrossReference_2_2_0_0; }

		//ID
		public RuleCall getVarsPosVizDataIDTerminalRuleCall_2_2_0_0_1() { return cVarsPosVizDataIDTerminalRuleCall_2_2_0_0_1; }

		//vals=Value
		public Assignment getValsAssignment_2_2_1() { return cValsAssignment_2_2_1; }

		//Value
		public RuleCall getValsValueParserRuleCall_2_2_1_0() { return cValsValueParserRuleCall_2_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }

		//"SCALE" "(" (vars=[PosVizData] | vals=Value) "," INT ")"
		public Group getGroup_3() { return cGroup_3; }

		//"SCALE"
		public Keyword getSCALEKeyword_3_0() { return cSCALEKeyword_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }

		//vars=[PosVizData] | vals=Value
		public Alternatives getAlternatives_3_2() { return cAlternatives_3_2; }

		//vars=[PosVizData]
		public Assignment getVarsAssignment_3_2_0() { return cVarsAssignment_3_2_0; }

		//[PosVizData]
		public CrossReference getVarsPosVizDataCrossReference_3_2_0_0() { return cVarsPosVizDataCrossReference_3_2_0_0; }

		//ID
		public RuleCall getVarsPosVizDataIDTerminalRuleCall_3_2_0_0_1() { return cVarsPosVizDataIDTerminalRuleCall_3_2_0_0_1; }

		//vals=Value
		public Assignment getValsAssignment_3_2_1() { return cValsAssignment_3_2_1; }

		//Value
		public RuleCall getValsValueParserRuleCall_3_2_1_0() { return cValsValueParserRuleCall_3_2_1_0; }

		//","
		public Keyword getCommaKeyword_3_3() { return cCommaKeyword_3_3; }

		//INT
		public RuleCall getINTTerminalRuleCall_3_4() { return cINTTerminalRuleCall_3_4; }

		//")"
		public Keyword getRightParenthesisKeyword_3_5() { return cRightParenthesisKeyword_3_5; }
	}

	public class VisualSectionOptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VisualSectionOptions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVis_opsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVis_opsVisualSectionOptionParserRuleCall_1_0 = (RuleCall)cVis_opsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVis_opsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVis_opsVisualSectionOptionParserRuleCall_2_1_0 = (RuleCall)cVis_opsAssignment_2_1.eContents().get(0);
		
		//VisualSectionOptions:
		//	":" vis_ops+=VisualSectionOption ("," vis_ops+=VisualSectionOption)*;
		@Override public ParserRule getRule() { return rule; }

		//":" vis_ops+=VisualSectionOption ("," vis_ops+=VisualSectionOption)*
		public Group getGroup() { return cGroup; }

		//":"
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }

		//vis_ops+=VisualSectionOption
		public Assignment getVis_opsAssignment_1() { return cVis_opsAssignment_1; }

		//VisualSectionOption
		public RuleCall getVis_opsVisualSectionOptionParserRuleCall_1_0() { return cVis_opsVisualSectionOptionParserRuleCall_1_0; }

		//("," vis_ops+=VisualSectionOption)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//vis_ops+=VisualSectionOption
		public Assignment getVis_opsAssignment_2_1() { return cVis_opsAssignment_2_1; }

		//VisualSectionOption
		public RuleCall getVis_opsVisualSectionOptionParserRuleCall_2_1_0() { return cVis_opsVisualSectionOptionParserRuleCall_2_1_0; }
	}

	public class VisualSectionOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VisualSectionOption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameLABELKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValsValueParserRuleCall_2_0 = (RuleCall)cValsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//VisualSectionOption:
		//	name="LABEL" "(" vals=Value ")";
		@Override public ParserRule getRule() { return rule; }

		//name="LABEL" "(" vals=Value ")"
		public Group getGroup() { return cGroup; }

		//name="LABEL"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"LABEL"
		public Keyword getNameLABELKeyword_0_0() { return cNameLABELKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//vals=Value
		public Assignment getValsAssignment_2() { return cValsAssignment_2; }

		//Value
		public RuleCall getValsValueParserRuleCall_2_0() { return cValsValueParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class VisualOptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VisualOptions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVis_opsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVis_opsVisualOptionParserRuleCall_1_0 = (RuleCall)cVis_opsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVis_opsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVis_opsVisualOptionParserRuleCall_2_1_0 = (RuleCall)cVis_opsAssignment_2_1.eContents().get(0);
		
		//VisualOptions:
		//	":" vis_ops+=VisualOption ("," vis_ops+=VisualOption)*;
		@Override public ParserRule getRule() { return rule; }

		//":" vis_ops+=VisualOption ("," vis_ops+=VisualOption)*
		public Group getGroup() { return cGroup; }

		//":"
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }

		//vis_ops+=VisualOption
		public Assignment getVis_opsAssignment_1() { return cVis_opsAssignment_1; }

		//VisualOption
		public RuleCall getVis_opsVisualOptionParserRuleCall_1_0() { return cVis_opsVisualOptionParserRuleCall_1_0; }

		//("," vis_ops+=VisualOption)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//vis_ops+=VisualOption
		public Assignment getVis_opsAssignment_2_1() { return cVis_opsAssignment_2_1; }

		//VisualOption
		public RuleCall getVis_opsVisualOptionParserRuleCall_2_1_0() { return cVis_opsVisualOptionParserRuleCall_2_1_0; }
	}

	public class VisualOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VisualOption");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_0_0 = (Assignment)cAlternatives_0_0.eContents().get(0);
		private final Keyword cNameTITLEKeyword_0_0_0_0 = (Keyword)cNameAssignment_0_0_0.eContents().get(0);
		private final Assignment cNameAssignment_0_0_1 = (Assignment)cAlternatives_0_0.eContents().get(1);
		private final Keyword cNameDATEKeyword_0_0_1_0 = (Keyword)cNameAssignment_0_0_1.eContents().get(0);
		private final Assignment cNameAssignment_0_0_2 = (Assignment)cAlternatives_0_0.eContents().get(2);
		private final Keyword cNameDESCRIPTIONKeyword_0_0_2_0 = (Keyword)cNameAssignment_0_0_2.eContents().get(0);
		private final Assignment cNameAssignment_0_0_3 = (Assignment)cAlternatives_0_0.eContents().get(3);
		private final Keyword cNamePICTUREKeyword_0_0_3_0 = (Keyword)cNameAssignment_0_0_3.eContents().get(0);
		private final Assignment cNameAssignment_0_0_4 = (Assignment)cAlternatives_0_0.eContents().get(4);
		private final Keyword cNameSTATEKeyword_0_0_4_0 = (Keyword)cNameAssignment_0_0_4.eContents().get(0);
		private final Assignment cNameAssignment_0_0_5 = (Assignment)cAlternatives_0_0.eContents().get(5);
		private final Keyword cNameCOUNTYKeyword_0_0_5_0 = (Keyword)cNameAssignment_0_0_5.eContents().get(0);
		private final Assignment cNameAssignment_0_0_6 = (Assignment)cAlternatives_0_0.eContents().get(6);
		private final Keyword cNameWEIGHTKeyword_0_0_6_0 = (Keyword)cNameAssignment_0_0_6.eContents().get(0);
		private final Assignment cNameAssignment_0_0_7 = (Assignment)cAlternatives_0_0.eContents().get(7);
		private final Keyword cNameSIZEKeyword_0_0_7_0 = (Keyword)cNameAssignment_0_0_7.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cFuncsAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cFuncsFunctionParserRuleCall_0_2_0 = (RuleCall)cFuncsAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cVis_multAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cVis_multVisualMultivalParserRuleCall_1_0_0 = (RuleCall)cVis_multAssignment_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cFuncsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cFuncsFunctionParserRuleCall_1_2_0 = (RuleCall)cFuncsAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cCommaKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cFuncsAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cFuncsFunctionParserRuleCall_1_3_1_0 = (RuleCall)cFuncsAssignment_1_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cNameAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cNameSELECTSKeyword_2_0_0 = (Keyword)cNameAssignment_2_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final RuleCall cIDTerminalRuleCall_2_4 = (RuleCall)cGroup_2.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		
		//VisualOption:
		//	(name="TITLE" | name="DATE" | name="DESCRIPTION" | name="PICTURE" | name="STATE" | name="COUNTY" | name="WEIGHT" |
		//	name="SIZE") "(" funcs+=Function ")" | vis_mult=VisualMultival "(" funcs+=Function ("," funcs+=Function)* ")" |
		//	name="SELECTS" "(" ID "->" ID ")";
		@Override public ParserRule getRule() { return rule; }

		//(name="TITLE" | name="DATE" | name="DESCRIPTION" | name="PICTURE" | name="STATE" | name="COUNTY" | name="WEIGHT" |
		//name="SIZE") "(" funcs+=Function ")" | vis_mult=VisualMultival "(" funcs+=Function ("," funcs+=Function)* ")" |
		//name="SELECTS" "(" ID "->" ID ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//(name="TITLE" | name="DATE" | name="DESCRIPTION" | name="PICTURE" | name="STATE" | name="COUNTY" | name="WEIGHT" |
		//name="SIZE") "(" funcs+=Function ")"
		public Group getGroup_0() { return cGroup_0; }

		//name="TITLE" | name="DATE" | name="DESCRIPTION" | name="PICTURE" | name="STATE" | name="COUNTY" | name="WEIGHT" |
		//name="SIZE"
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }

		//name="TITLE"
		public Assignment getNameAssignment_0_0_0() { return cNameAssignment_0_0_0; }

		//"TITLE"
		public Keyword getNameTITLEKeyword_0_0_0_0() { return cNameTITLEKeyword_0_0_0_0; }

		//name="DATE"
		public Assignment getNameAssignment_0_0_1() { return cNameAssignment_0_0_1; }

		//"DATE"
		public Keyword getNameDATEKeyword_0_0_1_0() { return cNameDATEKeyword_0_0_1_0; }

		//name="DESCRIPTION"
		public Assignment getNameAssignment_0_0_2() { return cNameAssignment_0_0_2; }

		//"DESCRIPTION"
		public Keyword getNameDESCRIPTIONKeyword_0_0_2_0() { return cNameDESCRIPTIONKeyword_0_0_2_0; }

		//name="PICTURE"
		public Assignment getNameAssignment_0_0_3() { return cNameAssignment_0_0_3; }

		//"PICTURE"
		public Keyword getNamePICTUREKeyword_0_0_3_0() { return cNamePICTUREKeyword_0_0_3_0; }

		//name="STATE"
		public Assignment getNameAssignment_0_0_4() { return cNameAssignment_0_0_4; }

		//"STATE"
		public Keyword getNameSTATEKeyword_0_0_4_0() { return cNameSTATEKeyword_0_0_4_0; }

		//name="COUNTY"
		public Assignment getNameAssignment_0_0_5() { return cNameAssignment_0_0_5; }

		//"COUNTY"
		public Keyword getNameCOUNTYKeyword_0_0_5_0() { return cNameCOUNTYKeyword_0_0_5_0; }

		//name="WEIGHT"
		public Assignment getNameAssignment_0_0_6() { return cNameAssignment_0_0_6; }

		//"WEIGHT"
		public Keyword getNameWEIGHTKeyword_0_0_6_0() { return cNameWEIGHTKeyword_0_0_6_0; }

		//name="SIZE"
		public Assignment getNameAssignment_0_0_7() { return cNameAssignment_0_0_7; }

		//"SIZE"
		public Keyword getNameSIZEKeyword_0_0_7_0() { return cNameSIZEKeyword_0_0_7_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }

		//funcs+=Function
		public Assignment getFuncsAssignment_0_2() { return cFuncsAssignment_0_2; }

		//Function
		public RuleCall getFuncsFunctionParserRuleCall_0_2_0() { return cFuncsFunctionParserRuleCall_0_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }

		//vis_mult=VisualMultival "(" funcs+=Function ("," funcs+=Function)* ")"
		public Group getGroup_1() { return cGroup_1; }

		//vis_mult=VisualMultival
		public Assignment getVis_multAssignment_1_0() { return cVis_multAssignment_1_0; }

		//VisualMultival
		public RuleCall getVis_multVisualMultivalParserRuleCall_1_0_0() { return cVis_multVisualMultivalParserRuleCall_1_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//funcs+=Function
		public Assignment getFuncsAssignment_1_2() { return cFuncsAssignment_1_2; }

		//Function
		public RuleCall getFuncsFunctionParserRuleCall_1_2_0() { return cFuncsFunctionParserRuleCall_1_2_0; }

		//("," funcs+=Function)*
		public Group getGroup_1_3() { return cGroup_1_3; }

		//","
		public Keyword getCommaKeyword_1_3_0() { return cCommaKeyword_1_3_0; }

		//funcs+=Function
		public Assignment getFuncsAssignment_1_3_1() { return cFuncsAssignment_1_3_1; }

		//Function
		public RuleCall getFuncsFunctionParserRuleCall_1_3_1_0() { return cFuncsFunctionParserRuleCall_1_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }

		//name="SELECTS" "(" ID "->" ID ")"
		public Group getGroup_2() { return cGroup_2; }

		//name="SELECTS"
		public Assignment getNameAssignment_2_0() { return cNameAssignment_2_0; }

		//"SELECTS"
		public Keyword getNameSELECTSKeyword_2_0_0() { return cNameSELECTSKeyword_2_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_2_2() { return cIDTerminalRuleCall_2_2; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_2_3() { return cHyphenMinusGreaterThanSignKeyword_2_3; }

		//ID
		public RuleCall getIDTerminalRuleCall_2_4() { return cIDTerminalRuleCall_2_4; }

		//")"
		public Keyword getRightParenthesisKeyword_2_5() { return cRightParenthesisKeyword_2_5; }
	}

	public class VisualMultivalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VisualMultival");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cNameXKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cNameYKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cNameCOLORKeyword_2_0 = (Keyword)cNameAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cNameRANGEKeyword_3_0 = (Keyword)cNameAssignment_3.eContents().get(0);
		private final Assignment cNameAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cNameFILTERKeyword_4_0 = (Keyword)cNameAssignment_4.eContents().get(0);
		private final Assignment cNameAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cNameLABELKeyword_5_0 = (Keyword)cNameAssignment_5.eContents().get(0);
		private final Assignment cNameAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final Keyword cNameVALUEKeyword_6_0 = (Keyword)cNameAssignment_6.eContents().get(0);
		
		//VisualMultival:
		//	name="X" | name="Y" | name="COLOR" | name="RANGE" | name="FILTER" | name="LABEL" | name="VALUE";
		@Override public ParserRule getRule() { return rule; }

		//name="X" | name="Y" | name="COLOR" | name="RANGE" | name="FILTER" | name="LABEL" | name="VALUE"
		public Alternatives getAlternatives() { return cAlternatives; }

		//name="X"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"X"
		public Keyword getNameXKeyword_0_0() { return cNameXKeyword_0_0; }

		//name="Y"
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//"Y"
		public Keyword getNameYKeyword_1_0() { return cNameYKeyword_1_0; }

		//name="COLOR"
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//"COLOR"
		public Keyword getNameCOLORKeyword_2_0() { return cNameCOLORKeyword_2_0; }

		//name="RANGE"
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//"RANGE"
		public Keyword getNameRANGEKeyword_3_0() { return cNameRANGEKeyword_3_0; }

		//name="FILTER"
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//"FILTER"
		public Keyword getNameFILTERKeyword_4_0() { return cNameFILTERKeyword_4_0; }

		//name="LABEL"
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }

		//"LABEL"
		public Keyword getNameLABELKeyword_5_0() { return cNameLABELKeyword_5_0; }

		//name="VALUE"
		public Assignment getNameAssignment_6() { return cNameAssignment_6; }

		//"VALUE"
		public Keyword getNameVALUEKeyword_6_0() { return cNameVALUEKeyword_6_0; }
	}

	public class CustomSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CustomSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameCUSTOMKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cCust_valsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCust_valsCustomValueParserRuleCall_1_0 = (RuleCall)cCust_valsAssignment_1.eContents().get(0);
		private final Keyword cENDKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//CustomSection:
		//	name="CUSTOM" cust_vals+=CustomValue* => "END";
		@Override public ParserRule getRule() { return rule; }

		//name="CUSTOM" cust_vals+=CustomValue* => "END"
		public Group getGroup() { return cGroup; }

		//name="CUSTOM"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"CUSTOM"
		public Keyword getNameCUSTOMKeyword_0_0() { return cNameCUSTOMKeyword_0_0; }

		//cust_vals+=CustomValue*
		public Assignment getCust_valsAssignment_1() { return cCust_valsAssignment_1; }

		//CustomValue
		public RuleCall getCust_valsCustomValueParserRuleCall_1_0() { return cCust_valsCustomValueParserRuleCall_1_0; }

		//=> "END"
		public Keyword getENDKeyword_2() { return cENDKeyword_2; }
	}

	public class CustomValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CustomValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cValueParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//CustomValue:
		//	ID Value ";";
		@Override public ParserRule getRule() { return rule; }

		//ID Value ";"
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//Value
		public RuleCall getValueParserRuleCall_1() { return cValueParserRuleCall_1; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class ResourceOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResourceOption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cNameDESCRIPTIONKeyword_0_0_0 = (Keyword)cNameAssignment_0_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cNameFILEKeyword_0_1_0 = (Keyword)cNameAssignment_0_1.eContents().get(0);
		private final Assignment cNameAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final Keyword cNameLABELKeyword_0_2_0 = (Keyword)cNameAssignment_0_2.eContents().get(0);
		private final Assignment cNameAssignment_0_3 = (Assignment)cAlternatives_0.eContents().get(3);
		private final Keyword cName_HTML_STYLECLASSKeyword_0_3_0 = (Keyword)cNameAssignment_0_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValsValueParserRuleCall_2_0 = (RuleCall)cValsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ResourceOption:
		//	(name="DESCRIPTION" | name="FILE" | name="LABEL" | name="_HTML_STYLECLASS") "(" vals=Value ")";
		@Override public ParserRule getRule() { return rule; }

		//(name="DESCRIPTION" | name="FILE" | name="LABEL" | name="_HTML_STYLECLASS") "(" vals=Value ")"
		public Group getGroup() { return cGroup; }

		//name="DESCRIPTION" | name="FILE" | name="LABEL" | name="_HTML_STYLECLASS"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//name="DESCRIPTION"
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//"DESCRIPTION"
		public Keyword getNameDESCRIPTIONKeyword_0_0_0() { return cNameDESCRIPTIONKeyword_0_0_0; }

		//name="FILE"
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//"FILE"
		public Keyword getNameFILEKeyword_0_1_0() { return cNameFILEKeyword_0_1_0; }

		//name="LABEL"
		public Assignment getNameAssignment_0_2() { return cNameAssignment_0_2; }

		//"LABEL"
		public Keyword getNameLABELKeyword_0_2_0() { return cNameLABELKeyword_0_2_0; }

		//name="_HTML_STYLECLASS"
		public Assignment getNameAssignment_0_3() { return cNameAssignment_0_3; }

		//"_HTML_STYLECLASS"
		public Keyword getName_HTML_STYLECLASSKeyword_0_3_0() { return cName_HTML_STYLECLASSKeyword_0_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//vals=Value
		public Assignment getValsAssignment_2() { return cValsAssignment_2; }

		//Value
		public RuleCall getValsValueParserRuleCall_2_0() { return cValsValueParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ResourceOptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResourceOptions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRes_opsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRes_opsResourceOptionParserRuleCall_0_0 = (RuleCall)cRes_opsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRes_opsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRes_opsResourceOptionParserRuleCall_1_1_0 = (RuleCall)cRes_opsAssignment_1_1.eContents().get(0);
		
		//ResourceOptions:
		//	res_ops+=ResourceOption ("," res_ops+=ResourceOption)*;
		@Override public ParserRule getRule() { return rule; }

		//res_ops+=ResourceOption ("," res_ops+=ResourceOption)*
		public Group getGroup() { return cGroup; }

		//res_ops+=ResourceOption
		public Assignment getRes_opsAssignment_0() { return cRes_opsAssignment_0; }

		//ResourceOption
		public RuleCall getRes_opsResourceOptionParserRuleCall_0_0() { return cRes_opsResourceOptionParserRuleCall_0_0; }

		//("," res_ops+=ResourceOption)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//res_ops+=ResourceOption
		public Assignment getRes_opsAssignment_1_1() { return cRes_opsAssignment_1_1; }

		//ResourceOption
		public RuleCall getRes_opsResourceOptionParserRuleCall_1_1_0() { return cRes_opsResourceOptionParserRuleCall_1_1_0; }
	}

	public class ResourceValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResourceValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cValueParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRes_opsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRes_opsResourceOptionsParserRuleCall_2_0 = (RuleCall)cRes_opsAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ResourceValue:
		//	Value ":" res_ops=ResourceOptions? ";";
		@Override public ParserRule getRule() { return rule; }

		//Value ":" res_ops=ResourceOptions? ";"
		public Group getGroup() { return cGroup; }

		//Value
		public RuleCall getValueParserRuleCall_0() { return cValueParserRuleCall_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//res_ops=ResourceOptions?
		public Assignment getRes_opsAssignment_2() { return cRes_opsAssignment_2; }

		//ResourceOptions
		public RuleCall getRes_opsResourceOptionsParserRuleCall_2_0() { return cRes_opsResourceOptionsParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ResourceSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResourceSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameRESOURCESKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cRes_valsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRes_valsResourceValueParserRuleCall_1_0 = (RuleCall)cRes_valsAssignment_1.eContents().get(0);
		private final Keyword cENDKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ResourceSection:
		//	name="RESOURCES" res_vals+=ResourceValue+ => "END";
		@Override public ParserRule getRule() { return rule; }

		//name="RESOURCES" res_vals+=ResourceValue+ => "END"
		public Group getGroup() { return cGroup; }

		//name="RESOURCES"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"RESOURCES"
		public Keyword getNameRESOURCESKeyword_0_0() { return cNameRESOURCESKeyword_0_0; }

		//res_vals+=ResourceValue+
		public Assignment getRes_valsAssignment_1() { return cRes_valsAssignment_1; }

		//ResourceValue
		public RuleCall getRes_valsResourceValueParserRuleCall_1_0() { return cRes_valsResourceValueParserRuleCall_1_0; }

		//=> "END"
		public Keyword getENDKeyword_2() { return cENDKeyword_2; }
	}
	
	
	private final ProgramElements pProgram;
	private final BasePropElements pBaseProp;
	private final CategoryTypeElements pCategoryType;
	private final CategoryTypeListElements pCategoryTypeList;
	private final ValueElements pValue;
	private final ValueListElements pValueList;
	private final ID_listElements pID_list;
	private final AssignElements pAssign;
	private final AssignListElements pAssignList;
	private final CompositionHeaderElements pCompositionHeader;
	private final ContractInstanceElements pContractInstance;
	private final FieldDeclElements pFieldDecl;
	private final EnumDeclElements pEnumDecl;
	private final InputSectionElements pInputSection;
	private final BoolElements pBool;
	private final IntVarElements pIntVar;
	private final StringVarElements pStringVar;
	private final RecordElements pRecord;
	private final DatasetElements pDataset;
	private final GroupElements pGroup;
	private final DatatypeElements pDatatype;
	private final InputValueElements pInputValue;
	private final InputOptionsElements pInputOptions;
	private final InputOptionElements pInputOption;
	private final FormfieldOptionElements pFormfieldOption;
	private final InputtypeOptionElements pInputtypeOption;
	private final InputtypeOptionsElements pInputtypeOptions;
	private final OutputSectionElements pOutputSection;
	private final OutfieldDeclElements pOutfieldDecl;
	private final ECLIntegerElements pECLInteger;
	private final ECLUnsignedElements pECLUnsigned;
	private final ECLStringElements pECLString;
	private final ECLQstringElements pECLQstring;
	private final ECLVarstringElements pECLVarstring;
	private final ECLUnicodeElements pECLUnicode;
	private final ECLVarunicodeElements pECLVarunicode;
	private final ECLDataElements pECLData;
	private final ECLRealElements pECLReal;
	private final ECLfieldTypeElements pECLfieldType;
	private final PosVizDataElements pPosVizData;
	private final ECLOutputDeclElements pECLOutputDecl;
	private final OutputOptionElements pOutputOption;
	private final OutputOptionsElements pOutputOptions;
	private final OutTypeElements pOutType;
	private final OutDatasetElements pOutDataset;
	private final OutputValueElements pOutputValue;
	private final OutputBaseElements pOutputBase;
	private final GenerateSectionElements pGenerateSection;
	private final GenerateBodyInlineElements pGenerateBodyInline;
	private final GenerateBodySaltElements pGenerateBodySalt;
	private final VisualSectionElements pVisualSection;
	private final VisualizationElements pVisualization;
	private final VisBasisElements pVisBasis;
	private final VisBasisQualifiersElements pVisBasisQualifiers;
	private final FunctionElements pFunction;
	private final VisualSectionOptionsElements pVisualSectionOptions;
	private final VisualSectionOptionElements pVisualSectionOption;
	private final VisualOptionsElements pVisualOptions;
	private final VisualOptionElements pVisualOption;
	private final VisualMultivalElements pVisualMultival;
	private final CustomSectionElements pCustomSection;
	private final CustomValueElements pCustomValue;
	private final ResourceOptionElements pResourceOption;
	private final ResourceOptionsElements pResourceOptions;
	private final ResourceValueElements pResourceValue;
	private final ResourceSectionElements pResourceSection;
	private final TerminalRule tWS;
	private final TerminalRule tINT;
	private final TerminalRule tSTRING;
	private final TerminalRule tGEN_BLOCK;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public HIPIEGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pBaseProp = new BasePropElements();
		this.pCategoryType = new CategoryTypeElements();
		this.pCategoryTypeList = new CategoryTypeListElements();
		this.pValue = new ValueElements();
		this.pValueList = new ValueListElements();
		this.pID_list = new ID_listElements();
		this.pAssign = new AssignElements();
		this.pAssignList = new AssignListElements();
		this.pCompositionHeader = new CompositionHeaderElements();
		this.pContractInstance = new ContractInstanceElements();
		this.pFieldDecl = new FieldDeclElements();
		this.pEnumDecl = new EnumDeclElements();
		this.pInputSection = new InputSectionElements();
		this.pBool = new BoolElements();
		this.pIntVar = new IntVarElements();
		this.pStringVar = new StringVarElements();
		this.pRecord = new RecordElements();
		this.pDataset = new DatasetElements();
		this.pGroup = new GroupElements();
		this.pDatatype = new DatatypeElements();
		this.pInputValue = new InputValueElements();
		this.pInputOptions = new InputOptionsElements();
		this.pInputOption = new InputOptionElements();
		this.pFormfieldOption = new FormfieldOptionElements();
		this.pInputtypeOption = new InputtypeOptionElements();
		this.pInputtypeOptions = new InputtypeOptionsElements();
		this.pOutputSection = new OutputSectionElements();
		this.pOutfieldDecl = new OutfieldDeclElements();
		this.pECLInteger = new ECLIntegerElements();
		this.pECLUnsigned = new ECLUnsignedElements();
		this.pECLString = new ECLStringElements();
		this.pECLQstring = new ECLQstringElements();
		this.pECLVarstring = new ECLVarstringElements();
		this.pECLUnicode = new ECLUnicodeElements();
		this.pECLVarunicode = new ECLVarunicodeElements();
		this.pECLData = new ECLDataElements();
		this.pECLReal = new ECLRealElements();
		this.pECLfieldType = new ECLfieldTypeElements();
		this.pPosVizData = new PosVizDataElements();
		this.pECLOutputDecl = new ECLOutputDeclElements();
		this.pOutputOption = new OutputOptionElements();
		this.pOutputOptions = new OutputOptionsElements();
		this.pOutType = new OutTypeElements();
		this.pOutDataset = new OutDatasetElements();
		this.pOutputValue = new OutputValueElements();
		this.pOutputBase = new OutputBaseElements();
		this.pGenerateSection = new GenerateSectionElements();
		this.pGenerateBodyInline = new GenerateBodyInlineElements();
		this.pGenerateBodySalt = new GenerateBodySaltElements();
		this.pVisualSection = new VisualSectionElements();
		this.pVisualization = new VisualizationElements();
		this.pVisBasis = new VisBasisElements();
		this.pVisBasisQualifiers = new VisBasisQualifiersElements();
		this.pFunction = new FunctionElements();
		this.pVisualSectionOptions = new VisualSectionOptionsElements();
		this.pVisualSectionOption = new VisualSectionOptionElements();
		this.pVisualOptions = new VisualOptionsElements();
		this.pVisualOption = new VisualOptionElements();
		this.pVisualMultival = new VisualMultivalElements();
		this.pCustomSection = new CustomSectionElements();
		this.pCustomValue = new CustomValueElements();
		this.pResourceOption = new ResourceOptionElements();
		this.pResourceOptions = new ResourceOptionsElements();
		this.pResourceValue = new ResourceValueElements();
		this.pResourceSection = new ResourceSectionElements();
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING");
		this.tGEN_BLOCK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "GEN_BLOCK");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.hipie.HIPIE".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	composition_header+=CompositionHeader? base_props+=BaseProp+ contract_instances+=ContractInstance*
	//	input_section+=InputSection? output_section+=OutputSection? visual_section+=VisualSection*
	//	generate_section+=GenerateSection? custom_section+=CustomSection? sesource_section+=ResourceSection?;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	//BaseProp:
	//	(name="NAME" | name="DESCRIPTION" | name="AUTHOR" | name="LICENSE" | name="COPYRIGHT" | name="VERSION" | name="LABEL"
	//	| name="ID") val_list=ValueList ";" | name="CATEGORY" cat_list=CategoryTypeList ";";
	public BasePropElements getBasePropAccess() {
		return pBaseProp;
	}
	
	public ParserRule getBasePropRule() {
		return getBasePropAccess().getRule();
	}

	//CategoryType:
	//	"CLEAN" | "INPUT" | "APPEND" | "LINK" | "ANALYSIS" | "CUSTOM" | "VISUALIZE" | "OUTPUT";
	public CategoryTypeElements getCategoryTypeAccess() {
		return pCategoryType;
	}
	
	public ParserRule getCategoryTypeRule() {
		return getCategoryTypeAccess().getRule();
	}

	//CategoryTypeList:
	//	cats+=CategoryType ("," cats+=CategoryType)*;
	public CategoryTypeListElements getCategoryTypeListAccess() {
		return pCategoryTypeList;
	}
	
	public ParserRule getCategoryTypeListRule() {
		return getCategoryTypeListAccess().getRule();
	}

	//Value:
	//	name=ID | int_val=INT | str_val=STRING;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//ValueList:
	//	vals+=Value ("," vals+=Value)*;
	public ValueListElements getValueListAccess() {
		return pValueList;
	}
	
	public ParserRule getValueListRule() {
		return getValueListAccess().getRule();
	}

	//ID_list:
	//	ID ("," ID)*;
	public ID_listElements getID_listAccess() {
		return pID_list;
	}
	
	public ParserRule getID_listRule() {
		return getID_listAccess().getRule();
	}

	//Assign:
	//	name=ID "=" vals=ValueList;
	public AssignElements getAssignAccess() {
		return pAssign;
	}
	
	public ParserRule getAssignRule() {
		return getAssignAccess().getRule();
	}

	//AssignList:
	//	assigns+=Assign ("," assigns+=Assign)*;
	public AssignListElements getAssignListAccess() {
		return pAssignList;
	}
	
	public ParserRule getAssignListRule() {
		return getAssignListAccess().getRule();
	}

	//CompositionHeader:
	//	name="HEADER" assigns+=Assign* => "END";
	public CompositionHeaderElements getCompositionHeaderAccess() {
		return pCompositionHeader;
	}
	
	public ParserRule getCompositionHeaderRule() {
		return getCompositionHeaderAccess().getRule();
	}

	//ContractInstance:
	//	sec_name="INSTANCE" (ID ":")? vals+=Value "(" vars+=[Value] ")" assigns+=Assign* => "END";
	public ContractInstanceElements getContractInstanceAccess() {
		return pContractInstance;
	}
	
	public ParserRule getContractInstanceRule() {
		return getContractInstanceAccess().getRule();
	}

	//FieldDecl:
	//	"FIELD" name=ID input_ops=InputOptions? ";";
	public FieldDeclElements getFieldDeclAccess() {
		return pFieldDecl;
	}
	
	public ParserRule getFieldDeclRule() {
		return getFieldDeclAccess().getRule();
	}

	//EnumDecl:
	//	enum_dec="ENUM" "(" (vals+=ValueList | assigns+=AssignList) ")";
	public EnumDeclElements getEnumDeclAccess() {
		return pEnumDecl;
	}
	
	public ParserRule getEnumDeclRule() {
		return getEnumDeclAccess().getRule();
	}

	//InputSection:
	//	name="INPUTS" inputs+=InputValue+ => "END";
	public InputSectionElements getInputSectionAccess() {
		return pInputSection;
	}
	
	public ParserRule getInputSectionRule() {
		return getInputSectionAccess().getRule();
	}

	//Bool:
	//	"BOOL" name=ID;
	public BoolElements getBoolAccess() {
		return pBool;
	}
	
	public ParserRule getBoolRule() {
		return getBoolAccess().getRule();
	}

	//IntVar:
	//	"INT" name=ID;
	public IntVarElements getIntVarAccess() {
		return pIntVar;
	}
	
	public ParserRule getIntVarRule() {
		return getIntVarAccess().getRule();
	}

	//StringVar:
	//	"STRING" name=ID;
	public StringVarElements getStringVarAccess() {
		return pStringVar;
	}
	
	public ParserRule getStringVarRule() {
		return getStringVarAccess().getRule();
	}

	//Record:
	//	"RECORD" name=ID;
	public RecordElements getRecordAccess() {
		return pRecord;
	}
	
	public ParserRule getRecordRule() {
		return getRecordAccess().getRule();
	}

	//Dataset:
	//	"DATASET" name=ID;
	public DatasetElements getDatasetAccess() {
		return pDataset;
	}
	
	public ParserRule getDatasetRule() {
		return getDatasetAccess().getRule();
	}

	//Group:
	//	"GROUP" name=ID;
	public GroupElements getGroupAccess() {
		return pGroup;
	}
	
	public ParserRule getGroupRule() {
		return getGroupAccess().getRule();
	}

	//Datatype:
	//	Bool | IntVar | StringVar | Record | Dataset;
	public DatatypeElements getDatatypeAccess() {
		return pDatatype;
	}
	
	public ParserRule getDatatypeRule() {
		return getDatatypeAccess().getRule();
	}

	//InputValue:
	//	(Bool | IntVar | StringVar | Record | Dataset | EnumDecl) input_op_list=InputOptions? ";" | Dataset
	//	input_op_list=InputOptions? fields+=FieldDecl* => "END" | Group input_op_list=InputOptions? vals+=InputValue* =>
	//	"END";
	public InputValueElements getInputValueAccess() {
		return pInputValue;
	}
	
	public ParserRule getInputValueRule() {
		return getInputValueAccess().getRule();
	}

	//InputOptions:
	//	":" input_ops+=InputOption ("," input_ops+=InputOption)*;
	public InputOptionsElements getInputOptionsAccess() {
		return pInputOptions;
	}
	
	public ParserRule getInputOptionsRule() {
		return getInputOptionsAccess().getRule();
	}

	//InputOption:
	//	(name="OPTIONAL" | name="DEFINED" | name="DISABLED" | name="MAPBYTYPE" | name="MAPBYNAME" | name="MANY") |
	//	name="FORMFIELD" "(" FormfieldOption ")" | name="ENABLE" "(" assigns_list=AssignList ")" | name="TYPE" "("
	//	InputtypeOptions ")" | (name="RANGE" | name="DEFAULT" | name="MAXLENGTH" | name="DISABLED" | name="DESCRIPTION" |
	//	name="NULL" | name="FIELDLENGTH" | name="ROWS" | name="COLS" | name="_HTML_STYLECLASS" | name="LABEL") "("
	//	vals+=ValueList ")";
	public InputOptionElements getInputOptionAccess() {
		return pInputOption;
	}
	
	public ParserRule getInputOptionRule() {
		return getInputOptionAccess().getRule();
	}

	//FormfieldOption:
	//	"CHECKBOX" | "RADIO" | "SELECT" | "MULTIPLESELECT" | "TEXTAREA" | "HIDDEN" | "TEXT";
	public FormfieldOptionElements getFormfieldOptionAccess() {
		return pFormfieldOption;
	}
	
	public ParserRule getFormfieldOptionRule() {
		return getFormfieldOptionAccess().getRule();
	}

	//InputtypeOption:
	//	"STRING" | "UNICODE" | "UNISTR" | "INTEGER" | "DECIMAL" | "NUMERIC" | "REAL";
	public InputtypeOptionElements getInputtypeOptionAccess() {
		return pInputtypeOption;
	}
	
	public ParserRule getInputtypeOptionRule() {
		return getInputtypeOptionAccess().getRule();
	}

	//InputtypeOptions:
	//	InputtypeOption ("," InputtypeOption)*;
	public InputtypeOptionsElements getInputtypeOptionsAccess() {
		return pInputtypeOptions;
	}
	
	public ParserRule getInputtypeOptionsRule() {
		return getInputtypeOptionsAccess().getRule();
	}

	//OutputSection:
	//	name="OUTPUTS" outputs+=OutputValue+ => "END";
	public OutputSectionElements getOutputSectionAccess() {
		return pOutputSection;
	}
	
	public ParserRule getOutputSectionRule() {
		return getOutputSectionAccess().getRule();
	}

	//OutfieldDecl:
	//	IntVar | Bool | StringVar | fields+=FieldDecl;
	public OutfieldDeclElements getOutfieldDeclAccess() {
		return pOutfieldDecl;
	}
	
	public ParserRule getOutfieldDeclRule() {
		return getOutfieldDeclAccess().getRule();
	}

	//ECLInteger:
	//	"INTEGER" INT? name=ID;
	public ECLIntegerElements getECLIntegerAccess() {
		return pECLInteger;
	}
	
	public ParserRule getECLIntegerRule() {
		return getECLIntegerAccess().getRule();
	}

	//ECLUnsigned:
	//	"UNSIGNED" INT? name=ID;
	public ECLUnsignedElements getECLUnsignedAccess() {
		return pECLUnsigned;
	}
	
	public ParserRule getECLUnsignedRule() {
		return getECLUnsignedAccess().getRule();
	}

	//ECLString:
	//	"STRING" INT? name=ID;
	public ECLStringElements getECLStringAccess() {
		return pECLString;
	}
	
	public ParserRule getECLStringRule() {
		return getECLStringAccess().getRule();
	}

	//ECLQstring:
	//	"QSTRING" INT? name=ID;
	public ECLQstringElements getECLQstringAccess() {
		return pECLQstring;
	}
	
	public ParserRule getECLQstringRule() {
		return getECLQstringAccess().getRule();
	}

	//ECLVarstring:
	//	"VARSTRING" INT? name=ID;
	public ECLVarstringElements getECLVarstringAccess() {
		return pECLVarstring;
	}
	
	public ParserRule getECLVarstringRule() {
		return getECLVarstringAccess().getRule();
	}

	//ECLUnicode:
	//	"UNICODE" INT? name=ID;
	public ECLUnicodeElements getECLUnicodeAccess() {
		return pECLUnicode;
	}
	
	public ParserRule getECLUnicodeRule() {
		return getECLUnicodeAccess().getRule();
	}

	//ECLVarunicode:
	//	"VARUNICODE" INT? name=ID;
	public ECLVarunicodeElements getECLVarunicodeAccess() {
		return pECLVarunicode;
	}
	
	public ParserRule getECLVarunicodeRule() {
		return getECLVarunicodeAccess().getRule();
	}

	//ECLData:
	//	"DATA" name=ID;
	public ECLDataElements getECLDataAccess() {
		return pECLData;
	}
	
	public ParserRule getECLDataRule() {
		return getECLDataAccess().getRule();
	}

	//ECLReal:
	//	"REAL" name=ID;
	public ECLRealElements getECLRealAccess() {
		return pECLReal;
	}
	
	public ParserRule getECLRealRule() {
		return getECLRealAccess().getRule();
	}

	//ECLfieldType:
	//	ECLInteger | ECLQstring | ECLString | ECLReal | ECLUnicode | ECLData | ECLVarstring | ECLVarunicode | ECLUnsigned;
	public ECLfieldTypeElements getECLfieldTypeAccess() {
		return pECLfieldType;
	}
	
	public ParserRule getECLfieldTypeRule() {
		return getECLfieldTypeAccess().getRule();
	}

	//PosVizData:
	//	ECLfieldType | FieldDecl;
	public PosVizDataElements getPosVizDataAccess() {
		return pPosVizData;
	}
	
	public ParserRule getPosVizDataRule() {
		return getPosVizDataAccess().getRule();
	}

	//ECLOutputDecl:
	//	ECLfieldType options=OutputOptions? ";";
	public ECLOutputDeclElements getECLOutputDeclAccess() {
		return pECLOutputDecl;
	}
	
	public ParserRule getECLOutputDeclRule() {
		return getECLOutputDeclAccess().getRule();
	}

	//OutputOption:
	//	(name="SIDE" | name="LARGE" | name="SMALL" | name="FEW" | name="WUID") | name="FROM" "(" vars=[Datatype] ")" |
	//	name="DESCRIPTION" "(" vals=Value ")";
	public OutputOptionElements getOutputOptionAccess() {
		return pOutputOption;
	}
	
	public ParserRule getOutputOptionRule() {
		return getOutputOptionAccess().getRule();
	}

	//OutputOptions:
	//	":" output_ops+=OutputOption ("," output_ops+=OutputOption)*;
	public OutputOptionsElements getOutputOptionsAccess() {
		return pOutputOptions;
	}
	
	public ParserRule getOutputOptionsRule() {
		return getOutputOptionsAccess().getRule();
	}

	//OutType:
	//	("BOOL" | "INT" | "STRING" | "ACTION")? val=Value;
	public OutTypeElements getOutTypeAccess() {
		return pOutType;
	}
	
	public ParserRule getOutTypeRule() {
		return getOutTypeAccess().getRule();
	}

	//OutDataset:
	//	"DATASET" name=ID out_base=OutputBase? ops+=OutputOptions?;
	public OutDatasetElements getOutDatasetAccess() {
		return pOutDataset;
	}
	
	public ParserRule getOutDatasetRule() {
		return getOutDatasetAccess().getRule();
	}

	//OutputValue:
	//	OutType ops=OutputOptions? ";" | OutDataset ecl_vars+=ECLOutputDecl* => "END" | OutDataset ";";
	public OutputValueElements getOutputValueAccess() {
		return pOutputValue;
	}
	
	public ParserRule getOutputValueRule() {
		return getOutputValueAccess().getRule();
	}

	//OutputBase:
	//	"(" base=[Datatype] ")";
	public OutputBaseElements getOutputBaseAccess() {
		return pOutputBase;
	}
	
	public ParserRule getOutputBaseRule() {
		return getOutputBaseAccess().getRule();
	}

	//GenerateSection:
	//	GenerateBodyInline | GenerateBodySalt;
	public GenerateSectionElements getGenerateSectionAccess() {
		return pGenerateSection;
	}
	
	public ParserRule getGenerateSectionRule() {
		return getGenerateSectionAccess().getRule();
	}

	//GenerateBodyInline:
	//	name="GENERATES" GEN_BLOCK;
	public GenerateBodyInlineElements getGenerateBodyInlineAccess() {
		return pGenerateBodyInline;
	}
	
	public ParserRule getGenerateBodyInlineRule() {
		return getGenerateBodyInlineAccess().getRule();
	}

	//GenerateBodySalt:
	//	name="GENERATES" "SALT" "(" ID ")" ":" ("SCOREDSEARCH" | "PROFILE") => "ENDGENERATES";
	public GenerateBodySaltElements getGenerateBodySaltAccess() {
		return pGenerateBodySalt;
	}
	
	public ParserRule getGenerateBodySaltRule() {
		return getGenerateBodySaltAccess().getRule();
	}

	//VisualSection:
	//	sec_name="VISUALIZE" ID vis_ops=VisualSectionOptions? vis_elements+=Visualization+ => "END";
	public VisualSectionElements getVisualSectionAccess() {
		return pVisualSection;
	}
	
	public ParserRule getVisualSectionRule() {
		return getVisualSectionAccess().getRule();
	}

	//Visualization:
	//	("CHORO" | "LINE" | "TIMELINE" | "PIE" | "BAR" | "TABLE") name=ID "(" input=VisBasis ")" vis_op=VisualOptions? ";" |
	//	"SLIDER" name=ID vis_op=VisualOptions? ";";
	public VisualizationElements getVisualizationAccess() {
		return pVisualization;
	}
	
	public ParserRule getVisualizationRule() {
		return getVisualizationAccess().getRule();
	}

	//VisBasis:
	//	basis=[OutDataset] quals=VisBasisQualifiers?;
	public VisBasisElements getVisBasisAccess() {
		return pVisBasis;
	}
	
	public ParserRule getVisBasisRule() {
		return getVisBasisAccess().getRule();
	}

	//VisBasisQualifiers:
	//	"{" funcs+=Function ("," funcs+=Function)* "}";
	public VisBasisQualifiersElements getVisBasisQualifiersAccess() {
		return pVisBasisQualifiers;
	}
	
	public ParserRule getVisBasisQualifiersRule() {
		return getVisBasisQualifiersAccess().getRule();
	}

	//Function:
	//	vars=[PosVizData] | vals=Value | "SUM" "(" (vars=[PosVizData] | vals=Value) ")" | "SCALE" "(" (vars=[PosVizData] |
	//	vals=Value) "," INT ")";
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}

	//VisualSectionOptions:
	//	":" vis_ops+=VisualSectionOption ("," vis_ops+=VisualSectionOption)*;
	public VisualSectionOptionsElements getVisualSectionOptionsAccess() {
		return pVisualSectionOptions;
	}
	
	public ParserRule getVisualSectionOptionsRule() {
		return getVisualSectionOptionsAccess().getRule();
	}

	//VisualSectionOption:
	//	name="LABEL" "(" vals=Value ")";
	public VisualSectionOptionElements getVisualSectionOptionAccess() {
		return pVisualSectionOption;
	}
	
	public ParserRule getVisualSectionOptionRule() {
		return getVisualSectionOptionAccess().getRule();
	}

	//VisualOptions:
	//	":" vis_ops+=VisualOption ("," vis_ops+=VisualOption)*;
	public VisualOptionsElements getVisualOptionsAccess() {
		return pVisualOptions;
	}
	
	public ParserRule getVisualOptionsRule() {
		return getVisualOptionsAccess().getRule();
	}

	//VisualOption:
	//	(name="TITLE" | name="DATE" | name="DESCRIPTION" | name="PICTURE" | name="STATE" | name="COUNTY" | name="WEIGHT" |
	//	name="SIZE") "(" funcs+=Function ")" | vis_mult=VisualMultival "(" funcs+=Function ("," funcs+=Function)* ")" |
	//	name="SELECTS" "(" ID "->" ID ")";
	public VisualOptionElements getVisualOptionAccess() {
		return pVisualOption;
	}
	
	public ParserRule getVisualOptionRule() {
		return getVisualOptionAccess().getRule();
	}

	//VisualMultival:
	//	name="X" | name="Y" | name="COLOR" | name="RANGE" | name="FILTER" | name="LABEL" | name="VALUE";
	public VisualMultivalElements getVisualMultivalAccess() {
		return pVisualMultival;
	}
	
	public ParserRule getVisualMultivalRule() {
		return getVisualMultivalAccess().getRule();
	}

	//CustomSection:
	//	name="CUSTOM" cust_vals+=CustomValue* => "END";
	public CustomSectionElements getCustomSectionAccess() {
		return pCustomSection;
	}
	
	public ParserRule getCustomSectionRule() {
		return getCustomSectionAccess().getRule();
	}

	//CustomValue:
	//	ID Value ";";
	public CustomValueElements getCustomValueAccess() {
		return pCustomValue;
	}
	
	public ParserRule getCustomValueRule() {
		return getCustomValueAccess().getRule();
	}

	//ResourceOption:
	//	(name="DESCRIPTION" | name="FILE" | name="LABEL" | name="_HTML_STYLECLASS") "(" vals=Value ")";
	public ResourceOptionElements getResourceOptionAccess() {
		return pResourceOption;
	}
	
	public ParserRule getResourceOptionRule() {
		return getResourceOptionAccess().getRule();
	}

	//ResourceOptions:
	//	res_ops+=ResourceOption ("," res_ops+=ResourceOption)*;
	public ResourceOptionsElements getResourceOptionsAccess() {
		return pResourceOptions;
	}
	
	public ParserRule getResourceOptionsRule() {
		return getResourceOptionsAccess().getRule();
	}

	//ResourceValue:
	//	Value ":" res_ops=ResourceOptions? ";";
	public ResourceValueElements getResourceValueAccess() {
		return pResourceValue;
	}
	
	public ParserRule getResourceValueRule() {
		return getResourceValueAccess().getRule();
	}

	//ResourceSection:
	//	name="RESOURCES" res_vals+=ResourceValue+ => "END";
	public ResourceSectionElements getResourceSectionAccess() {
		return pResourceSection;
	}
	
	public ParserRule getResourceSectionRule() {
		return getResourceSectionAccess().getRule();
	}

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return tWS;
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return tINT;
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	} 

	//terminal GEN_BLOCK:
	//	"INLINE"->"ENDGENERATES";
	public TerminalRule getGEN_BLOCKRule() {
		return tGEN_BLOCK;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
