/*
 * generated by Xtext
 */
package org.xtext.hipie.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.hipie.services.HIPIEGrammarAccess;

@SuppressWarnings("all")
public class HIPIESyntacticSequencer extends AbstractSyntacticSequencer {

	protected HIPIEGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ContractInstance___IDTerminalRuleCall_1_0_ColonKeyword_1_1__q;
	protected AbstractElementAlias match_ECLInteger_INTTerminalRuleCall_1_q;
	protected AbstractElementAlias match_ECLQstring_INTTerminalRuleCall_1_q;
	protected AbstractElementAlias match_ECLString_INTTerminalRuleCall_1_q;
	protected AbstractElementAlias match_ECLUnicode_INTTerminalRuleCall_1_q;
	protected AbstractElementAlias match_ECLUnsigned_INTTerminalRuleCall_1_q;
	protected AbstractElementAlias match_ECLVarstring_INTTerminalRuleCall_1_q;
	protected AbstractElementAlias match_ECLVarunicode_INTTerminalRuleCall_1_q;
	protected AbstractElementAlias match_GenerateBodySalt_PROFILEKeyword_6_1_or_SCOREDSEARCHKeyword_6_0;
	protected AbstractElementAlias match_OutType___ACTIONKeyword_0_3_or_BOOLKeyword_0_0_or_INTKeyword_0_1_or_STRINGKeyword_0_2__q;
	protected AbstractElementAlias match_Visualization_BARKeyword_0_0_4_or_CHOROKeyword_0_0_0_or_LINEKeyword_0_0_1_or_PIEKeyword_0_0_3_or_TABLEKeyword_0_0_5_or_TIMELINEKeyword_0_0_2;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (HIPIEGrammarAccess) access;
		match_ContractInstance___IDTerminalRuleCall_1_0_ColonKeyword_1_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getContractInstanceAccess().getIDTerminalRuleCall_1_0()), new TokenAlias(false, false, grammarAccess.getContractInstanceAccess().getColonKeyword_1_1()));
		match_ECLInteger_INTTerminalRuleCall_1_q = new TokenAlias(false, true, grammarAccess.getECLIntegerAccess().getINTTerminalRuleCall_1());
		match_ECLQstring_INTTerminalRuleCall_1_q = new TokenAlias(false, true, grammarAccess.getECLQstringAccess().getINTTerminalRuleCall_1());
		match_ECLString_INTTerminalRuleCall_1_q = new TokenAlias(false, true, grammarAccess.getECLStringAccess().getINTTerminalRuleCall_1());
		match_ECLUnicode_INTTerminalRuleCall_1_q = new TokenAlias(false, true, grammarAccess.getECLUnicodeAccess().getINTTerminalRuleCall_1());
		match_ECLUnsigned_INTTerminalRuleCall_1_q = new TokenAlias(false, true, grammarAccess.getECLUnsignedAccess().getINTTerminalRuleCall_1());
		match_ECLVarstring_INTTerminalRuleCall_1_q = new TokenAlias(false, true, grammarAccess.getECLVarstringAccess().getINTTerminalRuleCall_1());
		match_ECLVarunicode_INTTerminalRuleCall_1_q = new TokenAlias(false, true, grammarAccess.getECLVarunicodeAccess().getINTTerminalRuleCall_1());
		match_GenerateBodySalt_PROFILEKeyword_6_1_or_SCOREDSEARCHKeyword_6_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getGenerateBodySaltAccess().getPROFILEKeyword_6_1()), new TokenAlias(false, false, grammarAccess.getGenerateBodySaltAccess().getSCOREDSEARCHKeyword_6_0()));
		match_OutType___ACTIONKeyword_0_3_or_BOOLKeyword_0_0_or_INTKeyword_0_1_or_STRINGKeyword_0_2__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getOutTypeAccess().getACTIONKeyword_0_3()), new TokenAlias(false, false, grammarAccess.getOutTypeAccess().getBOOLKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getOutTypeAccess().getINTKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getOutTypeAccess().getSTRINGKeyword_0_2()));
		match_Visualization_BARKeyword_0_0_4_or_CHOROKeyword_0_0_0_or_LINEKeyword_0_0_1_or_PIEKeyword_0_0_3_or_TABLEKeyword_0_0_5_or_TIMELINEKeyword_0_0_2 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getVisualizationAccess().getBARKeyword_0_0_4()), new TokenAlias(false, false, grammarAccess.getVisualizationAccess().getCHOROKeyword_0_0_0()), new TokenAlias(false, false, grammarAccess.getVisualizationAccess().getLINEKeyword_0_0_1()), new TokenAlias(false, false, grammarAccess.getVisualizationAccess().getPIEKeyword_0_0_3()), new TokenAlias(false, false, grammarAccess.getVisualizationAccess().getTABLEKeyword_0_0_5()), new TokenAlias(false, false, grammarAccess.getVisualizationAccess().getTIMELINEKeyword_0_0_2()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if(ruleCall.getRule() == grammarAccess.getFormfieldOptionRule())
			return getFormfieldOptionToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getGEN_BLOCKRule())
			return getGEN_BLOCKToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getIDRule())
			return getIDToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getINTRule())
			return getINTToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getInputtypeOptionsRule())
			return getInputtypeOptionsToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * FormfieldOption: 
	 * 	('CHECKBOX'|'RADIO'|'SELECT'|'MULTIPLESELECT'|'TEXTAREA'|'HIDDEN'|'TEXT')
	 * ;
	 */
	protected String getFormfieldOptionToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "CHECKBOX";
	}
	
	/**
	 * terminal GEN_BLOCK :
	 * 	'INLINE' -> 'ENDGENERATES'
	 * ;
	 */
	protected String getGEN_BLOCKToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "INLINE";
	}
	
	/**
	 * terminal ID  		: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	 */
	protected String getIDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * terminal INT returns ecore::EInt:
	 * 	('0'..'9')+
	 * ;
	 */
	protected String getINTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * InputtypeOptions: 
	 * 	InputtypeOption ( ',' InputtypeOption )*
	 * ;
	 */
	protected String getInputtypeOptionsToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "STRING";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if(match_ContractInstance___IDTerminalRuleCall_1_0_ColonKeyword_1_1__q.equals(syntax))
				emit_ContractInstance___IDTerminalRuleCall_1_0_ColonKeyword_1_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_ECLInteger_INTTerminalRuleCall_1_q.equals(syntax))
				emit_ECLInteger_INTTerminalRuleCall_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_ECLQstring_INTTerminalRuleCall_1_q.equals(syntax))
				emit_ECLQstring_INTTerminalRuleCall_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_ECLString_INTTerminalRuleCall_1_q.equals(syntax))
				emit_ECLString_INTTerminalRuleCall_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_ECLUnicode_INTTerminalRuleCall_1_q.equals(syntax))
				emit_ECLUnicode_INTTerminalRuleCall_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_ECLUnsigned_INTTerminalRuleCall_1_q.equals(syntax))
				emit_ECLUnsigned_INTTerminalRuleCall_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_ECLVarstring_INTTerminalRuleCall_1_q.equals(syntax))
				emit_ECLVarstring_INTTerminalRuleCall_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_ECLVarunicode_INTTerminalRuleCall_1_q.equals(syntax))
				emit_ECLVarunicode_INTTerminalRuleCall_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_GenerateBodySalt_PROFILEKeyword_6_1_or_SCOREDSEARCHKeyword_6_0.equals(syntax))
				emit_GenerateBodySalt_PROFILEKeyword_6_1_or_SCOREDSEARCHKeyword_6_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_OutType___ACTIONKeyword_0_3_or_BOOLKeyword_0_0_or_INTKeyword_0_1_or_STRINGKeyword_0_2__q.equals(syntax))
				emit_OutType___ACTIONKeyword_0_3_or_BOOLKeyword_0_0_or_INTKeyword_0_1_or_STRINGKeyword_0_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Visualization_BARKeyword_0_0_4_or_CHOROKeyword_0_0_0_or_LINEKeyword_0_0_1_or_PIEKeyword_0_0_3_or_TABLEKeyword_0_0_5_or_TIMELINEKeyword_0_0_2.equals(syntax))
				emit_Visualization_BARKeyword_0_0_4_or_CHOROKeyword_0_0_0_or_LINEKeyword_0_0_1_or_PIEKeyword_0_0_3_or_TABLEKeyword_0_0_5_or_TIMELINEKeyword_0_0_2(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     (ID ':')?
	 *
	 * This ambiguous syntax occurs at:
	 *     sec_name='INSTANCE' (ambiguity) vals+=Value
	 */
	protected void emit_ContractInstance___IDTerminalRuleCall_1_0_ColonKeyword_1_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     INT?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'INTEGER' (ambiguity) name=ID
	 */
	protected void emit_ECLInteger_INTTerminalRuleCall_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     INT?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'QSTRING' (ambiguity) name=ID
	 */
	protected void emit_ECLQstring_INTTerminalRuleCall_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     INT?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'STRING' (ambiguity) name=ID
	 */
	protected void emit_ECLString_INTTerminalRuleCall_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     INT?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'UNICODE' (ambiguity) name=ID
	 */
	protected void emit_ECLUnicode_INTTerminalRuleCall_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     INT?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'UNSIGNED' (ambiguity) name=ID
	 */
	protected void emit_ECLUnsigned_INTTerminalRuleCall_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     INT?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'VARSTRING' (ambiguity) name=ID
	 */
	protected void emit_ECLVarstring_INTTerminalRuleCall_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     INT?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'VARUNICODE' (ambiguity) name=ID
	 */
	protected void emit_ECLVarunicode_INTTerminalRuleCall_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'SCOREDSEARCH' | 'PROFILE'
	 *
	 * This ambiguous syntax occurs at:
	 *     name='GENERATES' 'SALT' '(' ID ')' ':' (ambiguity) 'ENDGENERATES' (rule end)
	 */
	protected void emit_GenerateBodySalt_PROFILEKeyword_6_1_or_SCOREDSEARCHKeyword_6_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('BOOL' | 'INT' | 'STRING' | 'ACTION')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) val=Value
	 */
	protected void emit_OutType___ACTIONKeyword_0_3_or_BOOLKeyword_0_0_or_INTKeyword_0_1_or_STRINGKeyword_0_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (
	  *         'CHORO' | 
	  *         'LINE' | 
	  *         'TIMELINE' | 
	  *         'PIE' | 
	  *         'BAR' | 
	  *         'TABLE'
	  *     )
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) name=ID
	 */
	protected void emit_Visualization_BARKeyword_0_0_4_or_CHOROKeyword_0_0_0_or_LINEKeyword_0_0_1_or_PIEKeyword_0_0_3_or_TABLEKeyword_0_0_5_or_TIMELINEKeyword_0_0_2(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
