/**
 * generated by Xtext
 */
package org.xtext.hipie.scoping;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.ExclusiveRange;
import org.xtext.hipie.hIPIE.InputSection;
import org.xtext.hipie.hIPIE.OutputSection;
import org.xtext.hipie.hIPIE.VisualSection;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class HIPIEScopeProvider extends AbstractDeclarativeScopeProvider {
  public IScope scope_OutputBase_base(final OutputSection context, final EReference ref) {
    final EObject parent = EcoreUtil.getRootContainer(context);
    EList<EObject> _eContents = parent.eContents();
    int _length = ((Object[])Conversions.unwrapArray(_eContents, Object.class)).length;
    ExclusiveRange _doubleDotLessThan = new ExclusiveRange(0, _length, true);
    for (final Integer i : _doubleDotLessThan) {
      EList<EObject> _eContents_1 = parent.eContents();
      EObject _get = _eContents_1.get((i).intValue());
      if ((_get instanceof InputSection)) {
        EList<EObject> _eContents_2 = parent.eContents();
        EObject _get_1 = _eContents_2.get((i).intValue());
        return this.getScope(_get_1, ref);
      }
    }
    return null;
  }
  
  public IScope scope_VisBasis_basis(final VisualSection context, final EReference ref) {
    final EObject parent = EcoreUtil.getRootContainer(context);
    EList<EObject> _eContents = parent.eContents();
    int _length = ((Object[])Conversions.unwrapArray(_eContents, Object.class)).length;
    ExclusiveRange _doubleDotLessThan = new ExclusiveRange(0, _length, true);
    for (final Integer i : _doubleDotLessThan) {
      EList<EObject> _eContents_1 = parent.eContents();
      EObject _get = _eContents_1.get((i).intValue());
      if ((_get instanceof OutputSection)) {
        EList<EObject> _eContents_2 = parent.eContents();
        EObject _get_1 = _eContents_2.get((i).intValue());
        return this.getScope(_get_1, ref);
      }
    }
    return null;
  }
}
