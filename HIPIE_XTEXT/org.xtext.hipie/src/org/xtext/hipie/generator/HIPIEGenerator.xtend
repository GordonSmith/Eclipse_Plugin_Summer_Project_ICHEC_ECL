/*
 * generated by Xtext
 */
package org.xtext.hipie.generator

import org.eclipse.emf.ecore.resource.Resource
import java.lang.Process
import java.util.Scanner
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.emf.common.CommonPlugin
import org.eclipse.core.runtime.Path
import org.eclipse.core.resources.ResourcesPlugin
import java.io.FileInputStream
import java.nio.file.Files
import java.nio.file.FileSystems

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class HIPIEGenerator implements IGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) 
	{
		var resolvedFile = CommonPlugin.resolve(resource.URI);
		val filepath = ResourcesPlugin.getWorkspace().getRoot().getFile(new Path(resolvedFile.toFileString())).fullPath.toString
		val filename = resolvedFile.lastSegment.substring(0, resolvedFile.lastSegment.length-3)		
		val filepath_output = filepath.substring(0 , filepath.length-3) + "json" 
								
		val proc = Runtime.getRuntime().exec("java -cp ./libs/HIPIE.jar org/hpcc/HIPIE/commandline/CommandLineService -databomb " + filepath + " -o " + filepath_output + " -verbose") as Process ;
		val in = proc.inputStream
		val er = proc.errorStream
		val sc_verbose = new Scanner(in)
		val sc_er = new Scanner(er)
		var streamString = new String
		var streamString_er = new String
		if (sc_verbose.hasNext())
			streamString = sc_verbose.useDelimiter("\\Z").next() ;
		if (sc_er.hasNext())
				streamString_er = sc_er.useDelimiter("\\Z").next() ;
		System.out.println(streamString)
		System.out.println(streamString_er)	
		
		
		val in_stream = new FileInputStream(filepath_output);
		var streamString_in = new String
		val sc_in = new Scanner(in_stream)
		if (sc_in.hasNext())
			streamString_in = sc_in.useDelimiter("\\Z").next() ;
		
		in.close()
		er.close()
		in_stream.close() 
		sc_in.close()
		sc_verbose.close()
		sc_er.close()
		
		Files.delete(FileSystems.getDefault().getPath(filepath_output))
		fsa.generateFile(filename + 'json' , streamString_in)
		
	}
}
